{
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownHrBlockRule.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownHrBlockRule.html",
    "title": "Class MarkdownHrBlockRule\r\n   | DocFX website ",
    "keywords": "Class MarkdownHrBlockRule Inheritance Object MarkdownHrBlockRule Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownHrBlockRule : IMarkdownRule Properties Hr Declaration public virtual Regex Hr { get; } Proverty Value Type Description Regex Name Declaration public string Name { get; } Proverty Value Type Description String Methods TryMatch(IMarkdownParser, ref String) Declaration public virtual IMarkdownToken TryMatch(IMarkdownParser engine, ref string source) Parameters Type Name Description IMarkdownParser engine String source Returns Type Description IMarkdownToken"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownHeadingBlockToken.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownHeadingBlockToken.html",
    "title": "Class MarkdownHeadingBlockToken\r\n   | DocFX website ",
    "keywords": "Class MarkdownHeadingBlockToken Inheritance Object MarkdownHeadingBlockToken Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownHeadingBlockToken : IMarkdownToken, IMarkdownRewritable<MarkdownHeadingBlockToken> Constructors MarkdownHeadingBlockToken(IMarkdownRule, IMarkdownContext, InlineContent, String, Int32, String) Declaration public MarkdownHeadingBlockToken(IMarkdownRule rule, IMarkdownContext context, InlineContent content, string id, int depth, string rawMarkdown) Parameters Type Name Description IMarkdownRule rule IMarkdownContext context InlineContent content String id Int32 depth String rawMarkdown Properties Content Declaration public InlineContent Content { get; } Proverty Value Type Description InlineContent Context Declaration public IMarkdownContext Context { get; } Proverty Value Type Description IMarkdownContext Depth Declaration public int Depth { get; } Proverty Value Type Description Int32 Id Declaration public string Id { get; } Proverty Value Type Description String RawMarkdown Declaration public string RawMarkdown { get; set; } Proverty Value Type Description String Rule Declaration public IMarkdownRule Rule { get; } Proverty Value Type Description IMarkdownRule Methods Rewrite(IMarkdownRewriteEngine) Declaration public MarkdownHeadingBlockToken Rewrite(IMarkdownRewriteEngine rewriterEngine) Parameters Type Name Description IMarkdownRewriteEngine rewriterEngine Returns Type Description MarkdownHeadingBlockToken"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownHeadingBlockRule.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownHeadingBlockRule.html",
    "title": "Class MarkdownHeadingBlockRule\r\n   | DocFX website ",
    "keywords": "Class MarkdownHeadingBlockRule Inheritance Object MarkdownHeadingBlockRule Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownHeadingBlockRule : IMarkdownRule Properties Heading Declaration public virtual Regex Heading { get; } Proverty Value Type Description Regex Name Declaration public string Name { get; } Proverty Value Type Description String Methods TryMatch(IMarkdownParser, ref String) Declaration public virtual IMarkdownToken TryMatch(IMarkdownParser engine, ref string source) Parameters Type Name Description IMarkdownParser engine String source Returns Type Description IMarkdownToken"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownEscapeInlineToken.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownEscapeInlineToken.html",
    "title": "Class MarkdownEscapeInlineToken\r\n   | DocFX website ",
    "keywords": "Class MarkdownEscapeInlineToken Inheritance Object MarkdownEscapeInlineToken Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownEscapeInlineToken : IMarkdownToken Constructors MarkdownEscapeInlineToken(IMarkdownRule, IMarkdownContext, String, String) Declaration public MarkdownEscapeInlineToken(IMarkdownRule rule, IMarkdownContext context, string content, string rawMarkdown) Parameters Type Name Description IMarkdownRule rule IMarkdownContext context String content String rawMarkdown Properties Content Declaration public string Content { get; } Proverty Value Type Description String Context Declaration public IMarkdownContext Context { get; } Proverty Value Type Description IMarkdownContext RawMarkdown Declaration public string RawMarkdown { get; set; } Proverty Value Type Description String Rule Declaration public IMarkdownRule Rule { get; } Proverty Value Type Description IMarkdownRule"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownEscapeInlineRule.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownEscapeInlineRule.html",
    "title": "Class MarkdownEscapeInlineRule\r\n   | DocFX website ",
    "keywords": "Class MarkdownEscapeInlineRule Inheritance Object MarkdownEscapeInlineRule Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownEscapeInlineRule : IMarkdownRule Properties Escape Declaration public virtual Regex Escape { get; } Proverty Value Type Description Regex Name Declaration public string Name { get; } Proverty Value Type Description String Methods TryMatch(IMarkdownParser, ref String) Declaration public virtual IMarkdownToken TryMatch(IMarkdownParser engine, ref string source) Parameters Type Name Description IMarkdownParser engine String source Returns Type Description IMarkdownToken"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownEngineByOptionsBuilder.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownEngineByOptionsBuilder.html",
    "title": "Class MarkdownEngineByOptionsBuilder\r\n   | DocFX website ",
    "keywords": "Class MarkdownEngineByOptionsBuilder Inheritance Object MarkdownEngineBuilder MarkdownEngineByOptionsBuilder Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownEngineByOptionsBuilder : MarkdownEngineBuilder Constructors MarkdownEngineByOptionsBuilder(Options) Declaration public MarkdownEngineByOptionsBuilder(Options options) Parameters Type Name Description Options options"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownEngineBuilder.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownEngineBuilder.html",
    "title": "Class MarkdownEngineBuilder\r\n   | DocFX website ",
    "keywords": "Class MarkdownEngineBuilder A builder for create an instance of IMarkdownEngine Inheritance Object MarkdownEngineBuilder Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownEngineBuilder Constructors MarkdownEngineBuilder(Options) Declaration public MarkdownEngineBuilder(Options options) Parameters Type Name Description Options options Properties BlockRules The block rules. Declaration public ImmutableList<IMarkdownRule> BlockRules { get; set; } Proverty Value Type Description System.Collections.Immutable.ImmutableList < IMarkdownRule > InlineRules The inline rules. Declaration public ImmutableList<IMarkdownRule> InlineRules { get; set; } Proverty Value Type Description System.Collections.Immutable.ImmutableList < IMarkdownRule > Options The options. Declaration public Options Options { get; } Proverty Value Type Description Options Rewriter The markdown token rewriter. Declaration public IMarkdownTokenRewriter Rewriter { get; set; } Proverty Value Type Description IMarkdownTokenRewriter Methods CreateEngine(Object) Create an instance of IMarkdownEngine Declaration public virtual IMarkdownEngine CreateEngine(object renderer) Parameters Type Name Description Object renderer the renderer. Returns Type Description IMarkdownEngine an instance of IMarkdownEngine CreateParseContext() Create markdown paring context. Declaration protected virtual IMarkdownContext CreateParseContext() Returns Type Description IMarkdownContext a instance of IMarkdownContext"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownEngine.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownEngine.html",
    "title": "Class MarkdownEngine\r\n   | DocFX website ",
    "keywords": "Class MarkdownEngine Inheritance Object MarkdownEngine Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownEngine : IMarkdownEngine Constructors MarkdownEngine(IMarkdownContext, IMarkdownTokenRewriter, Object, Options) Declaration public MarkdownEngine(IMarkdownContext context, IMarkdownTokenRewriter rewriter, object renderer, Options options) Parameters Type Name Description IMarkdownContext context IMarkdownTokenRewriter rewriter Object renderer Options options MarkdownEngine(IMarkdownContext, IMarkdownTokenRewriter, Object, Options, Dictionary<String, LinkObj>) Declaration protected MarkdownEngine(IMarkdownContext context, IMarkdownTokenRewriter rewriter, object renderer, Options options, Dictionary<string, LinkObj> links) Parameters Type Name Description IMarkdownContext context IMarkdownTokenRewriter rewriter Object renderer Options options System.Collections.Generic.Dictionary < String , LinkObj > links MarkdownEngine(IMarkdownContext, Object, Options) Declaration public MarkdownEngine(IMarkdownContext context, object renderer, Options options) Parameters Type Name Description IMarkdownContext context Object renderer Options options Properties Context Declaration public IMarkdownContext Context { get; } Proverty Value Type Description IMarkdownContext Links Declaration public Dictionary<string, LinkObj> Links { get; } Proverty Value Type Description System.Collections.Generic.Dictionary < String , LinkObj > MaxExtractCount Declaration public int MaxExtractCount { get; set; } Proverty Value Type Description Int32 Options Declaration public Options Options { get; } Proverty Value Type Description Options Parser Declaration public virtual IMarkdownParser Parser { get; } Proverty Value Type Description IMarkdownParser Renderer Declaration public virtual IMarkdownRenderer Renderer { get; } Proverty Value Type Description IMarkdownRenderer RendererImpl Declaration public object RendererImpl { get; } Proverty Value Type Description Object RewriteEngine Declaration public virtual IMarkdownRewriteEngine RewriteEngine { get; } Proverty Value Type Description IMarkdownRewriteEngine Rewriter Declaration public IMarkdownTokenRewriter Rewriter { get; } Proverty Value Type Description IMarkdownTokenRewriter Methods Mark(String, IMarkdownContext) Declaration public StringBuffer Mark(string markdown, IMarkdownContext context) Parameters Type Name Description String markdown IMarkdownContext context Returns Type Description StringBuffer Markup(String) Declaration public string Markup(string markdown) Parameters Type Name Description String markdown Returns Type Description String Normalize(String) Declaration public static string Normalize(string markdown) Parameters Type Name Description String markdown Returns Type Description String Preprocess(String) Declaration protected virtual string Preprocess(string src) Parameters Type Name Description String src Returns Type Description String"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownEmInlineToken.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownEmInlineToken.html",
    "title": "Class MarkdownEmInlineToken\r\n   | DocFX website ",
    "keywords": "Class MarkdownEmInlineToken Inheritance Object MarkdownEmInlineToken Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownEmInlineToken : IMarkdownToken, IMarkdownRewritable<MarkdownEmInlineToken> Constructors MarkdownEmInlineToken(IMarkdownRule, IMarkdownContext, ImmutableArray<IMarkdownToken>, String) Declaration public MarkdownEmInlineToken(IMarkdownRule rule, IMarkdownContext context, ImmutableArray<IMarkdownToken> content, string rawMarkdown) Parameters Type Name Description IMarkdownRule rule IMarkdownContext context System.Collections.Immutable.ImmutableArray < IMarkdownToken > content String rawMarkdown Properties Content Declaration public ImmutableArray<IMarkdownToken> Content { get; } Proverty Value Type Description System.Collections.Immutable.ImmutableArray < IMarkdownToken > Context Declaration public IMarkdownContext Context { get; } Proverty Value Type Description IMarkdownContext RawMarkdown Declaration public string RawMarkdown { get; set; } Proverty Value Type Description String Rule Declaration public IMarkdownRule Rule { get; } Proverty Value Type Description IMarkdownRule Methods Rewrite(IMarkdownRewriteEngine) Declaration public MarkdownEmInlineToken Rewrite(IMarkdownRewriteEngine rewriterEngine) Parameters Type Name Description IMarkdownRewriteEngine rewriterEngine Returns Type Description MarkdownEmInlineToken"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownEmInlineRule.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownEmInlineRule.html",
    "title": "Class MarkdownEmInlineRule\r\n   | DocFX website ",
    "keywords": "Class MarkdownEmInlineRule Inheritance Object MarkdownEmInlineRule Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownEmInlineRule : IMarkdownRule Properties Em Declaration public virtual Regex Em { get; } Proverty Value Type Description Regex Name Declaration public string Name { get; } Proverty Value Type Description String Methods TryMatch(IMarkdownParser, ref String) Declaration public virtual IMarkdownToken TryMatch(IMarkdownParser engine, ref string source) Parameters Type Name Description IMarkdownParser engine String source Returns Type Description IMarkdownToken"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownDefBlockRule.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownDefBlockRule.html",
    "title": "Class MarkdownDefBlockRule\r\n   | DocFX website ",
    "keywords": "Class MarkdownDefBlockRule Inheritance Object MarkdownDefBlockRule Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownDefBlockRule : IMarkdownRule Properties Def Declaration public virtual Regex Def { get; } Proverty Value Type Description Regex Name Declaration public string Name { get; } Proverty Value Type Description String Methods TryMatch(IMarkdownParser, ref String) Declaration public virtual IMarkdownToken TryMatch(IMarkdownParser engine, ref string source) Parameters Type Name Description IMarkdownParser engine String source Returns Type Description IMarkdownToken"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownCommentInlineRule.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownCommentInlineRule.html",
    "title": "Class MarkdownCommentInlineRule\r\n   | DocFX website ",
    "keywords": "Class MarkdownCommentInlineRule Inheritance Object MarkdownCommentInlineRule Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownCommentInlineRule : IMarkdownRule Properties Comment Declaration public virtual Regex Comment { get; } Proverty Value Type Description Regex Name Declaration public string Name { get; } Proverty Value Type Description String Methods TryMatch(IMarkdownParser, ref String) Declaration public virtual IMarkdownToken TryMatch(IMarkdownParser engine, ref string source) Parameters Type Name Description IMarkdownParser engine String source Returns Type Description IMarkdownToken"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownCodeInlineToken.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownCodeInlineToken.html",
    "title": "Class MarkdownCodeInlineToken\r\n   | DocFX website ",
    "keywords": "Class MarkdownCodeInlineToken Inheritance Object MarkdownCodeInlineToken Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownCodeInlineToken : IMarkdownToken Constructors MarkdownCodeInlineToken(IMarkdownRule, IMarkdownContext, String, String) Declaration public MarkdownCodeInlineToken(IMarkdownRule rule, IMarkdownContext context, string content, string rawMarkdown) Parameters Type Name Description IMarkdownRule rule IMarkdownContext context String content String rawMarkdown Properties Content Declaration public string Content { get; } Proverty Value Type Description String Context Declaration public IMarkdownContext Context { get; } Proverty Value Type Description IMarkdownContext RawMarkdown Declaration public string RawMarkdown { get; set; } Proverty Value Type Description String Rule Declaration public IMarkdownRule Rule { get; } Proverty Value Type Description IMarkdownRule"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownCodeInlineRule.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownCodeInlineRule.html",
    "title": "Class MarkdownCodeInlineRule\r\n   | DocFX website ",
    "keywords": "Class MarkdownCodeInlineRule Inheritance Object MarkdownCodeInlineRule Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownCodeInlineRule : IMarkdownRule Properties Code Declaration public virtual Regex Code { get; } Proverty Value Type Description Regex Name Declaration public string Name { get; } Proverty Value Type Description String Methods TryMatch(IMarkdownParser, ref String) Declaration public virtual IMarkdownToken TryMatch(IMarkdownParser engine, ref string source) Parameters Type Name Description IMarkdownParser engine String source Returns Type Description IMarkdownToken"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownCodeBlockToken.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownCodeBlockToken.html",
    "title": "Class MarkdownCodeBlockToken\r\n   | DocFX website ",
    "keywords": "Class MarkdownCodeBlockToken Inheritance Object MarkdownCodeBlockToken Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownCodeBlockToken : IMarkdownToken Constructors MarkdownCodeBlockToken(IMarkdownRule, IMarkdownContext, String, String, String) Declaration public MarkdownCodeBlockToken(IMarkdownRule rule, IMarkdownContext context, string code, string rawMarkdown, string lang = null) Parameters Type Name Description IMarkdownRule rule IMarkdownContext context String code String rawMarkdown String lang Properties Code Declaration public string Code { get; } Proverty Value Type Description String Context Declaration public IMarkdownContext Context { get; } Proverty Value Type Description IMarkdownContext Lang Declaration public string Lang { get; } Proverty Value Type Description String RawMarkdown Declaration public string RawMarkdown { get; set; } Proverty Value Type Description String Rule Declaration public IMarkdownRule Rule { get; } Proverty Value Type Description IMarkdownRule"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownCodeBlockRule.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownCodeBlockRule.html",
    "title": "Class MarkdownCodeBlockRule\r\n   | DocFX website ",
    "keywords": "Class MarkdownCodeBlockRule Inheritance Object MarkdownCodeBlockRule Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownCodeBlockRule : IMarkdownRule Properties Code Declaration public virtual Regex Code { get; } Proverty Value Type Description Regex Name Declaration public string Name { get; } Proverty Value Type Description String Methods TryMatch(IMarkdownParser, ref String) Declaration public virtual IMarkdownToken TryMatch(IMarkdownParser engine, ref string source) Parameters Type Name Description IMarkdownParser engine String source Returns Type Description IMarkdownToken"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownTagInlineToken.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownTagInlineToken.html",
    "title": "Class MarkdownTagInlineToken\r\n   | DocFX website ",
    "keywords": "Class MarkdownTagInlineToken Inheritance Object MarkdownTagInlineToken Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownTagInlineToken : IMarkdownToken Constructors MarkdownTagInlineToken(IMarkdownRule, IMarkdownContext, String) Declaration public MarkdownTagInlineToken(IMarkdownRule rule, IMarkdownContext context, string rawMarkdown) Parameters Type Name Description IMarkdownRule rule IMarkdownContext context String rawMarkdown Properties Context Declaration public IMarkdownContext Context { get; } Proverty Value Type Description IMarkdownContext RawMarkdown Declaration public string RawMarkdown { get; set; } Proverty Value Type Description String Rule Declaration public IMarkdownRule Rule { get; } Proverty Value Type Description IMarkdownRule"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownTagInlineRule.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownTagInlineRule.html",
    "title": "Class MarkdownTagInlineRule\r\n   | DocFX website ",
    "keywords": "Class MarkdownTagInlineRule Inheritance Object MarkdownTagInlineRule Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownTagInlineRule : IMarkdownRule Properties Name Declaration public string Name { get; } Proverty Value Type Description String Tag Declaration public virtual Regex Tag { get; } Proverty Value Type Description Regex Methods TryMatch(IMarkdownParser, ref String) Declaration public virtual IMarkdownToken TryMatch(IMarkdownParser engine, ref string source) Parameters Type Name Description IMarkdownParser engine String source Returns Type Description IMarkdownToken"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownTableBlockToken.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownTableBlockToken.html",
    "title": "Class MarkdownTableBlockToken\r\n   | DocFX website ",
    "keywords": "Class MarkdownTableBlockToken Inheritance Object MarkdownTableBlockToken Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownTableBlockToken : IMarkdownToken, IMarkdownRewritable<MarkdownTableBlockToken> Constructors MarkdownTableBlockToken(IMarkdownRule, IMarkdownContext, ImmutableArray<InlineContent>, ImmutableArray<Align>, ImmutableArray<ImmutableArray<InlineContent>>) Declaration public MarkdownTableBlockToken(IMarkdownRule rule, IMarkdownContext context, ImmutableArray<InlineContent> header, ImmutableArray<Align> align, ImmutableArray<ImmutableArray<InlineContent>> cells) Parameters Type Name Description IMarkdownRule rule IMarkdownContext context System.Collections.Immutable.ImmutableArray < InlineContent > header System.Collections.Immutable.ImmutableArray < Align > align System.Collections.Immutable.ImmutableArray < System.Collections.Immutable.ImmutableArray < InlineContent >> cells Properties Align Declaration public ImmutableArray<Align> Align { get; } Proverty Value Type Description System.Collections.Immutable.ImmutableArray < Align > Cells Declaration public ImmutableArray<ImmutableArray<InlineContent>> Cells { get; } Proverty Value Type Description System.Collections.Immutable.ImmutableArray < System.Collections.Immutable.ImmutableArray < InlineContent >> Context Declaration public IMarkdownContext Context { get; } Proverty Value Type Description IMarkdownContext Header Declaration public ImmutableArray<InlineContent> Header { get; } Proverty Value Type Description System.Collections.Immutable.ImmutableArray < InlineContent > RawMarkdown Declaration public string RawMarkdown { get; set; } Proverty Value Type Description String Rule Declaration public IMarkdownRule Rule { get; } Proverty Value Type Description IMarkdownRule Methods Rewrite(IMarkdownRewriteEngine) Declaration public MarkdownTableBlockToken Rewrite(IMarkdownRewriteEngine rewriterEngine) Parameters Type Name Description IMarkdownRewriteEngine rewriterEngine Returns Type Description MarkdownTableBlockToken"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownTableBlockRule.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownTableBlockRule.html",
    "title": "Class MarkdownTableBlockRule\r\n   | DocFX website ",
    "keywords": "Class MarkdownTableBlockRule Inheritance Object MarkdownTableBlockRule Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownTableBlockRule : IMarkdownRule Properties Name Declaration public string Name { get; } Proverty Value Type Description String Table Declaration public virtual Regex Table { get; } Proverty Value Type Description Regex Methods ParseAligns(String[]) Declaration protected virtual Align[] ParseAligns(string[] aligns) Parameters Type Name Description String [] aligns Returns Type Description Align [] TryMatch(IMarkdownParser, ref String) Declaration public virtual IMarkdownToken TryMatch(IMarkdownParser engine, ref string source) Parameters Type Name Description IMarkdownParser engine String source Returns Type Description IMarkdownToken"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownStrongInlineToken.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownStrongInlineToken.html",
    "title": "Class MarkdownStrongInlineToken\r\n   | DocFX website ",
    "keywords": "Class MarkdownStrongInlineToken Inheritance Object MarkdownStrongInlineToken Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownStrongInlineToken : IMarkdownToken, IMarkdownRewritable<MarkdownStrongInlineToken> Constructors MarkdownStrongInlineToken(IMarkdownRule, IMarkdownContext, ImmutableArray<IMarkdownToken>, String) Declaration public MarkdownStrongInlineToken(IMarkdownRule rule, IMarkdownContext context, ImmutableArray<IMarkdownToken> content, string rawMarkdown) Parameters Type Name Description IMarkdownRule rule IMarkdownContext context System.Collections.Immutable.ImmutableArray < IMarkdownToken > content String rawMarkdown Properties Content Declaration public ImmutableArray<IMarkdownToken> Content { get; } Proverty Value Type Description System.Collections.Immutable.ImmutableArray < IMarkdownToken > Context Declaration public IMarkdownContext Context { get; } Proverty Value Type Description IMarkdownContext RawMarkdown Declaration public string RawMarkdown { get; set; } Proverty Value Type Description String Rule Declaration public IMarkdownRule Rule { get; } Proverty Value Type Description IMarkdownRule Methods Rewrite(IMarkdownRewriteEngine) Declaration public MarkdownStrongInlineToken Rewrite(IMarkdownRewriteEngine rewriterEngine) Parameters Type Name Description IMarkdownRewriteEngine rewriterEngine Returns Type Description MarkdownStrongInlineToken"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownStrongInlineRule.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownStrongInlineRule.html",
    "title": "Class MarkdownStrongInlineRule\r\n   | DocFX website ",
    "keywords": "Class MarkdownStrongInlineRule Inheritance Object MarkdownStrongInlineRule Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownStrongInlineRule : IMarkdownRule Properties Name Declaration public string Name { get; } Proverty Value Type Description String Strong Declaration public virtual Regex Strong { get; } Proverty Value Type Description Regex Methods TryMatch(IMarkdownParser, ref String) Declaration public virtual IMarkdownToken TryMatch(IMarkdownParser engine, ref string source) Parameters Type Name Description IMarkdownParser engine String source Returns Type Description IMarkdownToken"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownRewriteEngine.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownRewriteEngine.html",
    "title": "Class MarkdownRewriteEngine\r\n   | DocFX website ",
    "keywords": "Class MarkdownRewriteEngine Inheritance Object MarkdownRewriteEngine Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownRewriteEngine : IMarkdownRewriteEngine Constructors MarkdownRewriteEngine(IMarkdownEngine, IMarkdownTokenRewriter) Declaration public MarkdownRewriteEngine(IMarkdownEngine engine, IMarkdownTokenRewriter rewriter) Parameters Type Name Description IMarkdownEngine engine IMarkdownTokenRewriter rewriter Properties Engine Declaration public IMarkdownEngine Engine { get; } Proverty Value Type Description IMarkdownEngine Methods Rewrite(ImmutableArray<IMarkdownToken>) Declaration public virtual ImmutableArray<IMarkdownToken> Rewrite(ImmutableArray<IMarkdownToken> tokens) Parameters Type Name Description System.Collections.Immutable.ImmutableArray < IMarkdownToken > tokens Returns Type Description System.Collections.Immutable.ImmutableArray < IMarkdownToken >"
  },
  "api/Microsoft.DocAsCode.YamlSerialization.TypeInspectors.EmitTypeInspector.html": {
    "href": "api/Microsoft.DocAsCode.YamlSerialization.TypeInspectors.EmitTypeInspector.html",
    "title": "Class EmitTypeInspector\r\n   | DocFX website ",
    "keywords": "Class EmitTypeInspector Inheritance Object ExtensibleTypeInspectorSkeleton EmitTypeInspector Namespace :Microsoft.DocAsCode.YamlSerialization.TypeInspectors Assembly :Microsoft.DocAsCode.YamlSerialization.dll Syntax public class EmitTypeInspector : ExtensibleTypeInspectorSkeleton, IExtensibleTypeInspector, ITypeInspector Constructors EmitTypeInspector(ITypeResolver) Declaration public EmitTypeInspector(ITypeResolver resolver) Parameters Type Name Description YamlDotNet.Serialization.ITypeResolver resolver Methods GetProperties(Type, Object) Declaration public override IEnumerable<IPropertyDescriptor> GetProperties(Type type, object container) Parameters Type Name Description Type type Object container Returns Type Description System.Collections.Generic.IEnumerable < YamlDotNet.Serialization.IPropertyDescriptor > GetProperty(Type, Object, String) Declaration public override IPropertyDescriptor GetProperty(Type type, object container, string name) Parameters Type Name Description Type type Object container String name Returns Type Description YamlDotNet.Serialization.IPropertyDescriptor"
  },
  "api/Microsoft.DocAsCode.YamlSerialization.ObjectGraphTraversalStrategies.html": {
    "href": "api/Microsoft.DocAsCode.YamlSerialization.ObjectGraphTraversalStrategies.html",
    "title": "Namespace Microsoft.DocAsCode.YamlSerialization.ObjectGraphTraversalStrategies\r\n   | DocFX website ",
    "keywords": "Namespace Microsoft.DocAsCode.YamlSerialization.ObjectGraphTraversalStrategies Classes FullObjectGraphTraversalStrategy An implementation of YamlDotNet.Serialization.IObjectGraphTraversalStrategy that traverses readable properties, collections and dictionaries. RoundtripObjectGraphTraversalStrategy An implementation of YamlDotNet.Serialization.IObjectGraphTraversalStrategy that traverses properties that are read/write, collections and dictionaries, while ensuring that the graph can be regenerated from the resulting document."
  },
  "api/Microsoft.DocAsCode.YamlSerialization.ObjectGraphTraversalStrategies.RoundtripObjectGraphTraversalStrategy.html": {
    "href": "api/Microsoft.DocAsCode.YamlSerialization.ObjectGraphTraversalStrategies.RoundtripObjectGraphTraversalStrategy.html",
    "title": "Class RoundtripObjectGraphTraversalStrategy\r\n   | DocFX website ",
    "keywords": "Class RoundtripObjectGraphTraversalStrategy An implementation of YamlDotNet.Serialization.IObjectGraphTraversalStrategy that traverses properties that are read/write, collections and dictionaries, while ensuring that the graph can be regenerated from the resulting document. Inheritance Object FullObjectGraphTraversalStrategy RoundtripObjectGraphTraversalStrategy Namespace :Microsoft.DocAsCode.YamlSerialization.ObjectGraphTraversalStrategies Assembly :Microsoft.DocAsCode.YamlSerialization.dll Syntax public class RoundtripObjectGraphTraversalStrategy : FullObjectGraphTraversalStrategy, IObjectGraphTraversalStrategy Constructors RoundtripObjectGraphTraversalStrategy(YamlSerializer, ITypeInspector, ITypeResolver, Int32) Declaration public RoundtripObjectGraphTraversalStrategy(YamlSerializer serializer, ITypeInspector typeDescriptor, ITypeResolver typeResolver, int maxRecursion) Parameters Type Name Description YamlSerializer serializer YamlDotNet.Serialization.ITypeInspector typeDescriptor YamlDotNet.Serialization.ITypeResolver typeResolver Int32 maxRecursion Methods TraverseProperties(IObjectDescriptor, IObjectGraphVisitor, Int32) Declaration protected override void TraverseProperties(IObjectDescriptor value, IObjectGraphVisitor visitor, int currentDepth) Parameters Type Name Description YamlDotNet.Serialization.IObjectDescriptor value YamlDotNet.Serialization.IObjectGraphVisitor visitor Int32 currentDepth"
  },
  "api/Microsoft.DocAsCode.YamlSerialization.ObjectGraphTraversalStrategies.FullObjectGraphTraversalStrategy.html": {
    "href": "api/Microsoft.DocAsCode.YamlSerialization.ObjectGraphTraversalStrategies.FullObjectGraphTraversalStrategy.html",
    "title": "Class FullObjectGraphTraversalStrategy\r\n   | DocFX website ",
    "keywords": "Class FullObjectGraphTraversalStrategy An implementation of YamlDotNet.Serialization.IObjectGraphTraversalStrategy that traverses readable properties, collections and dictionaries. Inheritance Object FullObjectGraphTraversalStrategy Namespace :Microsoft.DocAsCode.YamlSerialization.ObjectGraphTraversalStrategies Assembly :Microsoft.DocAsCode.YamlSerialization.dll Syntax public class FullObjectGraphTraversalStrategy : IObjectGraphTraversalStrategy Constructors FullObjectGraphTraversalStrategy(YamlSerializer, ITypeInspector, ITypeResolver, Int32, INamingConvention) Declaration public FullObjectGraphTraversalStrategy(YamlSerializer serializer, ITypeInspector typeDescriptor, ITypeResolver typeResolver, int maxRecursion, INamingConvention namingConvention) Parameters Type Name Description YamlSerializer serializer YamlDotNet.Serialization.ITypeInspector typeDescriptor YamlDotNet.Serialization.ITypeResolver typeResolver Int32 maxRecursion YamlDotNet.Serialization.INamingConvention namingConvention Properties Serializer Declaration protected YamlSerializer Serializer { get; } Proverty Value Type Description YamlSerializer Methods Traverse(IObjectDescriptor, IObjectGraphVisitor, Int32) Declaration protected virtual void Traverse(IObjectDescriptor value, IObjectGraphVisitor visitor, int currentDepth) Parameters Type Name Description YamlDotNet.Serialization.IObjectDescriptor value YamlDotNet.Serialization.IObjectGraphVisitor visitor Int32 currentDepth TraverseDictionary(IObjectDescriptor, IObjectGraphVisitor, Int32) Declaration protected virtual void TraverseDictionary(IObjectDescriptor dictionary, IObjectGraphVisitor visitor, int currentDepth) Parameters Type Name Description YamlDotNet.Serialization.IObjectDescriptor dictionary YamlDotNet.Serialization.IObjectGraphVisitor visitor Int32 currentDepth TraverseGenericDictionaryHelper<TKey, TValue>(FullObjectGraphTraversalStrategy, IDictionary<TKey, TValue>, IObjectGraphVisitor, Int32, INamingConvention) Declaration [EditorBrowsable(EditorBrowsableState.Never)] public static void TraverseGenericDictionaryHelper<TKey, TValue>(FullObjectGraphTraversalStrategy self, IDictionary<TKey, TValue> dictionary, IObjectGraphVisitor visitor, int currentDepth, INamingConvention namingConvention) Parameters Type Name Description FullObjectGraphTraversalStrategy self System.Collections.Generic.IDictionary <TKey, TValue> dictionary YamlDotNet.Serialization.IObjectGraphVisitor visitor Int32 currentDepth YamlDotNet.Serialization.INamingConvention namingConvention TraverseObject(IObjectDescriptor, IObjectGraphVisitor, Int32) Declaration protected virtual void TraverseObject(IObjectDescriptor value, IObjectGraphVisitor visitor, int currentDepth) Parameters Type Name Description YamlDotNet.Serialization.IObjectDescriptor value YamlDotNet.Serialization.IObjectGraphVisitor visitor Int32 currentDepth TraverseProperties(IObjectDescriptor, IObjectGraphVisitor, Int32) Declaration protected virtual void TraverseProperties(IObjectDescriptor value, IObjectGraphVisitor visitor, int currentDepth) Parameters Type Name Description YamlDotNet.Serialization.IObjectDescriptor value YamlDotNet.Serialization.IObjectGraphVisitor visitor Int32 currentDepth IObjectGraphTraversalStrategy.Traverse(IObjectDescriptor, IObjectGraphVisitor) Declaration void IObjectGraphTraversalStrategy.Traverse(IObjectDescriptor graph, IObjectGraphVisitor visitor) Parameters Type Name Description YamlDotNet.Serialization.IObjectDescriptor graph YamlDotNet.Serialization.IObjectGraphVisitor visitor"
  },
  "api/Microsoft.DocAsCode.YamlSerialization.ObjectFactories.html": {
    "href": "api/Microsoft.DocAsCode.YamlSerialization.ObjectFactories.html",
    "title": "Namespace Microsoft.DocAsCode.YamlSerialization.ObjectFactories\r\n   | DocFX website ",
    "keywords": "Namespace Microsoft.DocAsCode.YamlSerialization.ObjectFactories Classes DefaultEmitObjectFactory"
  },
  "api/Microsoft.DocAsCode.YamlSerialization.ObjectFactories.DefaultEmitObjectFactory.html": {
    "href": "api/Microsoft.DocAsCode.YamlSerialization.ObjectFactories.DefaultEmitObjectFactory.html",
    "title": "Class DefaultEmitObjectFactory\r\n   | DocFX website ",
    "keywords": "Class DefaultEmitObjectFactory Inheritance Object DefaultEmitObjectFactory Namespace :Microsoft.DocAsCode.YamlSerialization.ObjectFactories Assembly :Microsoft.DocAsCode.YamlSerialization.dll Syntax public class DefaultEmitObjectFactory : IObjectFactory Methods Create(Type) Declaration public object Create(Type type) Parameters Type Name Description Type type Returns Type Description Object"
  },
  "api/Microsoft.DocAsCode.YamlSerialization.ObjectDescriptors.html": {
    "href": "api/Microsoft.DocAsCode.YamlSerialization.ObjectDescriptors.html",
    "title": "Namespace Microsoft.DocAsCode.YamlSerialization.ObjectDescriptors\r\n   | DocFX website ",
    "keywords": "Namespace Microsoft.DocAsCode.YamlSerialization.ObjectDescriptors Classes BetterObjectDescriptor"
  },
  "api/Microsoft.DocAsCode.YamlSerialization.ObjectDescriptors.BetterObjectDescriptor.html": {
    "href": "api/Microsoft.DocAsCode.YamlSerialization.ObjectDescriptors.BetterObjectDescriptor.html",
    "title": "Class BetterObjectDescriptor\r\n   | DocFX website ",
    "keywords": "Class BetterObjectDescriptor Inheritance Object BetterObjectDescriptor Namespace :Microsoft.DocAsCode.YamlSerialization.ObjectDescriptors Assembly :Microsoft.DocAsCode.YamlSerialization.dll Syntax public class BetterObjectDescriptor : IObjectDescriptor Constructors BetterObjectDescriptor(Object, Type, Type) Declaration public BetterObjectDescriptor(object value, Type type, Type staticType) Parameters Type Name Description Object value Type type Type staticType BetterObjectDescriptor(Object, Type, Type, ScalarStyle) Declaration public BetterObjectDescriptor(object value, Type type, Type staticType, ScalarStyle scalarStyle) Parameters Type Name Description Object value Type type Type staticType YamlDotNet.Core.ScalarStyle scalarStyle Properties ScalarStyle Declaration public ScalarStyle ScalarStyle { get; } Proverty Value Type Description YamlDotNet.Core.ScalarStyle StaticType Declaration public Type StaticType { get; } Proverty Value Type Description Type Type Declaration public Type Type { get; } Proverty Value Type Description Type Value Declaration public object Value { get; } Proverty Value Type Description Object"
  },
  "api/Microsoft.DocAsCode.YamlSerialization.NodeDeserializers.html": {
    "href": "api/Microsoft.DocAsCode.YamlSerialization.NodeDeserializers.html",
    "title": "Namespace Microsoft.DocAsCode.YamlSerialization.NodeDeserializers\r\n   | DocFX website ",
    "keywords": "Namespace Microsoft.DocAsCode.YamlSerialization.NodeDeserializers Classes EmitArrayNodeDeserializer EmitGenericCollectionNodeDeserializer EmitGenericDictionaryNodeDeserializer ExtensibleObjectNodeDeserializer"
  },
  "api/Microsoft.DocAsCode.YamlSerialization.NodeDeserializers.ExtensibleObjectNodeDeserializer.html": {
    "href": "api/Microsoft.DocAsCode.YamlSerialization.NodeDeserializers.ExtensibleObjectNodeDeserializer.html",
    "title": "Class ExtensibleObjectNodeDeserializer\r\n   | DocFX website ",
    "keywords": "Class ExtensibleObjectNodeDeserializer Inheritance Object ExtensibleObjectNodeDeserializer Namespace :Microsoft.DocAsCode.YamlSerialization.NodeDeserializers Assembly :Microsoft.DocAsCode.YamlSerialization.dll Syntax public sealed class ExtensibleObjectNodeDeserializer : INodeDeserializer Constructors ExtensibleObjectNodeDeserializer(IObjectFactory, ITypeInspector, Boolean) Declaration public ExtensibleObjectNodeDeserializer(IObjectFactory objectFactory, ITypeInspector typeDescriptor, bool ignoreUnmatched) Parameters Type Name Description YamlDotNet.Serialization.IObjectFactory objectFactory YamlDotNet.Serialization.ITypeInspector typeDescriptor Boolean ignoreUnmatched Methods INodeDeserializer.Deserialize(EventReader, Type, Func<EventReader, Type, Object>, out Object) Declaration bool INodeDeserializer.Deserialize(EventReader reader, Type expectedType, Func<EventReader, Type, object> nestedObjectDeserializer, out object value) Parameters Type Name Description YamlDotNet.Core.EventReader reader Type expectedType System.Func < YamlDotNet.Core.EventReader , Type , Object > nestedObjectDeserializer Object value Returns Type Description Boolean"
  },
  "api/Microsoft.DocAsCode.YamlSerialization.NodeDeserializers.EmitGenericDictionaryNodeDeserializer.html": {
    "href": "api/Microsoft.DocAsCode.YamlSerialization.NodeDeserializers.EmitGenericDictionaryNodeDeserializer.html",
    "title": "Class EmitGenericDictionaryNodeDeserializer\r\n   | DocFX website ",
    "keywords": "Class EmitGenericDictionaryNodeDeserializer Inheritance Object EmitGenericDictionaryNodeDeserializer Namespace :Microsoft.DocAsCode.YamlSerialization.NodeDeserializers Assembly :Microsoft.DocAsCode.YamlSerialization.dll Syntax public class EmitGenericDictionaryNodeDeserializer : INodeDeserializer Constructors EmitGenericDictionaryNodeDeserializer(IObjectFactory) Declaration public EmitGenericDictionaryNodeDeserializer(IObjectFactory objectFactory) Parameters Type Name Description YamlDotNet.Serialization.IObjectFactory objectFactory Methods DeserializeHelper<TKey, TValue>(EventReader, Type, Func<EventReader, Type, Object>, IDictionary<TKey, TValue>) Declaration [EditorBrowsable(EditorBrowsableState.Never)] public static void DeserializeHelper<TKey, TValue>(EventReader reader, Type expectedType, Func<EventReader, Type, object> nestedObjectDeserializer, IDictionary<TKey, TValue> result) Parameters Type Name Description YamlDotNet.Core.EventReader reader Type expectedType System.Func < YamlDotNet.Core.EventReader , Type , Object > nestedObjectDeserializer System.Collections.Generic.IDictionary <TKey, TValue> result INodeDeserializer.Deserialize(EventReader, Type, Func<EventReader, Type, Object>, out Object) Declaration bool INodeDeserializer.Deserialize(EventReader reader, Type expectedType, Func<EventReader, Type, object> nestedObjectDeserializer, out object value) Parameters Type Name Description YamlDotNet.Core.EventReader reader Type expectedType System.Func < YamlDotNet.Core.EventReader , Type , Object > nestedObjectDeserializer Object value Returns Type Description Boolean"
  },
  "api/Microsoft.DocAsCode.YamlSerialization.NodeDeserializers.EmitGenericCollectionNodeDeserializer.html": {
    "href": "api/Microsoft.DocAsCode.YamlSerialization.NodeDeserializers.EmitGenericCollectionNodeDeserializer.html",
    "title": "Class EmitGenericCollectionNodeDeserializer\r\n   | DocFX website ",
    "keywords": "Class EmitGenericCollectionNodeDeserializer Inheritance Object EmitGenericCollectionNodeDeserializer Namespace :Microsoft.DocAsCode.YamlSerialization.NodeDeserializers Assembly :Microsoft.DocAsCode.YamlSerialization.dll Syntax public class EmitGenericCollectionNodeDeserializer : INodeDeserializer Constructors EmitGenericCollectionNodeDeserializer(IObjectFactory) Declaration public EmitGenericCollectionNodeDeserializer(IObjectFactory objectFactory) Parameters Type Name Description YamlDotNet.Serialization.IObjectFactory objectFactory Methods DeserializeHelper<TItem>(EventReader, Type, Func<EventReader, Type, Object>, ICollection<TItem>) Declaration [EditorBrowsable(EditorBrowsableState.Never)] public static void DeserializeHelper<TItem>(EventReader reader, Type expectedType, Func<EventReader, Type, object> nestedObjectDeserializer, ICollection<TItem> result) Parameters Type Name Description YamlDotNet.Core.EventReader reader Type expectedType System.Func < YamlDotNet.Core.EventReader , Type , Object > nestedObjectDeserializer System.Collections.Generic.ICollection <TItem> result INodeDeserializer.Deserialize(EventReader, Type, Func<EventReader, Type, Object>, out Object) Declaration bool INodeDeserializer.Deserialize(EventReader reader, Type expectedType, Func<EventReader, Type, object> nestedObjectDeserializer, out object value) Parameters Type Name Description YamlDotNet.Core.EventReader reader Type expectedType System.Func < YamlDotNet.Core.EventReader , Type , Object > nestedObjectDeserializer Object value Returns Type Description Boolean"
  },
  "api/Microsoft.DocAsCode.YamlSerialization.NodeDeserializers.EmitArrayNodeDeserializer.html": {
    "href": "api/Microsoft.DocAsCode.YamlSerialization.NodeDeserializers.EmitArrayNodeDeserializer.html",
    "title": "Class EmitArrayNodeDeserializer\r\n   | DocFX website ",
    "keywords": "Class EmitArrayNodeDeserializer Inheritance Object EmitArrayNodeDeserializer Namespace :Microsoft.DocAsCode.YamlSerialization.NodeDeserializers Assembly :Microsoft.DocAsCode.YamlSerialization.dll Syntax public class EmitArrayNodeDeserializer : INodeDeserializer Methods DeserializeHelper<TItem>(EventReader, Type, Func<EventReader, Type, Object>) Declaration [EditorBrowsable(EditorBrowsableState.Never)] public static TItem[] DeserializeHelper<TItem>(EventReader reader, Type expectedType, Func<EventReader, Type, object> nestedObjectDeserializer) Parameters Type Name Description YamlDotNet.Core.EventReader reader Type expectedType System.Func < YamlDotNet.Core.EventReader , Type , Object > nestedObjectDeserializer Returns Type Description TItem[] INodeDeserializer.Deserialize(EventReader, Type, Func<EventReader, Type, Object>, out Object) Declaration bool INodeDeserializer.Deserialize(EventReader reader, Type expectedType, Func<EventReader, Type, object> nestedObjectDeserializer, out object value) Parameters Type Name Description YamlDotNet.Core.EventReader reader Type expectedType System.Func < YamlDotNet.Core.EventReader , Type , Object > nestedObjectDeserializer Object value Returns Type Description Boolean"
  },
  "api/Microsoft.DocAsCode.YamlSerialization.ExtensibleMemberAttribute.html": {
    "href": "api/Microsoft.DocAsCode.YamlSerialization.ExtensibleMemberAttribute.html",
    "title": "Class ExtensibleMemberAttribute\r\n   | DocFX website ",
    "keywords": "Class ExtensibleMemberAttribute Inheritance Object Attribute ExtensibleMemberAttribute Namespace :Microsoft.DocAsCode.YamlSerialization Assembly :Microsoft.DocAsCode.YamlSerialization.dll Syntax public sealed class ExtensibleMemberAttribute : Attribute, _Attribute Constructors ExtensibleMemberAttribute() Declaration public ExtensibleMemberAttribute() ExtensibleMemberAttribute(String) Declaration public ExtensibleMemberAttribute(string prefix) Parameters Type Name Description String prefix Properties Prefix Declaration public string Prefix { get; } Proverty Value Type Description String"
  },
  "api/Microsoft.DocAsCode.Utility.html": {
    "href": "api/Microsoft.DocAsCode.Utility.html",
    "title": "Namespace Microsoft.DocAsCode.Utility\r\n   | DocFX website ",
    "keywords": "Namespace Microsoft.DocAsCode.Utility Classes AsyncConcurrentCache <TKey, TValue> An asynchronous wrapper over concurrent dictionary CollectionExtensions ConsoleUtility ConvertToObjectHelper FilePathComparer GitDetail GitUtility JObjectDictionaryToObjectDictionaryConverter LruList <T> PathUtility ProcessDetail ProcessUtility RelativePath relative path StringExtension TaskHelper"
  },
  "api/Microsoft.DocAsCode.Utility.TaskHelper.html": {
    "href": "api/Microsoft.DocAsCode.Utility.TaskHelper.html",
    "title": "Class TaskHelper\r\n   | DocFX website ",
    "keywords": "Class TaskHelper Inheritance Object TaskHelper Namespace :Microsoft.DocAsCode.Utility Assembly :Microsoft.DocAsCode.Utility.dll Syntax public class TaskHelper Fields Completed A completed task Declaration public static readonly Task Completed Methods ForEachInParallelAsync<T>(IEnumerable<T>, Func<T, Task>) Provide parallel version for ForEach Remarks The max parallelism is 64. Declaration public static Task ForEachInParallelAsync<T>(IEnumerable<T> source, Func<T, Task> body) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The enumerable to control the foreach loop System.Func <T, Task > body The task body Returns Type Description Task The task ForEachInParallelAsync<T>(IEnumerable<T>, Func<T, Task>, Int32) Provide parallel version for ForEach Declaration public static Task ForEachInParallelAsync<T>(IEnumerable<T> source, Func<T, Task> body, int maxParallelism) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The enumerable to control the foreach loop System.Func <T, Task > body The task body Int32 maxParallelism The max parallelism allowed Returns Type Description Task The task SelectInParallelAsync<TSource, TResult>(IEnumerable<TSource>, Func<TSource, Task<TResult>>) Provide parallel version for Select that each element will map to a result Remarks The max parallelism is 64. Declaration public static Task<IReadOnlyList<TResult>> SelectInParallelAsync<TSource, TResult>(IEnumerable<TSource> source, Func<TSource, Task<TResult>> body) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The enumerable to control the select System.Func <TSource, System.Threading.Tasks.Task <TResult>> body The select body Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IReadOnlyList <TResult>> The task SelectInParallelAsync<TSource, TResult>(IEnumerable<TSource>, Func<TSource, Task<TResult>>, Int32) Provide parallel version for Select that each element will map to a result Declaration public static Task<IReadOnlyList<TResult>> SelectInParallelAsync<TSource, TResult>(IEnumerable<TSource> source, Func<TSource, Task<TResult>> body, int maxParallelism) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The enumerable to control the select System.Func <TSource, System.Threading.Tasks.Task <TResult>> body The select body Int32 maxParallelism The max parallelism allowed Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IReadOnlyList <TResult>> The task"
  },
  "api/Microsoft.DocAsCode.Utility.StringExtension.html": {
    "href": "api/Microsoft.DocAsCode.Utility.StringExtension.html",
    "title": "Class StringExtension\r\n   | DocFX website ",
    "keywords": "Class StringExtension Inheritance Object StringExtension Namespace :Microsoft.DocAsCode.Utility Assembly :Microsoft.DocAsCode.Utility.dll Syntax public class StringExtension Methods BackSlashToForwardSlash(String) Declaration public static string BackSlashToForwardSlash(string input) Parameters Type Name Description String input Returns Type Description String CoalesceNullOrEmpty(String, String) Declaration public static string CoalesceNullOrEmpty(string value, string defaultValue) Parameters Type Name Description String value String defaultValue Returns Type Description String ForwardSlashCombine(String, String) Declaration public static string ForwardSlashCombine(string baseAddress, string relativeAddress) Parameters Type Name Description String baseAddress String relativeAddress Returns Type Description String GetNormalizedFullPathKey(IEnumerable<String>) Declaration public static string GetNormalizedFullPathKey(IEnumerable<string> list) Parameters Type Name Description System.Collections.Generic.IEnumerable < String > list Returns Type Description String GetNormalizedFullPathList(IEnumerable<String>) Declaration public static IEnumerable<string> GetNormalizedFullPathList(IEnumerable<string> paths) Parameters Type Name Description System.Collections.Generic.IEnumerable < String > paths Returns Type Description System.Collections.Generic.IEnumerable < String > GetNormalizedPathList(IEnumerable<String>) Declaration public static IEnumerable<string> GetNormalizedPathList(IEnumerable<string> paths) Parameters Type Name Description System.Collections.Generic.IEnumerable < String > paths Returns Type Description System.Collections.Generic.IEnumerable < String > ToArray(String, StringSplitOptions, Char[]) Declaration public static string[] ToArray(string input, StringSplitOptions option, params char[] delimiter) Parameters Type Name Description String input StringSplitOptions option System.Char [] delimiter Returns Type Description String [] ToDelimitedString(IEnumerable<String>, String) Declaration public static string ToDelimitedString(IEnumerable<string> input, string delimiter = \",\") Parameters Type Name Description System.Collections.Generic.IEnumerable < String > input String delimiter Returns Type Description String ToDisplayPath(String) Declaration public static string ToDisplayPath(string path) Parameters Type Name Description String path Returns Type Description String ToNormalizedFullPath(String) Should not convert path to lower case as under Linux/Unix, path is case sensitive Also, Website URL should be case sensitive consider the server might be running under Linux/Unix So we could even not lower the path under Windows as the generated YAML should be ideally OS irrelevant Declaration public static string ToNormalizedFullPath(string path) Parameters Type Name Description String path Returns Type Description String ToNormalizedPath(String) Declaration public static string ToNormalizedPath(string path) Parameters Type Name Description String path Returns Type Description String"
  },
  "api/Microsoft.DocAsCode.Utility.RelativePath.html": {
    "href": "api/Microsoft.DocAsCode.Utility.RelativePath.html",
    "title": "Class RelativePath\r\n   | DocFX website ",
    "keywords": "Class RelativePath relative path Inheritance Object RelativePath Namespace :Microsoft.DocAsCode.Utility Assembly :Microsoft.DocAsCode.Utility.dll Syntax public sealed class RelativePath : IEquatable<RelativePath> Fields Empty Declaration public static readonly RelativePath Empty WorkingFolder Declaration public static readonly RelativePath WorkingFolder Properties FileName Declaration public string FileName { get; } Proverty Value Type Description String IsEmpty Declaration public bool IsEmpty { get; } Proverty Value Type Description Boolean ParentDirectoryCount Declaration public int ParentDirectoryCount { get; } Proverty Value Type Description Int32 SubdirectoryCount Declaration public int SubdirectoryCount { get; } Proverty Value Type Description Int32 Methods BasedOn(RelativePath) Concat two relative path e.g.: {d/e.txt}.BasedOn({a/b/c/}) = {a/b/c/d/e.txt} {../d/e.txt}.BasedOn({a/b/c/}) = {a/b/d/e.txt} {d/e.txt}.BasedOn({a/b/c.txt}) = {a/b/d/e.txt} {../e.txt}.BasedOn({a/b/c.txt}) = {a/e.txt} {../e.txt}.BasedOn({../c.txt}) = {../../e.txt} Declaration public RelativePath BasedOn(RelativePath path) Parameters Type Name Description RelativePath path Returns Type Description RelativePath ChangeFileName(String) Declaration public RelativePath ChangeFileName(string fileName) Parameters Type Name Description String fileName Returns Type Description RelativePath Equals(RelativePath) Declaration public bool Equals(RelativePath other) Parameters Type Name Description RelativePath other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean GetDirectoryPath() Declaration public RelativePath GetDirectoryPath() Returns Type Description RelativePath GetFileNameWithoutExtension() Declaration public string GetFileNameWithoutExtension() Returns Type Description String GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 GetPathFromWorkingFolder() Declaration public RelativePath GetPathFromWorkingFolder() Returns Type Description RelativePath IsFromWorkingFolder() Declaration public bool IsFromWorkingFolder() Returns Type Description Boolean MakeRelativeTo(RelativePath) Get relative path from right relative path to left relative path e.g.: {a/b/c.txt}.MakeRelativeTo({d/e.txt}) = {../a/b/c.txt} {a/b/c.txt}.MakeRelativeTo({a/d.txt}) = {b/c.txt} {../../a.txt}.MakeRelativeTo({../b.txt}) = {../a.txt} {../../a.txt}.MakeRelativeTo({../b/c.txt}) = {../../a.txt} {a.txt}.MakeRelativeTo({../b.txt}) = Oop... Declaration public RelativePath MakeRelativeTo(RelativePath relativeTo) Parameters Type Name Description RelativePath relativeTo Returns Type Description RelativePath Parse(String) Declaration public static RelativePath Parse(string path) Parameters Type Name Description String path Returns Type Description RelativePath Rebase(RelativePath, RelativePath) Rebase the relative path Declaration public RelativePath Rebase(RelativePath from, RelativePath to) Parameters Type Name Description RelativePath from original base path RelativePath to new base path Returns Type Description RelativePath rebased relative path RemoveWorkingFolder() Declaration public RelativePath RemoveWorkingFolder() Returns Type Description RelativePath ToString() Declaration public override string ToString() Returns Type Description String UrlDecode() Declaration public RelativePath UrlDecode() Returns Type Description RelativePath UrlEncode() Declaration public RelativePath UrlEncode() Returns Type Description RelativePath Operators Addition(RelativePath, RelativePath) Concat two relative path e.g.: a/b/c/ + d/e.txt = a/b/c/d/e.txt a/b/c/ + ../d/e.txt = a/b/d/e.txt a/b/c.txt + d/e.txt = a/b/d/e.txt a/b/c.txt + ../e.txt = a/e.txt ../c.txt + ../e.txt = ../../e.txt Declaration public static RelativePath operator +(RelativePath left, RelativePath right) Parameters Type Name Description RelativePath left RelativePath right Returns Type Description RelativePath Explicit(String to RelativePath) Declaration public static explicit operator RelativePath(string path) Parameters Type Name Description String path Returns Type Description RelativePath Implicit(RelativePath to String) Declaration public static implicit operator string (RelativePath path) Parameters Type Name Description RelativePath path Returns Type Description String Subtraction(RelativePath, RelativePath) Get relative path from right relative path to left relative path e.g.: a/b/c.txt - d/e.txt = ../a/b/c.txt a/b/c.txt - a/d.txt = b/c.txt ../../a.txt - ../b.txt = ../a.txt ../../a.txt - ../b/c.txt = ../../a.txt a.txt - ../b.txt = Oop... Declaration public static RelativePath operator -(RelativePath left, RelativePath right) Parameters Type Name Description RelativePath left RelativePath right Returns Type Description RelativePath"
  },
  "api/Microsoft.DocAsCode.Utility.ProcessUtility.html": {
    "href": "api/Microsoft.DocAsCode.Utility.ProcessUtility.html",
    "title": "Class ProcessUtility\r\n   | DocFX website ",
    "keywords": "Class ProcessUtility Inheritance Object ProcessUtility Namespace :Microsoft.DocAsCode.Utility Assembly :Microsoft.DocAsCode.Utility.dll Syntax public class ProcessUtility Methods ExecuteWin32ProcessAsync(String, String, String, Int32) Declaration public static Task<ProcessDetail> ExecuteWin32ProcessAsync(string executorPath, string arguments, string workingDirectory, int timeoutInMilliseconds) Parameters Type Name Description String executorPath String arguments String workingDirectory Int32 timeoutInMilliseconds Returns Type Description System.Threading.Tasks.Task < ProcessDetail > WaitForExitAsync(Process, Int32) Declaration public static Task WaitForExitAsync(Process process, int timeoutInMilliseconds) Parameters Type Name Description Process process Int32 timeoutInMilliseconds Returns Type Description Task"
  },
  "api/Microsoft.DocAsCode.Utility.ProcessDetail.html": {
    "href": "api/Microsoft.DocAsCode.Utility.ProcessDetail.html",
    "title": "Class ProcessDetail\r\n   | DocFX website ",
    "keywords": "Class ProcessDetail Inheritance Object ProcessDetail Namespace :Microsoft.DocAsCode.Utility Assembly :Microsoft.DocAsCode.Utility.dll Syntax public class ProcessDetail Properties Arguments Declaration public string Arguments { get; set; } Proverty Value Type Description String ExecutorPath Declaration public string ExecutorPath { get; set; } Proverty Value Type Description String ExitCode Declaration public int ExitCode { get; set; } Proverty Value Type Description Int32 ProcessId Declaration public int ProcessId { get; set; } Proverty Value Type Description Int32 StandardError Declaration public string StandardError { get; set; } Proverty Value Type Description String StandardOutput Declaration public string StandardOutput { get; set; } Proverty Value Type Description String WorkingDirectory Declaration public string WorkingDirectory { get; set; } Proverty Value Type Description String"
  },
  "api/Microsoft.DocAsCode.Utility.PathUtility.html": {
    "href": "api/Microsoft.DocAsCode.Utility.PathUtility.html",
    "title": "Class PathUtility\r\n   | DocFX website ",
    "keywords": "Class PathUtility Inheritance Object PathUtility Namespace :Microsoft.DocAsCode.Utility Assembly :Microsoft.DocAsCode.Utility.dll Syntax public class PathUtility Fields ListFileExtension Declaration public const string ListFileExtension Methods CopyFile(String, String, Boolean) Declaration public static void CopyFile(string path, string targetPath, bool overwrite = false) Parameters Type Name Description String path String targetPath Boolean overwrite CopyFilesToFolder(IEnumerable<String>, String, String, Boolean, Action<String>, Func<String, Boolean>) Declaration public static IEnumerable<string> CopyFilesToFolder(IEnumerable<string> files, string sourceFolder, string destinationFolder, bool overwrite, Action<string> messageHandler, Func<string, bool> errorHandler) Parameters Type Name Description System.Collections.Generic.IEnumerable < String > files String sourceFolder String destinationFolder Boolean overwrite System.Action < String > messageHandler System.Func < String , Boolean > errorHandler Returns Type Description System.Collections.Generic.IEnumerable < String > FormatPath(String, UriKind, String) Also change backslash to forward slash Declaration public static string FormatPath(string path, UriKind kind, string basePath = null) Parameters Type Name Description String path UriKind kind String basePath Returns Type Description String GetFileListFromFile(String) Declaration public static List<string> GetFileListFromFile(string filePath) Parameters Type Name Description String filePath Returns Type Description System.Collections.Generic.List < String > GetFullPath(String, String) Declaration public static string GetFullPath(string folder, string href) Parameters Type Name Description String folder String href Returns Type Description String IsPathFromWorkingFolder(String) Declaration public static bool IsPathFromWorkingFolder(string path) Parameters Type Name Description String path Returns Type Description Boolean IsPathUnderSpecificFolder(String, String) Declaration public static bool IsPathUnderSpecificFolder(string path, string folder) Parameters Type Name Description String path String folder Returns Type Description Boolean IsRelativePath(String) Declaration public static bool IsRelativePath(string path) Parameters Type Name Description String path Returns Type Description Boolean IsVaildFilePath(String) http://stackoverflow.com/questions/422090/in-c-sharp-check-that-filename-is-possibly-valid-not-that-it-exists Declaration public static bool IsVaildFilePath(string path) Parameters Type Name Description String path Returns Type Description Boolean MakeRelativePath(String, String) Creates a relative path from one file or folder to another. Declaration public static string MakeRelativePath(string basePath, string absolutePath) Parameters Type Name Description String basePath Contains the directory that defines the start of the relative path. String absolutePath Contains the path that defines the endpoint of the relative path. Returns Type Description String The relative path from the start directory to the end path. Exceptions Type Condition System.ArgumentNullException System.UriFormatException System.InvalidOperationException NormalizePath(String) Declaration public static string NormalizePath(string path) Parameters Type Name Description String path Returns Type Description String SaveFileListToFile(List<String>, String) Declaration public static void SaveFileListToFile(List<string> fileList, string filePath) Parameters Type Name Description System.Collections.Generic.List < String > fileList String filePath ToValidFilePath(String) Declaration public static string ToValidFilePath(string input) Parameters Type Name Description String input Returns Type Description String TryGetPathFromWorkingFolder(String, out String) Declaration public static bool TryGetPathFromWorkingFolder(string path, out string pathFromWorkingFolder) Parameters Type Name Description String path String pathFromWorkingFolder Returns Type Description Boolean"
  },
  "api/Microsoft.DocAsCode.Utility.LruList`1.html": {
    "href": "api/Microsoft.DocAsCode.Utility.LruList`1.html",
    "title": "Class LruList&lt;T&gt;\r\n   | DocFX website ",
    "keywords": "Class LruList<T> Inheritance Object LruList<T> Namespace :Microsoft.DocAsCode.Utility Assembly :Microsoft.DocAsCode.Utility.dll Syntax public class LruList<T> Constructors LruList(Int32, Action<T>, IEqualityComparer<T>) Declaration protected LruList(int capacity, Action<T> onRemoving, IEqualityComparer<T> comparer) Parameters Type Name Description Int32 capacity System.Action <T> onRemoving System.Collections.Generic.IEqualityComparer <T> comparer Methods Access(T) Declaration public void Access(T item) Parameters Type Name Description T item AccessNoCheck(T) Declaration protected virtual void AccessNoCheck(T item) Parameters Type Name Description T item Create(Int32, Action<T>, IEqualityComparer<T>) Declaration public static LruList<T> Create(int capacity, Action<T> onRemoving = null, IEqualityComparer<T> comparer = null) Parameters Type Name Description Int32 capacity System.Action <T> onRemoving System.Collections.Generic.IEqualityComparer <T> comparer Returns Type Description LruList <T> CreateSynchronized(Int32, Action<T>, IEqualityComparer<T>) Declaration public static LruList<T> CreateSynchronized(int capacity, Action<T> onRemoving = null, IEqualityComparer<T> comparer = null) Parameters Type Name Description Int32 capacity System.Action <T> onRemoving System.Collections.Generic.IEqualityComparer <T> comparer Returns Type Description LruList <T> TryFind(Func<T, Boolean>, out T) Declaration public virtual bool TryFind(Func<T, bool> func, out T item) Parameters Type Name Description System.Func <T, Boolean > func T item Returns Type Description Boolean"
  },
  "api/Microsoft.DocAsCode.Utility.JObjectDictionaryToObjectDictionaryConverter.html": {
    "href": "api/Microsoft.DocAsCode.Utility.JObjectDictionaryToObjectDictionaryConverter.html",
    "title": "Class JObjectDictionaryToObjectDictionaryConverter\r\n   | DocFX website ",
    "keywords": "Class JObjectDictionaryToObjectDictionaryConverter Inheritance Object Newtonsoft.Json.JsonConverter JObjectDictionaryToObjectDictionaryConverter Namespace :Microsoft.DocAsCode.Utility Assembly :Microsoft.DocAsCode.Utility.dll Syntax public class JObjectDictionaryToObjectDictionaryConverter : JsonConverter Methods CanConvert(Type) Declaration public override bool CanConvert(Type objectType) Parameters Type Name Description Type objectType Returns Type Description Boolean ReadJson(JsonReader, Type, Object, JsonSerializer) Declaration public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonReader reader Type objectType Object existingValue Newtonsoft.Json.JsonSerializer serializer Returns Type Description Object WriteJson(JsonWriter, Object, JsonSerializer) Declaration public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonWriter writer Object value Newtonsoft.Json.JsonSerializer serializer"
  },
  "api/Microsoft.DocAsCode.Utility.GitUtility.html": {
    "href": "api/Microsoft.DocAsCode.Utility.GitUtility.html",
    "title": "Class GitUtility\r\n   | DocFX website ",
    "keywords": "Class GitUtility Inheritance Object GitUtility Namespace :Microsoft.DocAsCode.Utility Assembly :Microsoft.DocAsCode.Utility.dll Syntax public class GitUtility Methods GetGitDetail(String) TODO: only get GitDetail on Project level? Declaration public static GitDetail GetGitDetail(string path) Parameters Type Name Description String path Returns Type Description GitDetail"
  },
  "api/Microsoft.DocAsCode.Utility.GitDetail.html": {
    "href": "api/Microsoft.DocAsCode.Utility.GitDetail.html",
    "title": "Class GitDetail\r\n   | DocFX website ",
    "keywords": "Class GitDetail Inheritance Object GitDetail Namespace :Microsoft.DocAsCode.Utility Assembly :Microsoft.DocAsCode.Utility.dll Syntax [Serializable] public class GitDetail Properties Description Declaration [JsonProperty(\"key\")] [YamlMember(Alias = \"key\")] public string Description { get; set; } Proverty Value Type Description String LocalWorkingDirectory Declaration [YamlIgnore] [JsonIgnore] public string LocalWorkingDirectory { get; set; } Proverty Value Type Description String RelativePath Relative path of current file to the Git Root Directory Declaration [YamlMember(Alias = \"path\")] [JsonProperty(\"path\")] public string RelativePath { get; set; } Proverty Value Type Description String RemoteBranch Declaration [YamlMember(Alias = \"branch\")] [JsonProperty(\"branch\")] public string RemoteBranch { get; set; } Proverty Value Type Description String RemoteRepositoryUrl Declaration [YamlMember(Alias = \"repo\")] [JsonProperty(\"repo\")] public string RemoteRepositoryUrl { get; set; } Proverty Value Type Description String Methods Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "api/Microsoft.DocAsCode.Utility.FilePathComparer.html": {
    "href": "api/Microsoft.DocAsCode.Utility.FilePathComparer.html",
    "title": "Class FilePathComparer\r\n   | DocFX website ",
    "keywords": "Class FilePathComparer Inheritance Object FilePathComparer Namespace :Microsoft.DocAsCode.Utility Assembly :Microsoft.DocAsCode.Utility.dll Syntax public class FilePathComparer : IEqualityComparer<string> Fields OSPlatformSensitiveComparer Declaration public static readonly FilePathComparer OSPlatformSensitiveComparer OSPlatformSensitiveStringComparer Declaration public static readonly StringComparer OSPlatformSensitiveStringComparer Methods Equals(String, String) Declaration public bool Equals(string x, string y) Parameters Type Name Description String x String y Returns Type Description Boolean GetHashCode(String) Declaration public int GetHashCode(string obj) Parameters Type Name Description String obj Returns Type Description Int32"
  },
  "api/Microsoft.DocAsCode.Utility.EntityMergers.html": {
    "href": "api/Microsoft.DocAsCode.Utility.EntityMergers.html",
    "title": "Namespace Microsoft.DocAsCode.Utility.EntityMergers\r\n   | DocFX website ",
    "keywords": "Namespace Microsoft.DocAsCode.Utility.EntityMergers Classes DictionaryMerger KeyedListMerger MergeOptionAttribute MergerDecorator MergerFacade ReflectionEntityMerger Interfaces IMergeContext IMergeHandler IMerger Enums MergeOption"
  },
  "api/Microsoft.DocAsCode.Utility.EntityMergers.ReflectionEntityMerger.html": {
    "href": "api/Microsoft.DocAsCode.Utility.EntityMergers.ReflectionEntityMerger.html",
    "title": "Class ReflectionEntityMerger\r\n   | DocFX website ",
    "keywords": "Class ReflectionEntityMerger Inheritance Object ReflectionEntityMerger Namespace :Microsoft.DocAsCode.Utility.EntityMergers Assembly :Microsoft.DocAsCode.Utility.dll Syntax public class ReflectionEntityMerger : IMerger Methods IMerger.Merge(ref Object, Object, Type, IMergeContext) Declaration void IMerger.Merge(ref object source, object overrides, Type type, IMergeContext context) Parameters Type Name Description Object source Object overrides Type type IMergeContext context IMerger.TestKey(Object, Object, Type, IMergeContext) Declaration bool IMerger.TestKey(object source, object overrides, Type type, IMergeContext context) Parameters Type Name Description Object source Object overrides Type type IMergeContext context Returns Type Description Boolean"
  },
  "api/Microsoft.DocAsCode.Utility.EntityMergers.MergerFacade.html": {
    "href": "api/Microsoft.DocAsCode.Utility.EntityMergers.MergerFacade.html",
    "title": "Class MergerFacade\r\n   | DocFX website ",
    "keywords": "Class MergerFacade Inheritance Object MergerFacade Namespace :Microsoft.DocAsCode.Utility.EntityMergers Assembly :Microsoft.DocAsCode.Utility.dll Syntax public class MergerFacade Constructors MergerFacade(IMerger) Declaration public MergerFacade(IMerger merger) Parameters Type Name Description IMerger merger Methods Merge<T>(ref T, T, IReadOnlyDictionary<String, Object>) Declaration public void Merge<T>(ref T source, T overrides, IReadOnlyDictionary<string, object> data = null)where T : class Parameters Type Name Description T source T overrides System.Collections.Generic.IReadOnlyDictionary < String , Object > data"
  },
  "api/Microsoft.DocAsCode.Utility.EntityMergers.MergerDecorator.html": {
    "href": "api/Microsoft.DocAsCode.Utility.EntityMergers.MergerDecorator.html",
    "title": "Class MergerDecorator\r\n   | DocFX website ",
    "keywords": "Class MergerDecorator Inheritance Object MergerDecorator Namespace :Microsoft.DocAsCode.Utility.EntityMergers Assembly :Microsoft.DocAsCode.Utility.dll Syntax public abstract class MergerDecorator : IMerger Constructors MergerDecorator(IMerger) Declaration public MergerDecorator(IMerger inner) Parameters Type Name Description IMerger inner Methods Merge(ref Object, Object, Type, IMergeContext) Declaration public virtual void Merge(ref object source, object overrides, Type type, IMergeContext context) Parameters Type Name Description Object source Object overrides Type type IMergeContext context TestKey(Object, Object, Type, IMergeContext) Declaration public virtual bool TestKey(object source, object overrides, Type type, IMergeContext context) Parameters Type Name Description Object source Object overrides Type type IMergeContext context Returns Type Description Boolean"
  },
  "api/Microsoft.DocAsCode.Utility.EntityMergers.MergeOptionAttribute.html": {
    "href": "api/Microsoft.DocAsCode.Utility.EntityMergers.MergeOptionAttribute.html",
    "title": "Class MergeOptionAttribute\r\n   | DocFX website ",
    "keywords": "Class MergeOptionAttribute Inheritance Object Attribute MergeOptionAttribute Namespace :Microsoft.DocAsCode.Utility.EntityMergers Assembly :Microsoft.DocAsCode.Utility.dll Syntax [AttributeUsage(AttributeTargets.Property, Inherited = true, AllowMultiple = false)] public sealed class MergeOptionAttribute : Attribute, _Attribute Constructors MergeOptionAttribute(MergeOption) Declaration public MergeOptionAttribute(MergeOption option = MergeOption.Merge) Parameters Type Name Description MergeOption option MergeOptionAttribute(Type) Hint merger use custom merge handler. Declaration public MergeOptionAttribute(Type handlerType) Parameters Type Name Description Type handlerType the type of custom merge handler, it should implement IMergeHandler . Properties Handler Declaration public IMergeHandler Handler { get; } Proverty Value Type Description IMergeHandler Option Declaration public MergeOption Option { get; } Proverty Value Type Description MergeOption"
  },
  "api/Microsoft.DocAsCode.Utility.EntityMergers.MergeOption.html": {
    "href": "api/Microsoft.DocAsCode.Utility.EntityMergers.MergeOption.html",
    "title": "Enum MergeOption\r\n   | DocFX website ",
    "keywords": "Enum MergeOption Namespace :Microsoft.DocAsCode.Utility.EntityMergers Assembly :Microsoft.DocAsCode.Utility.dll Syntax public enum MergeOption Fields Ignore Do not merge this property. Declaration Ignore = -1 Merge Standard merge(default behavior): for list, merge the items in the list by the merge key. for string or any value type, replace it when it is not null or default value in override entity. for other type, merge each property. Declaration Merge = 0 MergeKey Identify merge item in list. Declaration MergeKey = -2 MergeNullOrDefault When it is not null or default value in override entity, it is same with merge. When it is null or default value in override entity, it will replace the property to null or default value. Declaration MergeNullOrDefault = 1 Replace Replace it when it is not null or default value in override entity. Declaration Replace = 2 ReplaceNullOrDefault Always replace. Declaration ReplaceNullOrDefault = 3"
  },
  "api/Microsoft.DocAsCode.Utility.EntityMergers.KeyedListMerger.html": {
    "href": "api/Microsoft.DocAsCode.Utility.EntityMergers.KeyedListMerger.html",
    "title": "Class KeyedListMerger\r\n   | DocFX website ",
    "keywords": "Class KeyedListMerger Inheritance Object MergerDecorator KeyedListMerger Namespace :Microsoft.DocAsCode.Utility.EntityMergers Assembly :Microsoft.DocAsCode.Utility.dll Syntax public class KeyedListMerger : MergerDecorator, IMerger Constructors KeyedListMerger(IMerger) Declaration public KeyedListMerger(IMerger inner) Parameters Type Name Description IMerger inner Methods Merge(ref Object, Object, Type, IMergeContext) Declaration public override void Merge(ref object source, object overrides, Type type, IMergeContext context) Parameters Type Name Description Object source Object overrides Type type IMergeContext context"
  },
  "api/Microsoft.DocAsCode.Utility.EntityMergers.IMerger.html": {
    "href": "api/Microsoft.DocAsCode.Utility.EntityMergers.IMerger.html",
    "title": "Interface IMerger\r\n   | DocFX website ",
    "keywords": "Interface IMerger Namespace :Microsoft.DocAsCode.Utility.EntityMergers Assembly :Microsoft.DocAsCode.Utility.dll Syntax public interface IMerger Methods Merge(ref Object, Object, Type, IMergeContext) Declaration void Merge(ref object source, object overrides, Type type, IMergeContext context) Parameters Type Name Description Object source Object overrides Type type IMergeContext context TestKey(Object, Object, Type, IMergeContext) Declaration bool TestKey(object source, object overrides, Type type, IMergeContext context) Parameters Type Name Description Object source Object overrides Type type IMergeContext context Returns Type Description Boolean"
  },
  "api/Microsoft.DocAsCode.Utility.EntityMergers.IMergeHandler.html": {
    "href": "api/Microsoft.DocAsCode.Utility.EntityMergers.IMergeHandler.html",
    "title": "Interface IMergeHandler\r\n   | DocFX website ",
    "keywords": "Interface IMergeHandler Namespace :Microsoft.DocAsCode.Utility.EntityMergers Assembly :Microsoft.DocAsCode.Utility.dll Syntax public interface IMergeHandler Methods Merge(ref Object, Object, IMergeContext) Declaration void Merge(ref object source, object overrides, IMergeContext context) Parameters Type Name Description Object source Object overrides IMergeContext context"
  },
  "api/Microsoft.DocAsCode.Utility.EntityMergers.IMergeContext.html": {
    "href": "api/Microsoft.DocAsCode.Utility.EntityMergers.IMergeContext.html",
    "title": "Interface IMergeContext\r\n   | DocFX website ",
    "keywords": "Interface IMergeContext Namespace :Microsoft.DocAsCode.Utility.EntityMergers Assembly :Microsoft.DocAsCode.Utility.dll Syntax public interface IMergeContext Properties Item[String] Declaration object this[string key] { get; } Parameters Type Name Description String key Proverty Value Type Description Object Merger Declaration IMerger Merger { get; } Proverty Value Type Description IMerger"
  },
  "api/Microsoft.DocAsCode.Utility.EntityMergers.DictionaryMerger.html": {
    "href": "api/Microsoft.DocAsCode.Utility.EntityMergers.DictionaryMerger.html",
    "title": "Class DictionaryMerger\r\n   | DocFX website ",
    "keywords": "Class DictionaryMerger Inheritance Object MergerDecorator DictionaryMerger Namespace :Microsoft.DocAsCode.Utility.EntityMergers Assembly :Microsoft.DocAsCode.Utility.dll Syntax public class DictionaryMerger : MergerDecorator, IMerger Constructors DictionaryMerger(IMerger) Declaration public DictionaryMerger(IMerger inner) Parameters Type Name Description IMerger inner Methods Merge(ref Object, Object, Type, IMergeContext) Declaration public override void Merge(ref object source, object overrides, Type type, IMergeContext context) Parameters Type Name Description Object source Object overrides Type type IMergeContext context"
  },
  "api/Microsoft.DocAsCode.Utility.ConvertToObjectHelper.html": {
    "href": "api/Microsoft.DocAsCode.Utility.ConvertToObjectHelper.html",
    "title": "Class ConvertToObjectHelper\r\n   | DocFX website ",
    "keywords": "Class ConvertToObjectHelper Inheritance Object ConvertToObjectHelper Namespace :Microsoft.DocAsCode.Utility Assembly :Microsoft.DocAsCode.Utility.dll Syntax public class ConvertToObjectHelper Methods ConvertExpandoObjectToObject(Object) Declaration public static object ConvertExpandoObjectToObject(object raw) Parameters Type Name Description Object raw Returns Type Description Object ConvertJObjectToObject(Object) Declaration public static object ConvertJObjectToObject(object raw) Parameters Type Name Description Object raw Returns Type Description Object ConvertStrongTypeToJObject(Object) Declaration public static object ConvertStrongTypeToJObject(object raw) Parameters Type Name Description Object raw Returns Type Description Object ConvertStrongTypeToObject(Object) Declaration public static object ConvertStrongTypeToObject(object raw) Parameters Type Name Description Object raw Returns Type Description Object"
  },
  "api/Microsoft.DocAsCode.Utility.ConsoleUtility.html": {
    "href": "api/Microsoft.DocAsCode.Utility.ConsoleUtility.html",
    "title": "Class ConsoleUtility\r\n   | DocFX website ",
    "keywords": "Class ConsoleUtility Inheritance Object ConsoleUtility Namespace :Microsoft.DocAsCode.Utility Assembly :Microsoft.DocAsCode.Utility.dll Syntax public class ConsoleUtility Methods WriteToConsoleWithColor(Action, ConsoleColor) Declaration public static void WriteToConsoleWithColor(Action write, ConsoleColor color) Parameters Type Name Description Action write ConsoleColor color"
  },
  "api/Microsoft.DocAsCode.Utility.CollectionExtensions.html": {
    "href": "api/Microsoft.DocAsCode.Utility.CollectionExtensions.html",
    "title": "Class CollectionExtensions\r\n   | DocFX website ",
    "keywords": "Class CollectionExtensions Inheritance Object CollectionExtensions Namespace :Microsoft.DocAsCode.Utility Assembly :Microsoft.DocAsCode.Utility.dll Syntax public class CollectionExtensions Methods Merge<TItem, TResult>(IReadOnlyList<IEnumerable<TItem>>, IComparer<TItem>, Func<List<TItem>, TResult>) Declaration public static IEnumerable<TResult> Merge<TItem, TResult>(IReadOnlyList<IEnumerable<TItem>> sources, IComparer<TItem> comparer, Func<List<TItem>, TResult> merger) Parameters Type Name Description System.Collections.Generic.IReadOnlyList < System.Collections.Generic.IEnumerable <TItem>> sources System.Collections.Generic.IComparer <TItem> comparer System.Func < System.Collections.Generic.List <TItem>, TResult> merger Returns Type Description System.Collections.Generic.IEnumerable <TResult>"
  },
  "api/Microsoft.DocAsCode.Utility.AsyncConcurrentCache`2.html": {
    "href": "api/Microsoft.DocAsCode.Utility.AsyncConcurrentCache`2.html",
    "title": "Class AsyncConcurrentCache&lt;TKey, TValue&gt;\r\n   | DocFX website ",
    "keywords": "Class AsyncConcurrentCache<TKey, TValue> An asynchronous wrapper over concurrent dictionary Inheritance Object AsyncConcurrentCache<TKey, TValue> Namespace :Microsoft.DocAsCode.Utility Assembly :Microsoft.DocAsCode.Utility.dll Syntax public class AsyncConcurrentCache<TKey, TValue> Remarks Implementation copied from http://msdn.microsoft.com/en-us/library/hh873173(v=vs.110).aspx , AsyncCache Constructors AsyncConcurrentCache(IEqualityComparer<TKey>) Declaration public AsyncConcurrentCache(IEqualityComparer<TKey> comparer = null) Parameters Type Name Description System.Collections.Generic.IEqualityComparer <TKey> comparer Properties Values Gets a list of tasks in cache. Declaration public List<Task<TValue>> Values { get; } Proverty Value Type Description System.Collections.Generic.List < System.Threading.Tasks.Task <TValue>> Methods GetOrAdd(TKey, Func<TKey, Task<TValue>>, Boolean) Adds a key/value pair to the AsyncConcurrentCache<TKey, TValue> by using the specified function, if the key does not already exist. Declaration public Task<TValue> GetOrAdd(TKey key, Func<TKey, Task<TValue>> valueFactory, bool removeKeyOnFaulted = true) Parameters Type Name Description TKey key The key of the element to add. System.Func <TKey, System.Threading.Tasks.Task <TValue>> valueFactory The function used to get a task to generate value for the key Boolean removeKeyOnFaulted A flag indicating whether to remove the key from cache on faulted. Returns Type Description System.Threading.Tasks.Task <TValue> The task to generate value for the key TryGetValue(TKey, out Task<TValue>) Attempts to get the value associated with the specified key in cache. Declaration public bool TryGetValue(TKey key, out Task<TValue> value) Parameters Type Name Description TKey key The key of the element System.Threading.Tasks.Task <TValue> value The task to generate value for the key Returns Type Description Boolean true if the task was found; otherwise, false."
  },
  "api/Microsoft.DocAsCode.SubCommands.html": {
    "href": "api/Microsoft.DocAsCode.SubCommands.html",
    "title": "Namespace Microsoft.DocAsCode.SubCommands\r\n   | DocFX website ",
    "keywords": "Namespace Microsoft.DocAsCode.SubCommands Classes CommandOptionAttribute OptionParserException"
  },
  "api/Microsoft.DocAsCode.SubCommands.OptionParserException.html": {
    "href": "api/Microsoft.DocAsCode.SubCommands.OptionParserException.html",
    "title": "Class OptionParserException\r\n   | DocFX website ",
    "keywords": "Class OptionParserException Inheritance Object Exception SystemException ArgumentException OptionParserException Namespace :Microsoft.DocAsCode.SubCommands Assembly :docfx.dll Syntax public class OptionParserException : ArgumentException, _Exception, ISerializable Constructors OptionParserException() Declaration public OptionParserException() OptionParserException(String) Declaration public OptionParserException(string message) Parameters Type Name Description String message"
  },
  "api/Microsoft.DocAsCode.SubCommands.CommandOptionAttribute.html": {
    "href": "api/Microsoft.DocAsCode.SubCommands.CommandOptionAttribute.html",
    "title": "Class CommandOptionAttribute\r\n   | DocFX website ",
    "keywords": "Class CommandOptionAttribute Inheritance Object Attribute System.Composition.ExportAttribute CommandOptionAttribute Namespace :Microsoft.DocAsCode.SubCommands Assembly :docfx.dll Syntax [MetadataAttribute] [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public class CommandOptionAttribute : ExportAttribute, _Attribute Constructors CommandOptionAttribute(String, String) Declaration public CommandOptionAttribute(string name, string helpText) Parameters Type Name Description String name String helpText Properties HelpText Declaration public string HelpText { get; } Proverty Value Type Description String Name Declaration public string Name { get; } Proverty Value Type Description String"
  },
  "api/Microsoft.DocAsCode.Plugins.html": {
    "href": "api/Microsoft.DocAsCode.Plugins.html",
    "title": "Namespace Microsoft.DocAsCode.Plugins\r\n   | DocFX website ",
    "keywords": "Namespace Microsoft.DocAsCode.Plugins Classes DocumentException DocumentExceptionExtensions FileAndType FileModel MarkupResult ModelWithCache PropertyChangedEventArgs <T> SaveResult SubCommandRunningContext UidDefinition XRefSpec Interfaces ICustomMarkdownTagValidator Contract interface for custom validate tag in markdown IDocumentBuildContext IDocumentBuildStep IDocumentProcessor IHostService ISubCommand ISubCommandController ISubCommandCreator Enums DocumentType ProcessingPriority SubCommandParseOption"
  },
  "api/Microsoft.DocAsCode.Plugins.XRefSpec.html": {
    "href": "api/Microsoft.DocAsCode.Plugins.XRefSpec.html",
    "title": "Class XRefSpec\r\n   | DocFX website ",
    "keywords": "Class XRefSpec Inheritance Object XRefSpec Namespace :Microsoft.DocAsCode.Plugins Assembly :Microsoft.DocAsCode.Plugins.dll Syntax public sealed class XRefSpec : IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Fields HrefKey Declaration public const string HrefKey NameKey Declaration public const string NameKey UidKey Declaration public const string UidKey Properties Count Declaration public int Count { get; } Proverty Value Type Description Int32 Href Declaration public string Href { get; set; } Proverty Value Type Description String IsReadOnly Declaration public bool IsReadOnly { get; } Proverty Value Type Description Boolean Item[String] Declaration public string this[string key] { get; set; } Parameters Type Name Description String key Proverty Value Type Description String Keys Declaration public ICollection<string> Keys { get; } Proverty Value Type Description System.Collections.Generic.ICollection < String > Name Declaration public string Name { get; set; } Proverty Value Type Description String Uid Declaration public string Uid { get; set; } Proverty Value Type Description String Values Declaration public ICollection<string> Values { get; } Proverty Value Type Description System.Collections.Generic.ICollection < String > Methods Add(String, String) Declaration public void Add(string key, string value) Parameters Type Name Description String key String value Clear() Declaration public void Clear() ContainsKey(String) Declaration public bool ContainsKey(string key) Parameters Type Name Description String key Returns Type Description Boolean GetEnumerator() Declaration public IEnumerator<KeyValuePair<string, string>> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.Collections.Generic.KeyValuePair < String , String >> Remove(String) Declaration public bool Remove(string key) Parameters Type Name Description String key Returns Type Description Boolean ICollection<KeyValuePair<String, String>>.Add(KeyValuePair<String, String>) Declaration void ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string> item) Parameters Type Name Description System.Collections.Generic.KeyValuePair < String , String > item ICollection<KeyValuePair<String, String>>.Contains(KeyValuePair<String, String>) Declaration bool ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string> item) Parameters Type Name Description System.Collections.Generic.KeyValuePair < String , String > item Returns Type Description Boolean ICollection<KeyValuePair<String, String>>.CopyTo(KeyValuePair<String, String>[], Int32) Declaration void ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[] array, int arrayIndex) Parameters Type Name Description System.Collections.Generic.KeyValuePair < String , String >[] array Int32 arrayIndex ICollection<KeyValuePair<String, String>>.Remove(KeyValuePair<String, String>) Declaration bool ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string> item) Parameters Type Name Description System.Collections.Generic.KeyValuePair < String , String > item Returns Type Description Boolean IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator ToReadOnly() Declaration public XRefSpec ToReadOnly() Returns Type Description XRefSpec TryGetValue(String, out String) Declaration public bool TryGetValue(string key, out string value) Parameters Type Name Description String key String value Returns Type Description Boolean"
  },
  "api/Microsoft.DocAsCode.Plugins.UidDefinition.html": {
    "href": "api/Microsoft.DocAsCode.Plugins.UidDefinition.html",
    "title": "Class UidDefinition\r\n   | DocFX website ",
    "keywords": "Class UidDefinition Inheritance Object UidDefinition Namespace :Microsoft.DocAsCode.Plugins Assembly :Microsoft.DocAsCode.Plugins.dll Syntax public class UidDefinition Constructors UidDefinition(String, String, Nullable<Int32>, Nullable<Int32>) Declaration public UidDefinition(string uid, string file, int ? line = null, int ? column = null) Parameters Type Name Description String uid String file System.Nullable < Int32 > line System.Nullable < Int32 > column Properties Column Declaration public int ? Column { get; } Proverty Value Type Description System.Nullable < Int32 > File Declaration public string File { get; } Proverty Value Type Description String Line Declaration public int ? Line { get; } Proverty Value Type Description System.Nullable < Int32 > Name Declaration public string Name { get; } Proverty Value Type Description String"
  },
  "api/Microsoft.DocAsCode.Plugins.SubCommandRunningContext.html": {
    "href": "api/Microsoft.DocAsCode.Plugins.SubCommandRunningContext.html",
    "title": "Class SubCommandRunningContext\r\n   | DocFX website ",
    "keywords": "Class SubCommandRunningContext Inheritance Object SubCommandRunningContext Namespace :Microsoft.DocAsCode.Plugins Assembly :Microsoft.DocAsCode.Plugins.dll Syntax public class SubCommandRunningContext"
  },
  "api/Microsoft.DocAsCode.Plugins.SubCommandParseOption.html": {
    "href": "api/Microsoft.DocAsCode.Plugins.SubCommandParseOption.html",
    "title": "Enum SubCommandParseOption\r\n   | DocFX website ",
    "keywords": "Enum SubCommandParseOption Namespace :Microsoft.DocAsCode.Plugins Assembly :Microsoft.DocAsCode.Plugins.dll Syntax public enum SubCommandParseOption Fields Loose Declaration Loose = 0 Strict Declaration Strict = 1"
  },
  "api/Microsoft.DocAsCode.Plugins.SaveResult.html": {
    "href": "api/Microsoft.DocAsCode.Plugins.SaveResult.html",
    "title": "Class SaveResult\r\n   | DocFX website ",
    "keywords": "Class SaveResult Inheritance Object SaveResult Namespace :Microsoft.DocAsCode.Plugins Assembly :Microsoft.DocAsCode.Plugins.dll Syntax public class SaveResult Properties DocumentType Declaration public string DocumentType { get; set; } Proverty Value Type Description String LinkToFiles Declaration public ImmutableArray<string> LinkToFiles { get; set; } Proverty Value Type Description System.Collections.Immutable.ImmutableArray < String > LinkToUids Declaration public ImmutableHashSet<string> LinkToUids { get; set; } Proverty Value Type Description System.Collections.Immutable.ImmutableHashSet < String > ModelFile Declaration public string ModelFile { get; set; } Proverty Value Type Description String ResourceFile Declaration public string ResourceFile { get; set; } Proverty Value Type Description String TocMap Declaration public ImmutableDictionary<string, HashSet<string>> TocMap { get; set; } Proverty Value Type Description System.Collections.Immutable.ImmutableDictionary < String , System.Collections.Generic.HashSet < String >> XRefSpecs Declaration public ImmutableArray<XRefSpec> XRefSpecs { get; set; } Proverty Value Type Description System.Collections.Immutable.ImmutableArray < XRefSpec >"
  },
  "api/Microsoft.DocAsCode.Plugins.PropertyChangedEventArgs`1.html": {
    "href": "api/Microsoft.DocAsCode.Plugins.PropertyChangedEventArgs`1.html",
    "title": "Class PropertyChangedEventArgs&lt;T&gt;\r\n   | DocFX website ",
    "keywords": "Class PropertyChangedEventArgs<T> Inheritance Object EventArgs PropertyChangedEventArgs PropertyChangedEventArgs<T> Namespace :Microsoft.DocAsCode.Plugins Assembly :Microsoft.DocAsCode.Plugins.dll Syntax public class PropertyChangedEventArgs<T> : PropertyChangedEventArgs Constructors PropertyChangedEventArgs(String, T, T) Declaration public PropertyChangedEventArgs(string propertyName, T original, T current) Parameters Type Name Description String propertyName T original T current Properties Current Declaration public T Current { get; } Proverty Value Type Description T Original Declaration public T Original { get; } Proverty Value Type Description T"
  },
  "api/Microsoft.DocAsCode.Plugins.ProcessingPriority.html": {
    "href": "api/Microsoft.DocAsCode.Plugins.ProcessingPriority.html",
    "title": "Enum ProcessingPriority\r\n   | DocFX website ",
    "keywords": "Enum ProcessingPriority Namespace :Microsoft.DocAsCode.Plugins Assembly :Microsoft.DocAsCode.Plugins.dll Syntax public enum ProcessingPriority Fields AboveNormal Declaration AboveNormal = 512 BelowNormal Declaration BelowNormal = 128 High Declaration High = 1024 Highest Declaration [EditorBrowsable(EditorBrowsableState.Never)] Highest = 2147483647 Low Declaration Low = 64 Lowest Declaration [EditorBrowsable(EditorBrowsableState.Never)] Lowest = 0 Normal Declaration Normal = 256 NotSupported Declaration NotSupported = -1 NotSupportted Declaration [Obsolete(\"NotSupported\")] NotSupportted = -1"
  },
  "api/Microsoft.DocAsCode.Plugins.ModelWithCache.html": {
    "href": "api/Microsoft.DocAsCode.Plugins.ModelWithCache.html",
    "title": "Class ModelWithCache\r\n   | DocFX website ",
    "keywords": "Class ModelWithCache Inheritance Object ModelWithCache Namespace :Microsoft.DocAsCode.Plugins Assembly :Microsoft.DocAsCode.Plugins.dll Syntax public sealed class ModelWithCache : IDisposable Constructors ModelWithCache(Object, IFormatter) Declaration public ModelWithCache(object content, IFormatter serializer = null) Parameters Type Name Description Object content IFormatter serializer Properties Content Declaration public object Content { get; set; } Proverty Value Type Description Object File Declaration public string File { get; set; } Proverty Value Type Description String Methods Deserialize() Declaration public bool Deserialize() Returns Type Description Boolean Dispose() Declaration public void Dispose() Serialize() Declaration public bool Serialize() Returns Type Description Boolean Events ContentAccessed Declaration public event EventHandler ContentAccessed"
  },
  "api/Microsoft.DocAsCode.Plugins.MarkupResult.html": {
    "href": "api/Microsoft.DocAsCode.Plugins.MarkupResult.html",
    "title": "Class MarkupResult\r\n   | DocFX website ",
    "keywords": "Class MarkupResult Inheritance Object MarkupResult Namespace :Microsoft.DocAsCode.Plugins Assembly :Microsoft.DocAsCode.Plugins.dll Syntax public class MarkupResult Properties Html Declaration public string Html { get; set; } Proverty Value Type Description String LinkToFiles Declaration public ImmutableArray<string> LinkToFiles { get; set; } Proverty Value Type Description System.Collections.Immutable.ImmutableArray < String > LinkToUids Declaration public ImmutableHashSet<string> LinkToUids { get; set; } Proverty Value Type Description System.Collections.Immutable.ImmutableHashSet < String > YamlHeader Declaration public ImmutableDictionary<string, object> YamlHeader { get; set; } Proverty Value Type Description System.Collections.Immutable.ImmutableDictionary < String , Object >"
  },
  "api/Microsoft.DocAsCode.Plugins.ISubCommandCreator.html": {
    "href": "api/Microsoft.DocAsCode.Plugins.ISubCommandCreator.html",
    "title": "Interface ISubCommandCreator\r\n   | DocFX website ",
    "keywords": "Interface ISubCommandCreator Namespace :Microsoft.DocAsCode.Plugins Assembly :Microsoft.DocAsCode.Plugins.dll Syntax public interface ISubCommandCreator Methods Create(String[], ISubCommandController, SubCommandParseOption) Declaration ISubCommand Create(string[] args, ISubCommandController controller, SubCommandParseOption option) Parameters Type Name Description String [] args ISubCommandController controller SubCommandParseOption option Returns Type Description ISubCommand GetHelpText() Declaration string GetHelpText() Returns Type Description String"
  },
  "api/Microsoft.DocAsCode.Plugins.ISubCommandController.html": {
    "href": "api/Microsoft.DocAsCode.Plugins.ISubCommandController.html",
    "title": "Interface ISubCommandController\r\n   | DocFX website ",
    "keywords": "Interface ISubCommandController Namespace :Microsoft.DocAsCode.Plugins Assembly :Microsoft.DocAsCode.Plugins.dll Syntax public interface ISubCommandController Methods GetHelpText() Declaration string GetHelpText() Returns Type Description String TryGetCommandCreator(String, out ISubCommandCreator) Declaration bool TryGetCommandCreator(string name, out ISubCommandCreator creator) Parameters Type Name Description String name ISubCommandCreator creator Returns Type Description Boolean"
  },
  "api/Microsoft.DocAsCode.Plugins.ISubCommand.html": {
    "href": "api/Microsoft.DocAsCode.Plugins.ISubCommand.html",
    "title": "Interface ISubCommand\r\n   | DocFX website ",
    "keywords": "Interface ISubCommand Namespace :Microsoft.DocAsCode.Plugins Assembly :Microsoft.DocAsCode.Plugins.dll Syntax public interface ISubCommand Properties AllowReplay Declaration bool AllowReplay { get; } Proverty Value Type Description Boolean Methods Exec(SubCommandRunningContext) Declaration void Exec(SubCommandRunningContext context) Parameters Type Name Description SubCommandRunningContext context"
  },
  "api/Microsoft.DocAsCode.Plugins.IHostService.html": {
    "href": "api/Microsoft.DocAsCode.Plugins.IHostService.html",
    "title": "Interface IHostService\r\n   | DocFX website ",
    "keywords": "Interface IHostService Namespace :Microsoft.DocAsCode.Plugins Assembly :Microsoft.DocAsCode.Plugins.dll Syntax public interface IHostService Properties SourceFiles Declaration ImmutableDictionary<string, FileAndType> SourceFiles { get; } Proverty Value Type Description System.Collections.Immutable.ImmutableDictionary < String , FileAndType > Methods GetAllUids() Declaration ImmutableHashSet<string> GetAllUids() Returns Type Description System.Collections.Immutable.ImmutableHashSet < String > GetModels(Nullable<DocumentType>) Declaration ImmutableList<FileModel> GetModels(DocumentType? type = null) Parameters Type Name Description System.Nullable < DocumentType > type Returns Type Description System.Collections.Immutable.ImmutableList < FileModel > LogError(String, String, String) Declaration void LogError(string message, string file = null, string line = null) Parameters Type Name Description String message String file String line LogInfo(String, String, String) Declaration void LogInfo(string message, string file = null, string line = null) Parameters Type Name Description String message String file String line LogVerbose(String, String, String) Declaration void LogVerbose(string message, string file = null, string line = null) Parameters Type Name Description String message String file String line LogWarning(String, String, String) Declaration void LogWarning(string message, string file = null, string line = null) Parameters Type Name Description String message String file String line LookupByUid(String) Declaration ImmutableList<FileModel> LookupByUid(string uid) Parameters Type Name Description String uid Returns Type Description System.Collections.Immutable.ImmutableList < FileModel > Markup(String, FileAndType) Declaration MarkupResult Markup(string markdown, FileAndType ft) Parameters Type Name Description String markdown FileAndType ft Returns Type Description MarkupResult"
  },
  "api/Microsoft.DocAsCode.Plugins.IDocumentProcessor.html": {
    "href": "api/Microsoft.DocAsCode.Plugins.IDocumentProcessor.html",
    "title": "Interface IDocumentProcessor\r\n   | DocFX website ",
    "keywords": "Interface IDocumentProcessor Namespace :Microsoft.DocAsCode.Plugins Assembly :Microsoft.DocAsCode.Plugins.dll Syntax public interface IDocumentProcessor Properties BuildSteps Declaration IEnumerable<IDocumentBuildStep> BuildSteps { get; } Proverty Value Type Description System.Collections.Generic.IEnumerable < IDocumentBuildStep > Name Declaration string Name { get; } Proverty Value Type Description String Methods GetProcessingPriority(FileAndType) Declaration ProcessingPriority GetProcessingPriority(FileAndType file) Parameters Type Name Description FileAndType file Returns Type Description ProcessingPriority Load(FileAndType, ImmutableDictionary<String, Object>) Declaration FileModel Load(FileAndType file, ImmutableDictionary<string, object> metadata) Parameters Type Name Description FileAndType file System.Collections.Immutable.ImmutableDictionary < String , Object > metadata Returns Type Description FileModel Save(FileModel) Declaration SaveResult Save(FileModel model) Parameters Type Name Description FileModel model Returns Type Description SaveResult UpdateHref(FileModel, IDocumentBuildContext) Declaration void UpdateHref(FileModel model, IDocumentBuildContext context) Parameters Type Name Description FileModel model IDocumentBuildContext context"
  },
  "api/Microsoft.DocAsCode.Plugins.IDocumentBuildStep.html": {
    "href": "api/Microsoft.DocAsCode.Plugins.IDocumentBuildStep.html",
    "title": "Interface IDocumentBuildStep\r\n   | DocFX website ",
    "keywords": "Interface IDocumentBuildStep Namespace :Microsoft.DocAsCode.Plugins Assembly :Microsoft.DocAsCode.Plugins.dll Syntax public interface IDocumentBuildStep Properties BuildOrder Declaration int BuildOrder { get; } Proverty Value Type Description Int32 Name Declaration string Name { get; } Proverty Value Type Description String Methods Build(FileModel, IHostService) Declaration void Build(FileModel model, IHostService host) Parameters Type Name Description FileModel model IHostService host Postbuild(ImmutableList<FileModel>, IHostService) Declaration void Postbuild(ImmutableList<FileModel> models, IHostService host) Parameters Type Name Description System.Collections.Immutable.ImmutableList < FileModel > models IHostService host Prebuild(ImmutableList<FileModel>, IHostService) Declaration IEnumerable<FileModel> Prebuild(ImmutableList<FileModel> models, IHostService host) Parameters Type Name Description System.Collections.Immutable.ImmutableList < FileModel > models IHostService host Returns Type Description System.Collections.Generic.IEnumerable < FileModel >"
  },
  "api/Microsoft.DocAsCode.Plugins.IDocumentBuildContext.html": {
    "href": "api/Microsoft.DocAsCode.Plugins.IDocumentBuildContext.html",
    "title": "Interface IDocumentBuildContext\r\n   | DocFX website ",
    "keywords": "Interface IDocumentBuildContext Namespace :Microsoft.DocAsCode.Plugins Assembly :Microsoft.DocAsCode.Plugins.dll Syntax public interface IDocumentBuildContext Methods GetFilePath(String) Get final file path from working folder, starting with ~/ Declaration string GetFilePath(string key) Parameters Type Name Description String key Key is the original file path from working folder, starting with ~/ Returns Type Description String The final file path for current file GetTocFileKeySet(String) Get a set of file key for the toc files that current file belongs to Declaration IImmutableList<string> GetTocFileKeySet(string key) Parameters Type Name Description String key The key of current file Returns Type Description System.Collections.Immutable.IImmutableList < String > The set of file key for the toc files that current file belongs to GetXrefSpec(String) Get internal xref spec for current uid Declaration XRefSpec GetXrefSpec(string uid) Parameters Type Name Description String uid The uid of the file Returns Type Description XRefSpec The file key of current file RegisterInternalXrefSpec(XRefSpec) Register internal xref spec Declaration void RegisterInternalXrefSpec(XRefSpec xrefSpec) Parameters Type Name Description XRefSpec xrefSpec RegisterToc(String, String) Register the toc to the file Declaration void RegisterToc(string tocFileKey, string fileKey) Parameters Type Name Description String tocFileKey The key of the toc file that the file belongs to String fileKey The key of the file that belongs to the toc SetFilePath(String, String) Set the final file path for current file Declaration void SetFilePath(string key, string filePath) Parameters Type Name Description String key The file key of current file String filePath The final file path for current file"
  },
  "api/Microsoft.DocAsCode.Plugins.ICustomMarkdownTagValidator.html": {
    "href": "api/Microsoft.DocAsCode.Plugins.ICustomMarkdownTagValidator.html",
    "title": "Interface ICustomMarkdownTagValidator\r\n   | DocFX website ",
    "keywords": "Interface ICustomMarkdownTagValidator Contract interface for custom validate tag in markdown Namespace :Microsoft.DocAsCode.Plugins Assembly :Microsoft.DocAsCode.Plugins.dll Syntax public interface ICustomMarkdownTagValidator Methods Validate(String) Declaration bool Validate(string tag) Parameters Type Name Description String tag Returns Type Description Boolean"
  },
  "api/Microsoft.DocAsCode.Plugins.FileModel.html": {
    "href": "api/Microsoft.DocAsCode.Plugins.FileModel.html",
    "title": "Class FileModel\r\n   | DocFX website ",
    "keywords": "Class FileModel Inheritance Object FileModel Namespace :Microsoft.DocAsCode.Plugins Assembly :Microsoft.DocAsCode.Plugins.dll Syntax public sealed class FileModel : IDisposable Constructors FileModel(FileAndType, Object, FileAndType, IFormatter) Declaration public FileModel(FileAndType ft, object content, FileAndType original = null, IFormatter serializer = null) Parameters Type Name Description FileAndType ft Object content FileAndType original IFormatter serializer Properties BaseDir Declaration public string BaseDir { get; set; } Proverty Value Type Description String Content Declaration public object Content { get; set; } Proverty Value Type Description Object DocumentType Declaration public string DocumentType { get; set; } Proverty Value Type Description String File Declaration public string File { get; set; } Proverty Value Type Description String FileAndType Declaration public FileAndType FileAndType { get; } Proverty Value Type Description FileAndType Key Declaration public string Key { get; } Proverty Value Type Description String LocalPathFromRepoRoot Declaration public string LocalPathFromRepoRoot { get; set; } Proverty Value Type Description String ModelWithCache Declaration public ModelWithCache ModelWithCache { get; } Proverty Value Type Description ModelWithCache OriginalFileAndType Declaration public FileAndType OriginalFileAndType { get; } Proverty Value Type Description FileAndType PathRewriter Declaration public Func<string, string> PathRewriter { get; } Proverty Value Type Description System.Func < String , String > Properties Declaration public dynamic Properties { get; } Proverty Value Type Description Object Type Declaration public DocumentType Type { get; } Proverty Value Type Description DocumentType Uids Declaration public ImmutableArray<UidDefinition> Uids { get; set; } Proverty Value Type Description System.Collections.Immutable.ImmutableArray < UidDefinition > Methods Dispose() Declaration public void Dispose() Events ContentAccessed Declaration public event EventHandler ContentAccessed FileOrBaseDirChanged Declaration public event EventHandler FileOrBaseDirChanged UidsChanged Declaration public event EventHandler<PropertyChangedEventArgs<ImmutableArray<UidDefinition>>> UidsChanged"
  },
  "api/Microsoft.DocAsCode.Plugins.FileAndType.html": {
    "href": "api/Microsoft.DocAsCode.Plugins.FileAndType.html",
    "title": "Class FileAndType\r\n   | DocFX website ",
    "keywords": "Class FileAndType Inheritance Object FileAndType Namespace :Microsoft.DocAsCode.Plugins Assembly :Microsoft.DocAsCode.Plugins.dll Syntax public sealed class FileAndType : IEquatable<FileAndType> Constructors FileAndType(String, String, DocumentType, Func<String, String>) Declaration public FileAndType(string baseDir, string file, DocumentType type, Func<string, string> pathRewriter) Parameters Type Name Description String baseDir String file DocumentType type System.Func < String , String > pathRewriter Properties BaseDir Declaration public string BaseDir { get; } Proverty Value Type Description String File Declaration public string File { get; } Proverty Value Type Description String PathRewriter Declaration public Func<string, string> PathRewriter { get; } Proverty Value Type Description System.Func < String , String > Type Declaration public DocumentType Type { get; } Proverty Value Type Description DocumentType Methods ChangeType(DocumentType) Declaration public FileAndType ChangeType(DocumentType type) Parameters Type Name Description DocumentType type Returns Type Description FileAndType Equals(FileAndType) Declaration public bool Equals(FileAndType other) Parameters Type Name Description FileAndType other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Operators Equality(FileAndType, FileAndType) Declaration public static bool operator ==(FileAndType left, FileAndType right) Parameters Type Name Description FileAndType left FileAndType right Returns Type Description Boolean Inequality(FileAndType, FileAndType) Declaration public static bool operator !=(FileAndType left, FileAndType right) Parameters Type Name Description FileAndType left FileAndType right Returns Type Description Boolean"
  },
  "api/Microsoft.DocAsCode.Plugins.DocumentType.html": {
    "href": "api/Microsoft.DocAsCode.Plugins.DocumentType.html",
    "title": "Enum DocumentType\r\n   | DocFX website ",
    "keywords": "Enum DocumentType Namespace :Microsoft.DocAsCode.Plugins Assembly :Microsoft.DocAsCode.Plugins.dll Syntax public enum DocumentType Fields Article Declaration Article = 0 Metadata Declaration Metadata = 3 Overwrite Declaration Overwrite = 1 Resource Declaration Resource = 2"
  },
  "api/Microsoft.DocAsCode.Plugins.DocumentExceptionExtensions.html": {
    "href": "api/Microsoft.DocAsCode.Plugins.DocumentExceptionExtensions.html",
    "title": "Class DocumentExceptionExtensions\r\n   | DocFX website ",
    "keywords": "Class DocumentExceptionExtensions Inheritance Object DocumentExceptionExtensions Namespace :Microsoft.DocAsCode.Plugins Assembly :Microsoft.DocAsCode.Plugins.dll Syntax public class DocumentExceptionExtensions Methods RunAll<TElement>(IReadOnlyList<TElement>, Action<TElement>) Declaration public static void RunAll<TElement>(IReadOnlyList<TElement> elements, Action<TElement> action) Parameters Type Name Description System.Collections.Generic.IReadOnlyList <TElement> elements System.Action <TElement> action RunAll<TElement>(IReadOnlyList<TElement>, Action<TElement>, Int32) Declaration public static void RunAll<TElement>(IReadOnlyList<TElement> elements, Action<TElement> action, int parallelism) Parameters Type Name Description System.Collections.Generic.IReadOnlyList <TElement> elements System.Action <TElement> action Int32 parallelism RunAll<TElement, TResult>(IReadOnlyList<TElement>, Func<TElement, TResult>) Declaration public static TResult[] RunAll<TElement, TResult>(IReadOnlyList<TElement> elements, Func<TElement, TResult> func) Parameters Type Name Description System.Collections.Generic.IReadOnlyList <TElement> elements System.Func <TElement, TResult> func Returns Type Description TResult[]"
  },
  "api/Microsoft.DocAsCode.Plugins.DocumentException.html": {
    "href": "api/Microsoft.DocAsCode.Plugins.DocumentException.html",
    "title": "Class DocumentException\r\n   | DocFX website ",
    "keywords": "Class DocumentException Inheritance Object Exception DocumentException Namespace :Microsoft.DocAsCode.Plugins Assembly :Microsoft.DocAsCode.Plugins.dll Syntax [Serializable] public class DocumentException : Exception, ISerializable, _Exception Constructors DocumentException() Declaration public DocumentException() DocumentException(SerializationInfo, StreamingContext) Declaration protected DocumentException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context DocumentException(String) Declaration public DocumentException(string message) Parameters Type Name Description String message DocumentException(String, Exception) Declaration public DocumentException(string message, Exception inner) Parameters Type Name Description String message Exception inner Properties Column Declaration public int Column { get; set; } Proverty Value Type Description Int32 File Declaration public string File { get; set; } Proverty Value Type Description String Line Declaration public int Line { get; set; } Proverty Value Type Description Int32 Methods GetObjectData(SerializationInfo, StreamingContext) Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context RunAll(Action[]) Declaration public static void RunAll(params Action[] actions) Parameters Type Name Description Action [] actions"
  },
  "api/Microsoft.DocAsCode.OptionUsageAttribute.html": {
    "href": "api/Microsoft.DocAsCode.OptionUsageAttribute.html",
    "title": "Class OptionUsageAttribute\r\n   | DocFX website ",
    "keywords": "Class OptionUsageAttribute Inheritance Object Attribute OptionUsageAttribute Namespace :Microsoft.DocAsCode Assembly :docfx.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true, Inherited = false)] public class OptionUsageAttribute : Attribute, _Attribute Constructors OptionUsageAttribute(String) Declaration public OptionUsageAttribute(string name) Parameters Type Name Description String name Properties Name Declaration public string Name { get; } Proverty Value Type Description String"
  },
  "api/Microsoft.DocAsCode.MetadataSchemata.html": {
    "href": "api/Microsoft.DocAsCode.MetadataSchemata.html",
    "title": "Namespace Microsoft.DocAsCode.MetadataSchemata\r\n   | DocFX website ",
    "keywords": "Namespace Microsoft.DocAsCode.MetadataSchemata Classes DisplayNameAttribute MetadataCompiler MetadataParser QueryNameAttribute ValidationErrorCodes ValidationErrorCodes.Schema ValidationErrorCodes.UnknownMetadata ValidationErrorCodes.WellknownMetadata ValidationResult ValidationResults Interfaces IMetadataDefinition IMetadataSchema IUnknownMetadataValidator IWellknownMetadataValidator"
  },
  "api/Microsoft.DocAsCode.MetadataSchemata.ValidationResults.html": {
    "href": "api/Microsoft.DocAsCode.MetadataSchemata.ValidationResults.html",
    "title": "Class ValidationResults\r\n   | DocFX website ",
    "keywords": "Class ValidationResults Inheritance Object ValidationResults Namespace :Microsoft.DocAsCode.MetadataSchemata Assembly :Microsoft.DocAsCode.MetadataSchemata.dll Syntax public class ValidationResults Constructors ValidationResults(IEnumerable<ValidationResult>) Declaration public ValidationResults(IEnumerable<ValidationResult> results) Parameters Type Name Description System.Collections.Generic.IEnumerable < ValidationResult > results Properties IsSuccess Declaration public bool IsSuccess { get; } Proverty Value Type Description Boolean Items Declaration public List<ValidationResult> Items { get; } Proverty Value Type Description System.Collections.Generic.List < ValidationResult >"
  },
  "api/Microsoft.DocAsCode.MetadataSchemata.ValidationResult.html": {
    "href": "api/Microsoft.DocAsCode.MetadataSchemata.ValidationResult.html",
    "title": "Class ValidationResult\r\n   | DocFX website ",
    "keywords": "Class ValidationResult Inheritance Object ValidationResult Namespace :Microsoft.DocAsCode.MetadataSchemata Assembly :Microsoft.DocAsCode.MetadataSchemata.dll Syntax public class ValidationResult Fields Success Declaration public static readonly ValidationResult Success Properties Code Declaration public string Code { get; } Proverty Value Type Description String IsSuccess Declaration public bool IsSuccess { get; } Proverty Value Type Description Boolean Message Declaration public string Message { get; } Proverty Value Type Description String Path Declaration public string Path { get; } Proverty Value Type Description String Methods Fail(String, String, String) Declaration public static ValidationResult Fail(string code, string message, string path) Parameters Type Name Description String code String message String path Returns Type Description ValidationResult"
  },
  "api/Microsoft.DocAsCode.MetadataSchemata.ValidationErrorCodes.html": {
    "href": "api/Microsoft.DocAsCode.MetadataSchemata.ValidationErrorCodes.html",
    "title": "Class ValidationErrorCodes\r\n   | DocFX website ",
    "keywords": "Class ValidationErrorCodes Inheritance Object ValidationErrorCodes Namespace :Microsoft.DocAsCode.MetadataSchemata Assembly :Microsoft.DocAsCode.MetadataSchemata.dll Syntax public class ValidationErrorCodes"
  },
  "api/Microsoft.DocAsCode.MetadataSchemata.ValidationErrorCodes.WellknownMetadata.html": {
    "href": "api/Microsoft.DocAsCode.MetadataSchemata.ValidationErrorCodes.WellknownMetadata.html",
    "title": "Class ValidationErrorCodes.WellknownMetadata\r\n   | DocFX website ",
    "keywords": "Class ValidationErrorCodes.WellknownMetadata Inheritance Object ValidationErrorCodes.WellknownMetadata Namespace :Microsoft.DocAsCode.MetadataSchemata Assembly :Microsoft.DocAsCode.MetadataSchemata.dll Syntax public class WellknownMetadata Fields FieldRequired Declaration public const string FieldRequired UndefinedValue Declaration public const string UndefinedValue UnexpectedItemType Declaration public const string UnexpectedItemType UnexpectedType Declaration public const string UnexpectedType"
  },
  "api/Microsoft.DocAsCode.MetadataSchemata.ValidationErrorCodes.UnknownMetadata.html": {
    "href": "api/Microsoft.DocAsCode.MetadataSchemata.ValidationErrorCodes.UnknownMetadata.html",
    "title": "Class ValidationErrorCodes.UnknownMetadata\r\n   | DocFX website ",
    "keywords": "Class ValidationErrorCodes.UnknownMetadata Inheritance Object ValidationErrorCodes.UnknownMetadata Namespace :Microsoft.DocAsCode.MetadataSchemata Assembly :Microsoft.DocAsCode.MetadataSchemata.dll Syntax public class UnknownMetadata Fields BadNaming Declaration public const string BadNaming UnexpectedType Declaration public const string UnexpectedType"
  },
  "api/Microsoft.DocAsCode.MetadataSchemata.ValidationErrorCodes.Schema.html": {
    "href": "api/Microsoft.DocAsCode.MetadataSchemata.ValidationErrorCodes.Schema.html",
    "title": "Class ValidationErrorCodes.Schema\r\n   | DocFX website ",
    "keywords": "Class ValidationErrorCodes.Schema Inheritance Object ValidationErrorCodes.Schema Namespace :Microsoft.DocAsCode.MetadataSchemata Assembly :Microsoft.DocAsCode.MetadataSchemata.dll Syntax public class Schema Fields BadSchema Declaration public const string BadSchema UnexpectedType Declaration public const string UnexpectedType"
  },
  "api/Microsoft.DocAsCode.MetadataSchemata.SchemaValidators.html": {
    "href": "api/Microsoft.DocAsCode.MetadataSchemata.SchemaValidators.html",
    "title": "Namespace Microsoft.DocAsCode.MetadataSchemata.SchemaValidators\r\n   | DocFX website ",
    "keywords": "Namespace Microsoft.DocAsCode.MetadataSchemata.SchemaValidators Classes DefinitionObjectValidator UnknownNamingValidator UnknownTypeValidator ValidatorFactory WellknownChoiceSetValidator WellknownTypeValidator"
  },
  "api/Microsoft.DocAsCode.MetadataSchemata.SchemaValidators.WellknownTypeValidator.html": {
    "href": "api/Microsoft.DocAsCode.MetadataSchemata.SchemaValidators.WellknownTypeValidator.html",
    "title": "Class WellknownTypeValidator\r\n   | DocFX website ",
    "keywords": "Class WellknownTypeValidator Inheritance Object WellknownTypeValidator Namespace :Microsoft.DocAsCode.MetadataSchemata.SchemaValidators Assembly :Microsoft.DocAsCode.MetadataSchemata.dll Syntax public class WellknownTypeValidator : IWellknownMetadataValidator Methods Validate(String, IMetadataDefinition, JToken) Declaration public ValidationResult Validate(string path, IMetadataDefinition definition, JToken value) Parameters Type Name Description String path IMetadataDefinition definition Newtonsoft.Json.Linq.JToken value Returns Type Description ValidationResult"
  },
  "api/Microsoft.DocAsCode.MetadataSchemata.SchemaValidators.WellknownChoiceSetValidator.html": {
    "href": "api/Microsoft.DocAsCode.MetadataSchemata.SchemaValidators.WellknownChoiceSetValidator.html",
    "title": "Class WellknownChoiceSetValidator\r\n   | DocFX website ",
    "keywords": "Class WellknownChoiceSetValidator Inheritance Object WellknownChoiceSetValidator Namespace :Microsoft.DocAsCode.MetadataSchemata.SchemaValidators Assembly :Microsoft.DocAsCode.MetadataSchemata.dll Syntax public class WellknownChoiceSetValidator : IWellknownMetadataValidator Methods Validate(String, IMetadataDefinition, JToken) Declaration public ValidationResult Validate(string path, IMetadataDefinition definition, JToken value) Parameters Type Name Description String path IMetadataDefinition definition Newtonsoft.Json.Linq.JToken value Returns Type Description ValidationResult"
  },
  "api/Microsoft.DocAsCode.MetadataSchemata.SchemaValidators.ValidatorFactory.html": {
    "href": "api/Microsoft.DocAsCode.MetadataSchemata.SchemaValidators.ValidatorFactory.html",
    "title": "Class ValidatorFactory\r\n   | DocFX website ",
    "keywords": "Class ValidatorFactory Inheritance Object ValidatorFactory Namespace :Microsoft.DocAsCode.MetadataSchemata.SchemaValidators Assembly :Microsoft.DocAsCode.MetadataSchemata.dll Syntax public class ValidatorFactory Methods Then(IWellknownMetadataValidator, IWellknownMetadataValidator) Declaration public static IWellknownMetadataValidator Then(IWellknownMetadataValidator validator, IWellknownMetadataValidator next) Parameters Type Name Description IWellknownMetadataValidator validator IWellknownMetadataValidator next Returns Type Description IWellknownMetadataValidator"
  },
  "api/Microsoft.DocAsCode.MetadataSchemata.SchemaValidators.UnknownTypeValidator.html": {
    "href": "api/Microsoft.DocAsCode.MetadataSchemata.SchemaValidators.UnknownTypeValidator.html",
    "title": "Class UnknownTypeValidator\r\n   | DocFX website ",
    "keywords": "Class UnknownTypeValidator Inheritance Object UnknownTypeValidator Namespace :Microsoft.DocAsCode.MetadataSchemata.SchemaValidators Assembly :Microsoft.DocAsCode.MetadataSchemata.dll Syntax public class UnknownTypeValidator : IUnknownMetadataValidator Methods Validate(String, JToken) Declaration public ValidationResult Validate(string name, JToken value) Parameters Type Name Description String name Newtonsoft.Json.Linq.JToken value Returns Type Description ValidationResult"
  },
  "api/Microsoft.DocAsCode.MetadataSchemata.SchemaValidators.UnknownNamingValidator.html": {
    "href": "api/Microsoft.DocAsCode.MetadataSchemata.SchemaValidators.UnknownNamingValidator.html",
    "title": "Class UnknownNamingValidator\r\n   | DocFX website ",
    "keywords": "Class UnknownNamingValidator Inheritance Object UnknownNamingValidator Namespace :Microsoft.DocAsCode.MetadataSchemata.SchemaValidators Assembly :Microsoft.DocAsCode.MetadataSchemata.dll Syntax public class UnknownNamingValidator : IUnknownMetadataValidator Methods Validate(String, JToken) Declaration public ValidationResult Validate(string name, JToken value) Parameters Type Name Description String name Newtonsoft.Json.Linq.JToken value Returns Type Description ValidationResult"
  },
  "api/Microsoft.DocAsCode.MetadataSchemata.SchemaValidators.DefinitionObjectValidator.html": {
    "href": "api/Microsoft.DocAsCode.MetadataSchemata.SchemaValidators.DefinitionObjectValidator.html",
    "title": "Class DefinitionObjectValidator\r\n   | DocFX website ",
    "keywords": "Class DefinitionObjectValidator Inheritance Object DefinitionObjectValidator Namespace :Microsoft.DocAsCode.MetadataSchemata.SchemaValidators Assembly :Microsoft.DocAsCode.MetadataSchemata.dll Syntax public class DefinitionObjectValidator : IUnknownMetadataValidator Methods Validate(String, JToken) Declaration public ValidationResult Validate(string name, JToken value) Parameters Type Name Description String name Newtonsoft.Json.Linq.JToken value Returns Type Description ValidationResult"
  },
  "api/Microsoft.DocAsCode.MetadataSchemata.QueryNameAttribute.html": {
    "href": "api/Microsoft.DocAsCode.MetadataSchemata.QueryNameAttribute.html",
    "title": "Class QueryNameAttribute\r\n   | DocFX website ",
    "keywords": "Class QueryNameAttribute Inheritance Object Attribute QueryNameAttribute Namespace :Microsoft.DocAsCode.MetadataSchemata Assembly :Microsoft.DocAsCode.MetadataSchemata.dll Syntax public class QueryNameAttribute : Attribute, _Attribute Constructors QueryNameAttribute(String) Declaration public QueryNameAttribute(string name) Parameters Type Name Description String name Properties Name Declaration public virtual string Name { get; protected set; } Proverty Value Type Description String"
  },
  "api/Microsoft.DocAsCode.MetadataSchemata.MetadataParser.html": {
    "href": "api/Microsoft.DocAsCode.MetadataSchemata.MetadataParser.html",
    "title": "Class MetadataParser\r\n   | DocFX website ",
    "keywords": "Class MetadataParser Inheritance Object MetadataParser Namespace :Microsoft.DocAsCode.MetadataSchemata Assembly :Microsoft.DocAsCode.MetadataSchemata.dll Syntax public class MetadataParser Methods GetMetadataSchema() Declaration public static IMetadataSchema GetMetadataSchema() Returns Type Description IMetadataSchema Load(String) Declaration public static IMetadataSchema Load(string content) Parameters Type Name Description String content Returns Type Description IMetadataSchema"
  },
  "api/Microsoft.DocAsCode.MetadataSchemata.MetadataCompiler.html": {
    "href": "api/Microsoft.DocAsCode.MetadataSchemata.MetadataCompiler.html",
    "title": "Class MetadataCompiler\r\n   | DocFX website ",
    "keywords": "Class MetadataCompiler Inheritance Object MetadataCompiler Namespace :Microsoft.DocAsCode.MetadataSchemata Assembly :Microsoft.DocAsCode.MetadataSchemata.dll Syntax public class MetadataCompiler Properties CollectionType Declaration public Type CollectionType { get; set; } Proverty Value Type Description Type EmptyTypes Declaration public static Type[] EmptyTypes { get; } Proverty Value Type Description Type [] NameOfAdditional Declaration public string NameOfAdditional { get; set; } Proverty Value Type Description String Namer Declaration public Func<string, string> Namer { get; set; } Proverty Value Type Description System.Func < String , String > ShouldEmitAdditional Declaration public bool ShouldEmitAdditional { get; set; } Proverty Value Type Description Boolean Methods Compile(IMetadataSchema, ModuleBuilder, String, String) Declaration public Type Compile(IMetadataSchema schema, ModuleBuilder module, string namespace, string typeName) Parameters Type Name Description IMetadataSchema schema ModuleBuilder module String namespace String typeName Returns Type Description Type Compile(IMetadataSchema, String, String, String) Declaration public void Compile(IMetadataSchema schema, string assemblyName, string namespace, string typeName) Parameters Type Name Description IMetadataSchema schema String assemblyName String namespace String typeName CompileCore(IMetadataSchema, ModuleBuilder, String, String) Declaration public Type CompileCore(IMetadataSchema schema, ModuleBuilder module, string namespace, string typeName) Parameters Type Name Description IMetadataSchema schema ModuleBuilder module String namespace String typeName Returns Type Description Type"
  },
  "api/Microsoft.DocAsCode.MetadataSchemata.IWellknownMetadataValidator.html": {
    "href": "api/Microsoft.DocAsCode.MetadataSchemata.IWellknownMetadataValidator.html",
    "title": "Interface IWellknownMetadataValidator\r\n   | DocFX website ",
    "keywords": "Interface IWellknownMetadataValidator Namespace :Microsoft.DocAsCode.MetadataSchemata Assembly :Microsoft.DocAsCode.MetadataSchemata.dll Syntax public interface IWellknownMetadataValidator Methods Validate(String, IMetadataDefinition, JToken) Declaration ValidationResult Validate(string path, IMetadataDefinition definition, JToken value) Parameters Type Name Description String path IMetadataDefinition definition Newtonsoft.Json.Linq.JToken value Returns Type Description ValidationResult"
  },
  "api/Microsoft.DocAsCode.MetadataSchemata.IUnknownMetadataValidator.html": {
    "href": "api/Microsoft.DocAsCode.MetadataSchemata.IUnknownMetadataValidator.html",
    "title": "Interface IUnknownMetadataValidator\r\n   | DocFX website ",
    "keywords": "Interface IUnknownMetadataValidator Namespace :Microsoft.DocAsCode.MetadataSchemata Assembly :Microsoft.DocAsCode.MetadataSchemata.dll Syntax public interface IUnknownMetadataValidator Methods Validate(String, JToken) Declaration ValidationResult Validate(string name, JToken value) Parameters Type Name Description String name Newtonsoft.Json.Linq.JToken value Returns Type Description ValidationResult"
  },
  "api/Microsoft.DocAsCode.MetadataSchemata.IMetadataSchema.html": {
    "href": "api/Microsoft.DocAsCode.MetadataSchemata.IMetadataSchema.html",
    "title": "Interface IMetadataSchema\r\n   | DocFX website ",
    "keywords": "Interface IMetadataSchema Namespace :Microsoft.DocAsCode.MetadataSchemata Assembly :Microsoft.DocAsCode.MetadataSchemata.dll Syntax public interface IMetadataSchema Properties Definitions Declaration IReadOnlyDictionary<string, IMetadataDefinition> Definitions { get; } Proverty Value Type Description System.Collections.Generic.IReadOnlyDictionary < String , IMetadataDefinition > Methods ValidateMetadata(String) Declaration ValidationResults ValidateMetadata(string metadata) Parameters Type Name Description String metadata Returns Type Description ValidationResults"
  },
  "api/Microsoft.DocAsCode.MetadataSchemata.IMetadataDefinition.html": {
    "href": "api/Microsoft.DocAsCode.MetadataSchemata.IMetadataDefinition.html",
    "title": "Interface IMetadataDefinition\r\n   | DocFX website ",
    "keywords": "Interface IMetadataDefinition Namespace :Microsoft.DocAsCode.MetadataSchemata Assembly :Microsoft.DocAsCode.MetadataSchemata.dll Syntax public interface IMetadataDefinition Properties ChoiceSet Declaration List<JValue> ChoiceSet { get; } Proverty Value Type Description System.Collections.Generic.List < Newtonsoft.Json.Linq.JValue > Description Declaration string Description { get; } Proverty Value Type Description String DisplayName Declaration string DisplayName { get; } Proverty Value Type Description String IsMultiValued Declaration bool IsMultiValued { get; } Proverty Value Type Description Boolean IsQueryable Declaration bool IsQueryable { get; } Proverty Value Type Description Boolean IsRequired Declaration bool IsRequired { get; } Proverty Value Type Description Boolean IsVisible Declaration bool IsVisible { get; } Proverty Value Type Description Boolean QueryName Declaration string QueryName { get; } Proverty Value Type Description String Type Declaration string Type { get; } Proverty Value Type Description String"
  },
  "api/Microsoft.DocAsCode.MetadataSchemata.DisplayNameAttribute.html": {
    "href": "api/Microsoft.DocAsCode.MetadataSchemata.DisplayNameAttribute.html",
    "title": "Class DisplayNameAttribute\r\n   | DocFX website ",
    "keywords": "Class DisplayNameAttribute Inheritance Object Attribute DisplayNameAttribute Namespace :Microsoft.DocAsCode.MetadataSchemata Assembly :Microsoft.DocAsCode.MetadataSchemata.dll Syntax public class DisplayNameAttribute : Attribute, _Attribute Constructors DisplayNameAttribute(String) Declaration public DisplayNameAttribute(string name) Parameters Type Name Description String name Properties Name Declaration public virtual string Name { get; protected set; } Proverty Value Type Description String"
  },
  "api/Microsoft.DocAsCode.MetadataJsonItemConfig.html": {
    "href": "api/Microsoft.DocAsCode.MetadataJsonItemConfig.html",
    "title": "Class MetadataJsonItemConfig\r\n   | DocFX website ",
    "keywords": "Class MetadataJsonItemConfig Inheritance Object MetadataJsonItemConfig Namespace :Microsoft.DocAsCode Assembly :docfx.dll Syntax public class MetadataJsonItemConfig Properties Destination Declaration [JsonProperty(\"dest\")] public string Destination { get; set; } Proverty Value Type Description String Force Declaration [JsonProperty(\"force\")] public bool ? Force { get; set; } Proverty Value Type Description System.Nullable < Boolean > Raw Declaration [JsonProperty(\"raw\")] public bool ? Raw { get; set; } Proverty Value Type Description System.Nullable < Boolean > Source Declaration [JsonProperty(\"src\")] public FileMapping Source { get; set; } Proverty Value Type Description FileMapping"
  },
  "api/Microsoft.DocAsCode.MetadataJsonConfig.html": {
    "href": "api/Microsoft.DocAsCode.MetadataJsonConfig.html",
    "title": "Class MetadataJsonConfig\r\n   | DocFX website ",
    "keywords": "Class MetadataJsonConfig Inheritance Object System.Collections.Generic.List < MetadataJsonItemConfig > MetadataJsonConfig Namespace :Microsoft.DocAsCode Assembly :docfx.dll Syntax public class MetadataJsonConfig : List<MetadataJsonItemConfig>, IList<MetadataJsonItemConfig>, ICollection<MetadataJsonItemConfig>, IList, ICollection, IReadOnlyList<MetadataJsonItemConfig>, IReadOnlyCollection<MetadataJsonItemConfig>, IEnumerable<MetadataJsonItemConfig>, IEnumerable Constructors MetadataJsonConfig(MetadataJsonItemConfig[]) Declaration public MetadataJsonConfig(params MetadataJsonItemConfig[] configs) Parameters Type Name Description MetadataJsonItemConfig [] configs MetadataJsonConfig(IEnumerable<MetadataJsonItemConfig>) Declaration public MetadataJsonConfig(IEnumerable<MetadataJsonItemConfig> configs) Parameters Type Name Description System.Collections.Generic.IEnumerable < MetadataJsonItemConfig > configs Properties BaseDirectory Declaration [JsonIgnore] public string BaseDirectory { get; set; } Proverty Value Type Description String Force Declaration [JsonIgnore] public bool Force { get; set; } Proverty Value Type Description Boolean OutputFolder Declaration [JsonIgnore] public string OutputFolder { get; set; } Proverty Value Type Description String Raw Declaration [JsonIgnore] public bool Raw { get; set; } Proverty Value Type Description Boolean"
  },
  "api/Microsoft.DocAsCode.MergeJsonConfig.html": {
    "href": "api/Microsoft.DocAsCode.MergeJsonConfig.html",
    "title": "Class MergeJsonConfig\r\n   | DocFX website ",
    "keywords": "Class MergeJsonConfig Inheritance Object MergeJsonConfig Namespace :Microsoft.DocAsCode Assembly :docfx.dll Syntax [Serializable] public class MergeJsonConfig Properties BaseDirectory Declaration [JsonIgnore] public string BaseDirectory { get; set; } Proverty Value Type Description String Content Declaration [JsonProperty(\"content\")] public FileMapping Content { get; set; } Proverty Value Type Description FileMapping Destination Declaration [JsonProperty(\"dest\")] public string Destination { get; set; } Proverty Value Type Description String FileMetadata Metadata that applies to some specific files. The key is the metadata name. For each item of the value: The key is the glob pattern to match the files. The value is the value of the metadata. Declaration [JsonProperty(\"fileMetadata\")] public Dictionary<string, FileMetadataPairs> FileMetadata { get; set; } Proverty Value Type Description System.Collections.Generic.Dictionary < String , FileMetadataPairs > GlobalMetadata Declaration [JsonProperty(\"globalMetadata\")] [JsonConverter(typeof (JObjectDictionaryToObjectDictionaryConverter))] public Dictionary<string, object> GlobalMetadata { get; set; } Proverty Value Type Description System.Collections.Generic.Dictionary < String , Object > OutputFolder Declaration [JsonIgnore] public string OutputFolder { get; set; } Proverty Value Type Description String"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.html",
    "title": "Namespace Microsoft.DocAsCode.MarkdownLite\r\n   | DocFX website ",
    "keywords": "Namespace Microsoft.DocAsCode.MarkdownLite Classes GfmDelInlineRule GfmDelInlineToken GfmEngineBuilder GfmEscapeInlineRule GfmFencesBlockRule GfmHeadingBlockRule GfmParagraphBlockRule GfmTextInlineRule GfmUrlInlineRule HtmlRenderer The html renderer for gfm. InlineContent LinkObj MarkdownAutoLinkInlineRule MarkdownBlockContext MarkdownBlockquoteBlockRule MarkdownBlockquoteBlockToken MarkdownBrInlineRule MarkdownBrInlineToken MarkdownCodeBlockRule MarkdownCodeBlockToken MarkdownCodeInlineRule MarkdownCodeInlineToken MarkdownCommentInlineRule MarkdownDefBlockRule MarkdownEmInlineRule MarkdownEmInlineToken MarkdownEngine MarkdownEngineBuilder A builder for create an instance of IMarkdownEngine MarkdownEngineByOptionsBuilder MarkdownEscapeInlineRule MarkdownEscapeInlineToken MarkdownHeadingBlockRule MarkdownHeadingBlockToken MarkdownHrBlockRule MarkdownHrBlockToken MarkdownHtmlBlockRule MarkdownHtmlBlockToken MarkdownIgnoreToken MarkdownImageInlineToken MarkdownInlineContext MarkdownLHeadingBlockRule MarkdownLinkBaseInlineRule MarkdownLinkInlineRule MarkdownLinkInlineToken MarkdownListBlockRule MarkdownListBlockToken MarkdownListItemBlockToken MarkdownNewLineBlockRule MarkdownNewLineBlockToken MarkdownNoLinkInlineRule MarkdownNonParagraphBlockToken MarkdownNpTableBlockRule MarkdownParagraphBlockRule MarkdownParagraphBlockToken MarkdownParser MarkdownParserExtensions MarkdownRawToken MarkdownRefLinkInlineRule MarkdownRenderer MarkdownRendererAdapter The adapter for markdown renderer, use dynamic dispatch. MarkdownRewriteEngine MarkdownStrongInlineRule MarkdownStrongInlineToken MarkdownTableBlockRule MarkdownTableBlockToken MarkdownTagInlineRule MarkdownTagInlineToken MarkdownTextBlockRule MarkdownTextInlineRule MarkdownTextToken MarkdownTokenRewriterFactory MarkdownTokenValidatorFactory Options StringBuffer A type like System.Text.StringBuilder but only do concat. StringHelper TokenHelper TwoPhaseBlockToken Interfaces IMarkdownContext The context for markdown parser. It should be immutable. IMarkdownEngine Markdown engine IMarkdownParser Markdown parser. IMarkdownRenderer Markdown renderer. IMarkdownRewritable <T> Markdown rewritable (for object contains IMarkdownToken ). IMarkdownRewriteEngine Markdown rewrite engine. IMarkdownRule Markdown rule. IMarkdownToken The token for markdown. It should be immutable. IMarkdownTokenRewriter rewrite the markdown when rendering IMarkdownTokenValidator IMarkdownTokenValidatorProvider Enums Align"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.TwoPhaseBlockToken.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.TwoPhaseBlockToken.html",
    "title": "Class TwoPhaseBlockToken\r\n   | DocFX website ",
    "keywords": "Class TwoPhaseBlockToken Inheritance Object TwoPhaseBlockToken Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public sealed class TwoPhaseBlockToken : IMarkdownToken Constructors TwoPhaseBlockToken(IMarkdownRule, IMarkdownContext, String, Func<IMarkdownParser, TwoPhaseBlockToken, IMarkdownToken>) Declaration public TwoPhaseBlockToken(IMarkdownRule rule, IMarkdownContext context, string rawMarkdown, Func<IMarkdownParser, TwoPhaseBlockToken, IMarkdownToken> extractor) Parameters Type Name Description IMarkdownRule rule IMarkdownContext context String rawMarkdown System.Func < IMarkdownParser , TwoPhaseBlockToken , IMarkdownToken > extractor Properties Context Declaration public IMarkdownContext Context { get; } Proverty Value Type Description IMarkdownContext RawMarkdown Declaration public string RawMarkdown { get; set; } Proverty Value Type Description String Rule Declaration public IMarkdownRule Rule { get; } Proverty Value Type Description IMarkdownRule Methods Extract(IMarkdownParser) Declaration public IMarkdownToken Extract(IMarkdownParser parser) Parameters Type Name Description IMarkdownParser parser Returns Type Description IMarkdownToken"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.TokenHelper.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.TokenHelper.html",
    "title": "Class TokenHelper\r\n   | DocFX website ",
    "keywords": "Class TokenHelper Inheritance Object TokenHelper Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class TokenHelper Methods ParseInlineToken(IMarkdownParser, IMarkdownRule, ImmutableArray<IMarkdownToken>, Boolean) Declaration public static ImmutableArray<IMarkdownToken> ParseInlineToken(IMarkdownParser parser, IMarkdownRule rule, ImmutableArray<IMarkdownToken> blockTokens, bool wrapParagraph) Parameters Type Name Description IMarkdownParser parser IMarkdownRule rule System.Collections.Immutable.ImmutableArray < IMarkdownToken > blockTokens Boolean wrapParagraph Returns Type Description System.Collections.Immutable.ImmutableArray < IMarkdownToken >"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.StringHelper.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.StringHelper.html",
    "title": "Class StringHelper\r\n   | DocFX website ",
    "keywords": "Class StringHelper Inheritance Object StringHelper Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class StringHelper Methods Apply(Regex, String, Int32) Declaration public static string[] Apply(Regex regex, string src, int index = 0) Parameters Type Name Description Regex regex String src Int32 index Returns Type Description String [] DecodeURIComponent(String) Declaration public static string DecodeURIComponent(string str) Parameters Type Name Description String str Returns Type Description String Escape(String, Boolean) Declaration public static string Escape(string html, bool encode = false) Parameters Type Name Description String html Boolean encode Returns Type Description String HtmlDecode(String) Declaration public static string HtmlDecode(string html) Parameters Type Name Description String html Returns Type Description String HtmlEncode(String) Declaration public static string HtmlEncode(string html) Parameters Type Name Description String html Returns Type Description String Match(String, Regex) Declaration public static string[] Match(string src, Regex regex) Parameters Type Name Description String src Regex regex Returns Type Description String [] NotEmpty(IList<String>, Int32, Int32) Declaration public static string NotEmpty(IList<string> source, int index1, int index2) Parameters Type Name Description System.Collections.Generic.IList < String > source Int32 index1 Int32 index2 Returns Type Description String ReplaceRegex(String, Regex, String) Declaration public static string ReplaceRegex(string input, Regex pattern, string replacement) Parameters Type Name Description String input Regex pattern String replacement Returns Type Description String SplitRegex(String, Regex) Declaration public static string[] SplitRegex(string input, Regex pattern) Parameters Type Name Description String input Regex pattern Returns Type Description String [] Unescape(String) Declaration public static string Unescape(string html) Parameters Type Name Description String html Returns Type Description String"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.StringBuffer.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.StringBuffer.html",
    "title": "Class StringBuffer\r\n   | DocFX website ",
    "keywords": "Class StringBuffer A type like System.Text.StringBuilder but only do concat. Inheritance Object StringBuffer Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public sealed class StringBuffer Fields Empty An empty StringBuffer . Declaration public static readonly StringBuffer Empty Methods Append(String) Declaration public StringBuffer Append(string str) Parameters Type Name Description String str Returns Type Description StringBuffer Clone() Declaration public StringBuffer Clone() Returns Type Description StringBuffer Concat(StringBuffer) Declaration public StringBuffer Concat(StringBuffer another) Parameters Type Name Description StringBuffer another Returns Type Description StringBuffer GetLength() Declaration public int GetLength() Returns Type Description Int32 ToString() Declaration public override string ToString() Returns Type Description String Operators Addition(StringBuffer, StringBuffer) Declaration public static StringBuffer operator +(StringBuffer buffer, StringBuffer another) Parameters Type Name Description StringBuffer buffer StringBuffer another Returns Type Description StringBuffer Addition(StringBuffer, String) Declaration public static StringBuffer operator +(StringBuffer buffer, string value) Parameters Type Name Description StringBuffer buffer String value Returns Type Description StringBuffer Implicit(StringBuffer to String) Declaration public static implicit operator string (StringBuffer buffer) Parameters Type Name Description StringBuffer buffer Returns Type Description String Implicit(String to StringBuffer) Declaration public static implicit operator StringBuffer(string value) Parameters Type Name Description String value Returns Type Description StringBuffer"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.Options.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.Options.html",
    "title": "Class Options\r\n   | DocFX website ",
    "keywords": "Class Options Inheritance Object Options Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class Options Constructors Options() Declaration public Options() Properties Breaks Declaration public bool Breaks { get; set; } Proverty Value Type Description Boolean Gfm Declaration public bool Gfm { get; set; } Proverty Value Type Description Boolean HeaderPrefix Declaration public string HeaderPrefix { get; set; } Proverty Value Type Description String Highlight Declaration public Func<string, string, string> Highlight { get; set; } Proverty Value Type Description System.Func < String , String , String > LangPrefix Declaration public string LangPrefix { get; set; } Proverty Value Type Description String Mangle Declaration public bool Mangle { get; set; } Proverty Value Type Description Boolean Pedantic Declaration public bool Pedantic { get; set; } Proverty Value Type Description Boolean Sanitize Declaration public bool Sanitize { get; set; } Proverty Value Type Description Boolean Sanitizer Declaration public Func<string, string> Sanitizer { get; set; } Proverty Value Type Description System.Func < String , String > SmartLists Declaration public bool SmartLists { get; set; } Proverty Value Type Description Boolean Smartypants Declaration public bool Smartypants { get; set; } Proverty Value Type Description Boolean Tables Declaration public bool Tables { get; set; } Proverty Value Type Description Boolean XHtml Declaration public bool XHtml { get; set; } Proverty Value Type Description Boolean"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownTokenValidatorFactory.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownTokenValidatorFactory.html",
    "title": "Class MarkdownTokenValidatorFactory\r\n   | DocFX website ",
    "keywords": "Class MarkdownTokenValidatorFactory Inheritance Object MarkdownTokenValidatorFactory Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownTokenValidatorFactory Methods FromLambda<TToken>(Action<TToken>) Declaration public static IMarkdownTokenValidator FromLambda<TToken>(Action<TToken> validator)where TToken : class, IMarkdownToken Parameters Type Name Description System.Action <TToken> validator Returns Type Description IMarkdownTokenValidator"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownTokenRewriterFactory.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownTokenRewriterFactory.html",
    "title": "Class MarkdownTokenRewriterFactory\r\n   | DocFX website ",
    "keywords": "Class MarkdownTokenRewriterFactory Inheritance Object MarkdownTokenRewriterFactory Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownTokenRewriterFactory Fields MarkdownTokenRewriterFactory Declaration public static readonly IMarkdownTokenRewriter Null Methods Composite(IMarkdownTokenRewriter[]) Declaration public static IMarkdownTokenRewriter Composite(params IMarkdownTokenRewriter[] rewriters) Parameters Type Name Description IMarkdownTokenRewriter [] rewriters Returns Type Description IMarkdownTokenRewriter Composite(IEnumerable<IMarkdownTokenRewriter>) Declaration public static IMarkdownTokenRewriter Composite(IEnumerable<IMarkdownTokenRewriter> rewriters) Parameters Type Name Description System.Collections.Generic.IEnumerable < IMarkdownTokenRewriter > rewriters Returns Type Description IMarkdownTokenRewriter FromLambda<TEngine, TToken>(Func<TEngine, TToken, IMarkdownToken>) Declaration public static IMarkdownTokenRewriter FromLambda<TEngine, TToken>(Func<TEngine, TToken, IMarkdownToken> rewriteFunc)where TEngine : class, IMarkdownRewriteEngine where TToken : class, IMarkdownToken Parameters Type Name Description System.Func <TEngine, TToken, IMarkdownToken > rewriteFunc Returns Type Description IMarkdownTokenRewriter FromValidators(IMarkdownTokenValidator[]) Declaration public static IMarkdownTokenRewriter FromValidators(params IMarkdownTokenValidator[] validators) Parameters Type Name Description IMarkdownTokenValidator [] validators Returns Type Description IMarkdownTokenRewriter FromValidators(IEnumerable<IMarkdownTokenValidator>) Declaration public static IMarkdownTokenRewriter FromValidators(IEnumerable<IMarkdownTokenValidator> validators) Parameters Type Name Description System.Collections.Generic.IEnumerable < IMarkdownTokenValidator > validators Returns Type Description IMarkdownTokenRewriter Loop(IMarkdownTokenRewriter, Int32) Declaration public static IMarkdownTokenRewriter Loop(IMarkdownTokenRewriter rewriter, int maxLoopCount) Parameters Type Name Description IMarkdownTokenRewriter rewriter Int32 maxLoopCount Returns Type Description IMarkdownTokenRewriter Sequence(IMarkdownTokenRewriter[]) Declaration public static IMarkdownTokenRewriter Sequence(params IMarkdownTokenRewriter[] rewriters) Parameters Type Name Description IMarkdownTokenRewriter [] rewriters Returns Type Description IMarkdownTokenRewriter"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownTextToken.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownTextToken.html",
    "title": "Class MarkdownTextToken\r\n   | DocFX website ",
    "keywords": "Class MarkdownTextToken Inheritance Object MarkdownTextToken Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownTextToken : IMarkdownToken Constructors MarkdownTextToken(IMarkdownRule, IMarkdownContext, String, String) Declaration public MarkdownTextToken(IMarkdownRule rule, IMarkdownContext context, string content, string rawMarkdown) Parameters Type Name Description IMarkdownRule rule IMarkdownContext context String content String rawMarkdown Properties Content Declaration public string Content { get; } Proverty Value Type Description String Context Declaration public IMarkdownContext Context { get; } Proverty Value Type Description IMarkdownContext RawMarkdown Declaration public string RawMarkdown { get; set; } Proverty Value Type Description String Rule Declaration public IMarkdownRule Rule { get; } Proverty Value Type Description IMarkdownRule"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownTextInlineRule.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownTextInlineRule.html",
    "title": "Class MarkdownTextInlineRule\r\n   | DocFX website ",
    "keywords": "Class MarkdownTextInlineRule Inheritance Object MarkdownTextInlineRule Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownTextInlineRule : IMarkdownRule Properties Name Declaration public string Name { get; } Proverty Value Type Description String Text Declaration public virtual Regex Text { get; } Proverty Value Type Description Regex Methods Smartypants(Options, String) Smartypants Transformations Declaration protected virtual string Smartypants(Options options, string text) Parameters Type Name Description Options options String text Returns Type Description String TryMatch(IMarkdownParser, ref String) Declaration public virtual IMarkdownToken TryMatch(IMarkdownParser engine, ref string source) Parameters Type Name Description IMarkdownParser engine String source Returns Type Description IMarkdownToken"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownTextBlockRule.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownTextBlockRule.html",
    "title": "Class MarkdownTextBlockRule\r\n   | DocFX website ",
    "keywords": "Class MarkdownTextBlockRule Inheritance Object MarkdownTextBlockRule Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownTextBlockRule : IMarkdownRule Properties Name Declaration public string Name { get; } Proverty Value Type Description String Text Declaration public virtual Regex Text { get; } Proverty Value Type Description Regex Methods TryMatch(IMarkdownParser, ref String) Declaration public virtual IMarkdownToken TryMatch(IMarkdownParser engine, ref string source) Parameters Type Name Description IMarkdownParser engine String source Returns Type Description IMarkdownToken"
  },
  "api/Microsoft.DocAsCode.EntityModel.TreeIterator.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.TreeIterator.html",
    "title": "Class TreeIterator\r\n   | DocFX website ",
    "keywords": "Class TreeIterator Inheritance Object TreeIterator Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class TreeIterator Methods Preorder<T>(T, T, Func<T, IEnumerable<T>>, Func<T, T, Boolean>) Declaration public static void Preorder<T>(T current, T parent, Func<T, IEnumerable<T>> childrenGetter, Func<T, T, bool> action) Parameters Type Name Description T current T parent System.Func <T, System.Collections.Generic.IEnumerable <T>> childrenGetter System.Func <T, T, Boolean > action PreorderAsync<T>(T, T, Func<T, IEnumerable<T>>, Func<T, T, Task<Boolean>>) Declaration public static Task PreorderAsync<T>(T current, T parent, Func<T, IEnumerable<T>> childrenGetter, Func<T, T, Task<bool>> action) Parameters Type Name Description T current T parent System.Func <T, System.Collections.Generic.IEnumerable <T>> childrenGetter System.Func <T, T, System.Threading.Tasks.Task < Boolean >> action Returns Type Description Task PreorderFirstOrDefault<T>(T, Func<T, IEnumerable<T>>, Func<T, Boolean>) Declaration public static T PreorderFirstOrDefault<T>(T current, Func<T, IEnumerable<T>> childrenGetter, Func<T, bool> predicate) Parameters Type Name Description T current System.Func <T, System.Collections.Generic.IEnumerable <T>> childrenGetter System.Func <T, Boolean > predicate Returns Type Description T"
  },
  "api/Microsoft.DocAsCode.html": {
    "href": "api/Microsoft.DocAsCode.html",
    "title": "Namespace Microsoft.DocAsCode\r\n   | DocFX website ",
    "keywords": "Namespace Microsoft.DocAsCode Classes AssemblyLicenseAttribute AssemblyUsageAttribute BuildJsonConfig CascadableOptions CustomAssemblyTextAttribute FileItems FileMapping FileMapping supports three forms: Object form This form supports multiple name-files file mappings, with the property name as the name, and the value as the files. e.g. projects: { \"name1\": [\"file1\", \"file2\"], \"name2\": \"file3\" } Array form This form supports multiple name-files file mappings, and also allows additional properties per mapping. e.g. projects: [ {name: \"name1\", files: [\"file1\", \"file2\"]}, {name: \"name2\", files: \"file3\"}, {files: [\"file4\", \"file5\"], exclude: [\"file5\"]} ] Compact form This form supports multiple file patterns in an array e.g. projects: [\"file1\", \"file2\"] FileMappingConverter FileMappingItem Data model for a file-mapping item FileMetadataPairs FileMetadataPairsConverter FileMetadataPairsItem ListWithStringFallback ListWithStringFallbackConverter MergeJsonConfig MetadataJsonConfig MetadataJsonItemConfig OptionUsageAttribute"
  },
  "api/Microsoft.DocAsCode.YamlSerialization.html": {
    "href": "api/Microsoft.DocAsCode.YamlSerialization.html",
    "title": "Namespace Microsoft.DocAsCode.YamlSerialization\r\n   | DocFX website ",
    "keywords": "Namespace Microsoft.DocAsCode.YamlSerialization Classes ExtensibleMemberAttribute YamlDeserializer A façade for the YAML library with the standard configuration. YamlSerializer"
  },
  "api/Microsoft.DocAsCode.YamlSerialization.YamlSerializer.html": {
    "href": "api/Microsoft.DocAsCode.YamlSerialization.YamlSerializer.html",
    "title": "Class YamlSerializer\r\n   | DocFX website ",
    "keywords": "Class YamlSerializer Inheritance Object YamlSerializer Namespace :Microsoft.DocAsCode.YamlSerialization Assembly :Microsoft.DocAsCode.YamlSerialization.dll Syntax public class YamlSerializer Constructors YamlSerializer(SerializationOptions, INamingConvention) Declaration public YamlSerializer(SerializationOptions options = SerializationOptions.None, INamingConvention namingConvention = null) Parameters Type Name Description YamlDotNet.Serialization.SerializationOptions options YamlDotNet.Serialization.INamingConvention namingConvention Methods Serialize(TextWriter, Object) Declaration public void Serialize(TextWriter writer, object graph) Parameters Type Name Description TextWriter writer Object graph Serialize(IEmitter, Object) Declaration public void Serialize(IEmitter emitter, object graph) Parameters Type Name Description YamlDotNet.Core.IEmitter emitter Object graph"
  },
  "api/Microsoft.DocAsCode.YamlSerialization.YamlDeserializer.html": {
    "href": "api/Microsoft.DocAsCode.YamlSerialization.YamlDeserializer.html",
    "title": "Class YamlDeserializer\r\n   | DocFX website ",
    "keywords": "Class YamlDeserializer A façade for the YAML library with the standard configuration. Inheritance Object YamlDeserializer Namespace :Microsoft.DocAsCode.YamlSerialization Assembly :Microsoft.DocAsCode.YamlSerialization.dll Syntax public sealed class YamlDeserializer Constructors YamlDeserializer(IObjectFactory, INamingConvention, Boolean, Boolean) Declaration public YamlDeserializer(IObjectFactory objectFactory = null, INamingConvention namingConvention = null, bool ignoreUnmatched = false, bool ignoreNotFoundAnchor = true) Parameters Type Name Description YamlDotNet.Serialization.IObjectFactory objectFactory YamlDotNet.Serialization.INamingConvention namingConvention Boolean ignoreUnmatched Boolean ignoreNotFoundAnchor Properties NodeDeserializers Declaration public IList<INodeDeserializer> NodeDeserializers { get; } Proverty Value Type Description System.Collections.Generic.IList < YamlDotNet.Serialization.INodeDeserializer > TypeResolvers Declaration public IList<INodeTypeResolver> TypeResolvers { get; } Proverty Value Type Description System.Collections.Generic.IList < YamlDotNet.Serialization.INodeTypeResolver > ValueDeserializer Declaration public IValueDeserializer ValueDeserializer { get; } Proverty Value Type Description YamlDotNet.Serialization.IValueDeserializer Methods Deserialize(TextReader, Type, IValueDeserializer) Declaration public object Deserialize(TextReader input, Type type, IValueDeserializer deserializer = null) Parameters Type Name Description TextReader input Type type YamlDotNet.Serialization.IValueDeserializer deserializer Returns Type Description Object Deserialize(TextReader, IValueDeserializer) Declaration public object Deserialize(TextReader input, IValueDeserializer deserializer = null) Parameters Type Name Description TextReader input YamlDotNet.Serialization.IValueDeserializer deserializer Returns Type Description Object Deserialize(EventReader, Type, IValueDeserializer) Deserializes an object of the specified type. Declaration public object Deserialize(EventReader reader, Type type, IValueDeserializer deserializer = null) Parameters Type Name Description YamlDotNet.Core.EventReader reader The YamlDotNet.Core.EventReader where to deserialize the object. Type type The static type of the object to deserialize. YamlDotNet.Serialization.IValueDeserializer deserializer Returns Type Description Object Returns the deserialized object. Deserialize(EventReader, IValueDeserializer) Declaration public object Deserialize(EventReader reader, IValueDeserializer deserializer = null) Parameters Type Name Description YamlDotNet.Core.EventReader reader YamlDotNet.Serialization.IValueDeserializer deserializer Returns Type Description Object Deserialize<T>(TextReader, IValueDeserializer) Declaration public T Deserialize<T>(TextReader input, IValueDeserializer deserializer = null) Parameters Type Name Description TextReader input YamlDotNet.Serialization.IValueDeserializer deserializer Returns Type Description T Deserialize<T>(EventReader, IValueDeserializer) Declaration public T Deserialize<T>(EventReader reader, IValueDeserializer deserializer = null) Parameters Type Name Description YamlDotNet.Core.EventReader reader YamlDotNet.Serialization.IValueDeserializer deserializer Returns Type Description T RegisterTagMapping(String, Type) Declaration public void RegisterTagMapping(string tag, Type type) Parameters Type Name Description String tag Type type RegisterTypeConverter(IYamlTypeConverter) Declaration public void RegisterTypeConverter(IYamlTypeConverter typeConverter) Parameters Type Name Description YamlDotNet.Serialization.IYamlTypeConverter typeConverter"
  },
  "api/Microsoft.DocAsCode.YamlSerialization.TypeInspectors.html": {
    "href": "api/Microsoft.DocAsCode.YamlSerialization.TypeInspectors.html",
    "title": "Namespace Microsoft.DocAsCode.YamlSerialization.TypeInspectors\r\n   | DocFX website ",
    "keywords": "Namespace Microsoft.DocAsCode.YamlSerialization.TypeInspectors Classes EmitTypeInspector ExtensibleNamingConventionTypeInspector ExtensibleReadableAndWritablePropertiesTypeInspector ExtensibleTypeInspectorSkeleton ExtensibleYamlAttributesTypeInspector Applies the YamlDotNet.Serialization.YamlMemberAttribute to another YamlDotNet.Serialization.ITypeInspector . Interfaces IExtensibleTypeInspector"
  },
  "api/Microsoft.DocAsCode.YamlSerialization.TypeInspectors.IExtensibleTypeInspector.html": {
    "href": "api/Microsoft.DocAsCode.YamlSerialization.TypeInspectors.IExtensibleTypeInspector.html",
    "title": "Interface IExtensibleTypeInspector\r\n   | DocFX website ",
    "keywords": "Interface IExtensibleTypeInspector Namespace :Microsoft.DocAsCode.YamlSerialization.TypeInspectors Assembly :Microsoft.DocAsCode.YamlSerialization.dll Syntax public interface IExtensibleTypeInspector : ITypeInspector Methods GetProperty(Type, Object, String) Declaration IPropertyDescriptor GetProperty(Type type, object container, string name) Parameters Type Name Description Type type Object container String name Returns Type Description YamlDotNet.Serialization.IPropertyDescriptor"
  },
  "api/Microsoft.DocAsCode.YamlSerialization.TypeInspectors.ExtensibleYamlAttributesTypeInspector.html": {
    "href": "api/Microsoft.DocAsCode.YamlSerialization.TypeInspectors.ExtensibleYamlAttributesTypeInspector.html",
    "title": "Class ExtensibleYamlAttributesTypeInspector\r\n   | DocFX website ",
    "keywords": "Class ExtensibleYamlAttributesTypeInspector Applies the YamlDotNet.Serialization.YamlMemberAttribute to another YamlDotNet.Serialization.ITypeInspector . Inheritance Object ExtensibleTypeInspectorSkeleton ExtensibleYamlAttributesTypeInspector Namespace :Microsoft.DocAsCode.YamlSerialization.TypeInspectors Assembly :Microsoft.DocAsCode.YamlSerialization.dll Syntax public sealed class ExtensibleYamlAttributesTypeInspector : ExtensibleTypeInspectorSkeleton, IExtensibleTypeInspector, ITypeInspector Constructors ExtensibleYamlAttributesTypeInspector(IExtensibleTypeInspector) Declaration public ExtensibleYamlAttributesTypeInspector(IExtensibleTypeInspector innerTypeDescriptor) Parameters Type Name Description IExtensibleTypeInspector innerTypeDescriptor Methods GetProperties(Type, Object) Declaration public override IEnumerable<IPropertyDescriptor> GetProperties(Type type, object container) Parameters Type Name Description Type type Object container Returns Type Description System.Collections.Generic.IEnumerable < YamlDotNet.Serialization.IPropertyDescriptor > GetProperty(Type, Object, String) Declaration public override IPropertyDescriptor GetProperty(Type type, object container, string name) Parameters Type Name Description Type type Object container String name Returns Type Description YamlDotNet.Serialization.IPropertyDescriptor"
  },
  "api/Microsoft.DocAsCode.YamlSerialization.TypeInspectors.ExtensibleTypeInspectorSkeleton.html": {
    "href": "api/Microsoft.DocAsCode.YamlSerialization.TypeInspectors.ExtensibleTypeInspectorSkeleton.html",
    "title": "Class ExtensibleTypeInspectorSkeleton\r\n   | DocFX website ",
    "keywords": "Class ExtensibleTypeInspectorSkeleton Inheritance Object ExtensibleTypeInspectorSkeleton Namespace :Microsoft.DocAsCode.YamlSerialization.TypeInspectors Assembly :Microsoft.DocAsCode.YamlSerialization.dll Syntax public abstract class ExtensibleTypeInspectorSkeleton : IExtensibleTypeInspector, ITypeInspector Methods GetProperties(Type, Object) Declaration public abstract IEnumerable<IPropertyDescriptor> GetProperties(Type type, object container) Parameters Type Name Description Type type Object container Returns Type Description System.Collections.Generic.IEnumerable < YamlDotNet.Serialization.IPropertyDescriptor > GetProperty(Type, Object, String) Declaration public virtual IPropertyDescriptor GetProperty(Type type, object container, string name) Parameters Type Name Description Type type Object container String name Returns Type Description YamlDotNet.Serialization.IPropertyDescriptor GetProperty(Type, Object, String, Boolean) Declaration public IPropertyDescriptor GetProperty(Type type, object container, string name, bool ignoreUnmatched) Parameters Type Name Description Type type Object container String name Boolean ignoreUnmatched Returns Type Description YamlDotNet.Serialization.IPropertyDescriptor"
  },
  "api/Microsoft.DocAsCode.YamlSerialization.TypeInspectors.ExtensibleReadableAndWritablePropertiesTypeInspector.html": {
    "href": "api/Microsoft.DocAsCode.YamlSerialization.TypeInspectors.ExtensibleReadableAndWritablePropertiesTypeInspector.html",
    "title": "Class ExtensibleReadableAndWritablePropertiesTypeInspector\r\n   | DocFX website ",
    "keywords": "Class ExtensibleReadableAndWritablePropertiesTypeInspector Inheritance Object ExtensibleTypeInspectorSkeleton ExtensibleReadableAndWritablePropertiesTypeInspector Namespace :Microsoft.DocAsCode.YamlSerialization.TypeInspectors Assembly :Microsoft.DocAsCode.YamlSerialization.dll Syntax public sealed class ExtensibleReadableAndWritablePropertiesTypeInspector : ExtensibleTypeInspectorSkeleton, IExtensibleTypeInspector, ITypeInspector Constructors ExtensibleReadableAndWritablePropertiesTypeInspector(IExtensibleTypeInspector) Declaration public ExtensibleReadableAndWritablePropertiesTypeInspector(IExtensibleTypeInspector innerTypeDescriptor) Parameters Type Name Description IExtensibleTypeInspector innerTypeDescriptor Methods GetProperties(Type, Object) Declaration public override IEnumerable<IPropertyDescriptor> GetProperties(Type type, object container) Parameters Type Name Description Type type Object container Returns Type Description System.Collections.Generic.IEnumerable < YamlDotNet.Serialization.IPropertyDescriptor > GetProperty(Type, Object, String) Declaration public override IPropertyDescriptor GetProperty(Type type, object container, string name) Parameters Type Name Description Type type Object container String name Returns Type Description YamlDotNet.Serialization.IPropertyDescriptor"
  },
  "api/Microsoft.DocAsCode.YamlSerialization.TypeInspectors.ExtensibleNamingConventionTypeInspector.html": {
    "href": "api/Microsoft.DocAsCode.YamlSerialization.TypeInspectors.ExtensibleNamingConventionTypeInspector.html",
    "title": "Class ExtensibleNamingConventionTypeInspector\r\n   | DocFX website ",
    "keywords": "Class ExtensibleNamingConventionTypeInspector Inheritance Object ExtensibleTypeInspectorSkeleton ExtensibleNamingConventionTypeInspector Namespace :Microsoft.DocAsCode.YamlSerialization.TypeInspectors Assembly :Microsoft.DocAsCode.YamlSerialization.dll Syntax public sealed class ExtensibleNamingConventionTypeInspector : ExtensibleTypeInspectorSkeleton, IExtensibleTypeInspector, ITypeInspector Constructors ExtensibleNamingConventionTypeInspector(IExtensibleTypeInspector, INamingConvention) Declaration public ExtensibleNamingConventionTypeInspector(IExtensibleTypeInspector innerTypeDescriptor, INamingConvention namingConvention) Parameters Type Name Description IExtensibleTypeInspector innerTypeDescriptor YamlDotNet.Serialization.INamingConvention namingConvention Methods GetProperties(Type, Object) Declaration public override IEnumerable<IPropertyDescriptor> GetProperties(Type type, object container) Parameters Type Name Description Type type Object container Returns Type Description System.Collections.Generic.IEnumerable < YamlDotNet.Serialization.IPropertyDescriptor > GetProperty(Type, Object, String) Declaration public override IPropertyDescriptor GetProperty(Type type, object container, string name) Parameters Type Name Description Type type Object container String name Returns Type Description YamlDotNet.Serialization.IPropertyDescriptor"
  },
  "api/Microsoft.DocAsCode.EntityModel.TemplateResourceInfo.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.TemplateResourceInfo.html",
    "title": "Class TemplateResourceInfo\r\n   | DocFX website ",
    "keywords": "Class TemplateResourceInfo Inheritance Object TemplateResourceInfo Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public sealed class TemplateResourceInfo Constructors TemplateResourceInfo(String, String, Boolean) Declaration public TemplateResourceInfo(string resourceKey, string filePath, bool isRegexPattern) Parameters Type Name Description String resourceKey String filePath Boolean isRegexPattern Properties FilePath Declaration public string FilePath { get; } Proverty Value Type Description String IsRegexPattern Declaration public bool IsRegexPattern { get; } Proverty Value Type Description Boolean ResourceKey Declaration public string ResourceKey { get; } Proverty Value Type Description String"
  },
  "api/Microsoft.DocAsCode.EntityModel.TemplateProcessor.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.TemplateProcessor.html",
    "title": "Class TemplateProcessor\r\n   | DocFX website ",
    "keywords": "Class TemplateProcessor Inheritance Object TemplateProcessor Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class TemplateProcessor : IDisposable Constructors TemplateProcessor(ResourceCollection) TemplateName can be either file or folder If TemplateName is file, it is considered as the default template If TemplateName is a folder, files inside the folder is considered as the template, each file is named after {DocumentType}.{extension} Declaration public TemplateProcessor(ResourceCollection resourceProvider) Parameters Type Name Description ResourceCollection resourceProvider Properties IsEmpty Declaration public bool IsEmpty { get; } Proverty Value Type Description Boolean Templates Declaration public TemplateCollection Templates { get; } Proverty Value Type Description TemplateCollection Methods Dispose() Declaration public void Dispose() Transform(TemplateProcessor, List<ManifestItem>, DocumentBuildContext, ApplyTemplateSettings) Declaration public static List<TemplateManifestItem> Transform(TemplateProcessor processor, List<ManifestItem> manifest, DocumentBuildContext context, ApplyTemplateSettings settings) Parameters Type Name Description TemplateProcessor processor System.Collections.Generic.List < ManifestItem > manifest DocumentBuildContext context ApplyTemplateSettings settings Returns Type Description System.Collections.Generic.List < TemplateManifestItem > Transform(List<ManifestItem>, DocumentBuildContext, ApplyTemplateSettings) Declaration public List<TemplateManifestItem> Transform(List<ManifestItem> items, DocumentBuildContext context, ApplyTemplateSettings settings) Parameters Type Name Description System.Collections.Generic.List < ManifestItem > items DocumentBuildContext context ApplyTemplateSettings settings Returns Type Description System.Collections.Generic.List < TemplateManifestItem > UpdateFileExtension(String, String) Declaration public string UpdateFileExtension(string path, string documentType) Parameters Type Name Description String path String documentType Returns Type Description String"
  },
  "api/Microsoft.DocAsCode.EntityModel.TemplateManifestItem.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.TemplateManifestItem.html",
    "title": "Class TemplateManifestItem\r\n   | DocFX website ",
    "keywords": "Class TemplateManifestItem Inheritance Object TemplateManifestItem Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class TemplateManifestItem Properties DocumentType Declaration [YamlMember(Alias = \"type\")] [JsonProperty(\"type\")] public string DocumentType { get; set; } Proverty Value Type Description String OriginalFile Declaration [YamlMember(Alias = \"original\")] [JsonProperty(\"original\")] public string OriginalFile { get; set; } Proverty Value Type Description String OutputFiles Declaration [YamlMember(Alias = \"output\")] [JsonProperty(\"output\")] public Dictionary<string, string> OutputFiles { get; set; } Proverty Value Type Description System.Collections.Generic.Dictionary < String , String >"
  },
  "api/Microsoft.DocAsCode.EntityModel.TemplateManager.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.TemplateManager.html",
    "title": "Class TemplateManager\r\n   | DocFX website ",
    "keywords": "Class TemplateManager Inheritance Object TemplateManager Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Serializable] public class TemplateManager Constructors TemplateManager(Assembly, String, List<String>, List<String>, String) Declaration public TemplateManager(Assembly assembly, string rootNamespace, List<string> templates, List<string> themes, string baseDirectory) Parameters Type Name Description Assembly assembly String rootNamespace System.Collections.Generic.List < String > templates System.Collections.Generic.List < String > themes String baseDirectory Methods GetTemplateProcessor() Declaration public TemplateProcessor GetTemplateProcessor() Returns Type Description TemplateProcessor ProcessTheme(String, Boolean) Declaration public void ProcessTheme(string outputDirectory, bool overwrite) Parameters Type Name Description String outputDirectory Boolean overwrite TryExportTemplateFiles(String, String) Declaration public bool TryExportTemplateFiles(string outputDirectory, string regexFilter = null) Parameters Type Name Description String outputDirectory String regexFilter Returns Type Description Boolean"
  },
  "api/Microsoft.DocAsCode.EntityModel.TemplateCollection.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.TemplateCollection.html",
    "title": "Class TemplateCollection\r\n   | DocFX website ",
    "keywords": "Class TemplateCollection Inheritance Object System.Collections.Generic.Dictionary < String , System.Collections.Generic.List < Template >> TemplateCollection Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class TemplateCollection : Dictionary<string, List<Template>>, IDictionary<string, List<Template>>, ICollection<KeyValuePair<string, List<Template>>>, IDictionary, ICollection, IReadOnlyDictionary<string, List<Template>>, IReadOnlyCollection<KeyValuePair<string, List<Template>>>, IEnumerable<KeyValuePair<string, List<Template>>>, IEnumerable, ISerializable, IDeserializationCallback Constructors TemplateCollection(ResourceCollection) Declaration public TemplateCollection(ResourceCollection provider) Parameters Type Name Description ResourceCollection provider Properties Item[String] Declaration public List<Template> this[string key] { get; set; } Parameters Type Name Description String key Proverty Value Type Description System.Collections.Generic.List < Template >"
  },
  "api/Microsoft.DocAsCode.EntityModel.Template.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.Template.html",
    "title": "Class Template\r\n   | DocFX website ",
    "keywords": "Class Template Inheritance Object Template Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class Template Constructors Template(String, String, String, ResourceCollection) Declaration public Template(string template, string templateName, string script, ResourceCollection resourceCollection) Parameters Type Name Description String template String templateName String script ResourceCollection resourceCollection Properties Extension Declaration public string Extension { get; } Proverty Value Type Description String IsPrimary Declaration public bool IsPrimary { get; } Proverty Value Type Description Boolean Name Declaration public string Name { get; } Proverty Value Type Description String Resources Declaration public IEnumerable<TemplateResourceInfo> Resources { get; } Proverty Value Type Description System.Collections.Generic.IEnumerable < TemplateResourceInfo > ScriptName Declaration public string ScriptName { get; } Proverty Value Type Description String Type Declaration public string Type { get; } Proverty Value Type Description String Methods Transform(Object) Transform from view model to the final result using template Supported template languages are mustache and liquid Declaration public string Transform(object model) Parameters Type Name Description Object model The input view model Returns Type Description String The output after applying template TransformModel(Object, Object, Object) Transform from raw model to view model TODO: refactor to merge model and attrs into one input model Declaration public object TransformModel(object model, object attrs, object global) Parameters Type Name Description Object model The raw model Object attrs The system generated attributes Object global Returns Type Description Object The view model"
  },
  "api/Microsoft.DocAsCode.EntityModel.SyntaxLanguage.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.SyntaxLanguage.html",
    "title": "Enum SyntaxLanguage\r\n   | DocFX website ",
    "keywords": "Enum SyntaxLanguage Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public enum SyntaxLanguage Fields CPlusPlus Declaration CPlusPlus = 2 CSharp Declaration CSharp = 1 Default Declaration Default = 0 FSharp Declaration FSharp = 3 Javascript Declaration Javascript = 4 VB Declaration VB = 5"
  },
  "api/Microsoft.DocAsCode.EntityModel.SyntaxDetail.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.SyntaxDetail.html",
    "title": "Class SyntaxDetail\r\n   | DocFX website ",
    "keywords": "Class SyntaxDetail Inheritance Object SyntaxDetail Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class SyntaxDetail Properties Content Declaration [YamlMember(Alias = \"content\")] [JsonProperty(\"content\")] public SortedList<SyntaxLanguage, string> Content { get; set; } Proverty Value Type Description System.Collections.Generic.SortedList < SyntaxLanguage , String > Parameters Declaration [YamlMember(Alias = \"parameters\")] [JsonProperty(\"parameters\")] public List<ApiParameter> Parameters { get; set; } Proverty Value Type Description System.Collections.Generic.List < ApiParameter > Return Declaration [YamlMember(Alias = \"return\")] [JsonProperty(\"return\")] public ApiParameter Return { get; set; } Proverty Value Type Description ApiParameter TypeParameters Declaration [YamlMember(Alias = \"typeParameters\")] [JsonProperty(\"typeParameters\")] public List<ApiParameter> TypeParameters { get; set; } Proverty Value Type Description System.Collections.Generic.List < ApiParameter >"
  },
  "api/Microsoft.DocAsCode.EntityModel.SymbolVisitorAdapter.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.SymbolVisitorAdapter.html",
    "title": "Class SymbolVisitorAdapter\r\n   | DocFX website ",
    "keywords": "Class SymbolVisitorAdapter Inheritance Object Microsoft.CodeAnalysis.SymbolVisitor < MetadataItem > SymbolVisitorAdapter Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class SymbolVisitorAdapter : SymbolVisitor<MetadataItem> Constructors SymbolVisitorAdapter(YamlModelGenerator, SyntaxLanguage, Boolean) Declaration public SymbolVisitorAdapter(YamlModelGenerator generator, SyntaxLanguage language, bool preserveRawInlineComments = false) Parameters Type Name Description YamlModelGenerator generator SyntaxLanguage language Boolean preserveRawInlineComments Fields _preserveRawInlineComments Declaration public bool _preserveRawInlineComments Properties Language Declaration public SyntaxLanguage Language { get; } Proverty Value Type Description SyntaxLanguage Methods AddReference(ISymbol) Declaration public string AddReference(ISymbol symbol) Parameters Type Name Description Microsoft.CodeAnalysis.ISymbol symbol Returns Type Description String AddReference(String) Declaration public string AddReference(string id) Parameters Type Name Description String id Returns Type Description String AddSpecReference(ISymbol, IReadOnlyList<String>, IReadOnlyList<String>) Declaration public string AddSpecReference(ISymbol symbol, IReadOnlyList<string> typeGenericParameters = null, IReadOnlyList<string> methodGenericParameters = null) Parameters Type Name Description Microsoft.CodeAnalysis.ISymbol symbol System.Collections.Generic.IReadOnlyList < String > typeGenericParameters System.Collections.Generic.IReadOnlyList < String > methodGenericParameters Returns Type Description String DefaultVisit(ISymbol) Declaration public override MetadataItem DefaultVisit(ISymbol symbol) Parameters Type Name Description Microsoft.CodeAnalysis.ISymbol symbol Returns Type Description MetadataItem VisitAssembly(IAssemblySymbol) Declaration public override MetadataItem VisitAssembly(IAssemblySymbol symbol) Parameters Type Name Description Microsoft.CodeAnalysis.IAssemblySymbol symbol Returns Type Description MetadataItem VisitEvent(IEventSymbol) Declaration public override MetadataItem VisitEvent(IEventSymbol symbol) Parameters Type Name Description Microsoft.CodeAnalysis.IEventSymbol symbol Returns Type Description MetadataItem VisitField(IFieldSymbol) Declaration public override MetadataItem VisitField(IFieldSymbol symbol) Parameters Type Name Description Microsoft.CodeAnalysis.IFieldSymbol symbol Returns Type Description MetadataItem VisitMethod(IMethodSymbol) Declaration public override MetadataItem VisitMethod(IMethodSymbol symbol) Parameters Type Name Description Microsoft.CodeAnalysis.IMethodSymbol symbol Returns Type Description MetadataItem VisitNamedType(INamedTypeSymbol) Declaration public override MetadataItem VisitNamedType(INamedTypeSymbol symbol) Parameters Type Name Description Microsoft.CodeAnalysis.INamedTypeSymbol symbol Returns Type Description MetadataItem VisitNamespace(INamespaceSymbol) Declaration public override MetadataItem VisitNamespace(INamespaceSymbol symbol) Parameters Type Name Description Microsoft.CodeAnalysis.INamespaceSymbol symbol Returns Type Description MetadataItem VisitProperty(IPropertySymbol) Declaration public override MetadataItem VisitProperty(IPropertySymbol symbol) Parameters Type Name Description Microsoft.CodeAnalysis.IPropertySymbol symbol Returns Type Description MetadataItem"
  },
  "api/Microsoft.DocAsCode.EntityModel.Swagger.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.Swagger.html",
    "title": "Namespace Microsoft.DocAsCode.EntityModel.Swagger\r\n   | DocFX website ",
    "keywords": "Namespace Microsoft.DocAsCode.EntityModel.Swagger Classes InfoObject Info object OperationObject ParameterObject PathItemObject TODO: need a converter PathsObject ResponseObject SwaggerModel"
  },
  "api/Microsoft.DocAsCode.EntityModel.ReferenceItem.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.ReferenceItem.html",
    "title": "Class ReferenceItem\r\n   | DocFX website ",
    "keywords": "Class ReferenceItem Inheritance Object ReferenceItem Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class ReferenceItem Properties Definition Declaration [YamlMember(Alias = \"definition\")] [JsonProperty(\"definition\")] public string Definition { get; set; } Proverty Value Type Description String IsDefinition Declaration [YamlMember(Alias = \"isDefinition\")] [JsonProperty(\"isDefinition\")] public bool ? IsDefinition { get; set; } Proverty Value Type Description System.Nullable < Boolean > Parent Declaration [YamlMember(Alias = \"parent\")] [JsonProperty(\"parent\")] public string Parent { get; set; } Proverty Value Type Description String Parts Declaration [YamlMember(Alias = \"name\")] [JsonProperty(\"name\")] public SortedList<SyntaxLanguage, List<LinkItem>> Parts { get; set; } Proverty Value Type Description System.Collections.Generic.SortedList < SyntaxLanguage , System.Collections.Generic.List < LinkItem >> Methods Clone() Declaration public ReferenceItem Clone() Returns Type Description ReferenceItem Merge(ReferenceItem) Declaration public void Merge(ReferenceItem other) Parameters Type Name Description ReferenceItem other"
  },
  "api/Microsoft.DocAsCode.EntityModel.ProjectLevelCache.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.ProjectLevelCache.html",
    "title": "Class ProjectLevelCache\r\n   | DocFX website ",
    "keywords": "Class ProjectLevelCache Inheritance Object CacheBase ProjectLevelCache Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class ProjectLevelCache : CacheBase Fields OutputFolder Declaration public readonly string OutputFolder Methods Get(IEnumerable<String>) Declaration public static ProjectLevelCache Get(IEnumerable<string> files) Parameters Type Name Description System.Collections.Generic.IEnumerable < String > files Returns Type Description ProjectLevelCache"
  },
  "api/Microsoft.DocAsCode.EntityModel.Plugins.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.Plugins.html",
    "title": "Namespace Microsoft.DocAsCode.EntityModel.Plugins\r\n   | DocFX website ",
    "keywords": "Namespace Microsoft.DocAsCode.EntityModel.Plugins Classes ApplyOverwriteDocument <T> ApplyOverwriteDocumentForMref ApplyOverwriteDocumentForRestApi ApplyPlatformVersion BaseDocumentBuildStep BuildConceptualDocument BuildManagedReferenceDocument BuildResourceDocument BuildRestApiDocument BuildTocDocument ConceptualDocumentProcessor CountWord DisposableDocumentProcessor FillReferenceInformation ManagedReferenceDocumentProcessor MarkdownReader MarkdownTocReader MergeManagedReferenceDocument OverwriteDocumentReader ResourceDocumentProcessor RestApiDocumentProcessor TocDocumentProcessor Interfaces IResourceFileConfig"
  },
  "api/Microsoft.DocAsCode.EntityModel.Plugins.TocDocumentProcessor.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.Plugins.TocDocumentProcessor.html",
    "title": "Class TocDocumentProcessor\r\n   | DocFX website ",
    "keywords": "Class TocDocumentProcessor Inheritance Object DisposableDocumentProcessor TocDocumentProcessor Namespace :Microsoft.DocAsCode.EntityModel.Plugins Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Export(typeof (IDocumentProcessor))] public class TocDocumentProcessor : DisposableDocumentProcessor, IDocumentProcessor, IDisposable Properties BuildSteps Declaration [ImportMany(\"TocDocumentProcessor\")] public override IEnumerable<IDocumentBuildStep> BuildSteps { get; set; } Proverty Value Type Description System.Collections.Generic.IEnumerable < IDocumentBuildStep > Name Declaration public override string Name { get; } Proverty Value Type Description String Methods GetProcessingPriority(FileAndType) Declaration public override ProcessingPriority GetProcessingPriority(FileAndType file) Parameters Type Name Description FileAndType file Returns Type Description ProcessingPriority Load(FileAndType, ImmutableDictionary<String, Object>) Declaration public override FileModel Load(FileAndType file, ImmutableDictionary<string, object> metadata) Parameters Type Name Description FileAndType file System.Collections.Immutable.ImmutableDictionary < String , Object > metadata Returns Type Description FileModel Save(FileModel) Declaration public override SaveResult Save(FileModel model) Parameters Type Name Description FileModel model Returns Type Description SaveResult UpdateHref(FileModel, IDocumentBuildContext) Declaration public override void UpdateHref(FileModel model, IDocumentBuildContext context) Parameters Type Name Description FileModel model IDocumentBuildContext context"
  },
  "api/Microsoft.DocAsCode.EntityModel.Plugins.RestApiDocumentProcessor.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.Plugins.RestApiDocumentProcessor.html",
    "title": "Class RestApiDocumentProcessor\r\n   | DocFX website ",
    "keywords": "Class RestApiDocumentProcessor Inheritance Object DisposableDocumentProcessor RestApiDocumentProcessor Namespace :Microsoft.DocAsCode.EntityModel.Plugins Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Export(typeof (IDocumentProcessor))] public class RestApiDocumentProcessor : DisposableDocumentProcessor, IDocumentProcessor, IDisposable Properties BuildSteps Declaration [ImportMany(\"RestApiDocumentProcessor\")] public override IEnumerable<IDocumentBuildStep> BuildSteps { get; set; } Proverty Value Type Description System.Collections.Generic.IEnumerable < IDocumentBuildStep > Name Declaration public override string Name { get; } Proverty Value Type Description String Methods GetProcessingPriority(FileAndType) Declaration public override ProcessingPriority GetProcessingPriority(FileAndType file) Parameters Type Name Description FileAndType file Returns Type Description ProcessingPriority Load(FileAndType, ImmutableDictionary<String, Object>) Declaration public override FileModel Load(FileAndType file, ImmutableDictionary<string, object> metadata) Parameters Type Name Description FileAndType file System.Collections.Immutable.ImmutableDictionary < String , Object > metadata Returns Type Description FileModel Save(FileModel) Declaration public override SaveResult Save(FileModel model) Parameters Type Name Description FileModel model Returns Type Description SaveResult"
  },
  "api/Microsoft.DocAsCode.EntityModel.Plugins.ResourceDocumentProcessor.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.Plugins.ResourceDocumentProcessor.html",
    "title": "Class ResourceDocumentProcessor\r\n   | DocFX website ",
    "keywords": "Class ResourceDocumentProcessor Inheritance Object DisposableDocumentProcessor ResourceDocumentProcessor Namespace :Microsoft.DocAsCode.EntityModel.Plugins Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Export(typeof (IDocumentProcessor))] public class ResourceDocumentProcessor : DisposableDocumentProcessor, IDocumentProcessor, IDisposable Properties BuildSteps Declaration [ImportMany(\"ResourceDocumentProcessor\")] public override IEnumerable<IDocumentBuildStep> BuildSteps { get; set; } Proverty Value Type Description System.Collections.Generic.IEnumerable < IDocumentBuildStep > Configs Declaration [ImportMany] public IEnumerable<IResourceFileConfig> Configs { get; set; } Proverty Value Type Description System.Collections.Generic.IEnumerable < IResourceFileConfig > Name Declaration public override string Name { get; } Proverty Value Type Description String Methods GetProcessingPriority(FileAndType) Declaration public override ProcessingPriority GetProcessingPriority(FileAndType file) Parameters Type Name Description FileAndType file Returns Type Description ProcessingPriority Load(FileAndType, ImmutableDictionary<String, Object>) Declaration public override FileModel Load(FileAndType file, ImmutableDictionary<string, object> metadata) Parameters Type Name Description FileAndType file System.Collections.Immutable.ImmutableDictionary < String , Object > metadata Returns Type Description FileModel Save(FileModel) Declaration public override SaveResult Save(FileModel model) Parameters Type Name Description FileModel model Returns Type Description SaveResult"
  },
  "api/Microsoft.DocAsCode.EntityModel.Plugins.OverwriteDocumentReader.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.Plugins.OverwriteDocumentReader.html",
    "title": "Class OverwriteDocumentReader\r\n   | DocFX website ",
    "keywords": "Class OverwriteDocumentReader Inheritance Object OverwriteDocumentReader Namespace :Microsoft.DocAsCode.EntityModel.Plugins Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class OverwriteDocumentReader Methods Read(FileAndType) Declaration public static FileModel Read(FileAndType file) Parameters Type Name Description FileAndType file Returns Type Description FileModel Transform<T>(FileModel, String, Func<T, T>) TODO: use Attributes to automatically markup and handle uid inside the model instead of pass in the itemBuilder action Declaration public static IEnumerable<T> Transform<T>(FileModel model, string uid, Func<T, T> itemBuilder)where T : class, IOverwriteDocumentViewModel Parameters Type Name Description FileModel model String uid System.Func <T, T> itemBuilder Returns Type Description System.Collections.Generic.IEnumerable <T>"
  },
  "api/Microsoft.DocAsCode.EntityModel.Plugins.MergeManagedReferenceDocument.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.Plugins.MergeManagedReferenceDocument.html",
    "title": "Class MergeManagedReferenceDocument\r\n   | DocFX website ",
    "keywords": "Class MergeManagedReferenceDocument Inheritance Object BaseDocumentBuildStep MergeManagedReferenceDocument Namespace :Microsoft.DocAsCode.EntityModel.Plugins Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class MergeManagedReferenceDocument : BaseDocumentBuildStep, IDocumentBuildStep Properties BuildOrder Declaration public override int BuildOrder { get; } Proverty Value Type Description Int32 Name Declaration public override string Name { get; } Proverty Value Type Description String Methods Prebuild(ImmutableList<FileModel>, IHostService) Declaration public override IEnumerable<FileModel> Prebuild(ImmutableList<FileModel> models, IHostService host) Parameters Type Name Description System.Collections.Immutable.ImmutableList < FileModel > models IHostService host Returns Type Description System.Collections.Generic.IEnumerable < FileModel >"
  },
  "api/Microsoft.DocAsCode.EntityModel.Plugins.MarkdownTocReader.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.Plugins.MarkdownTocReader.html",
    "title": "Class MarkdownTocReader\r\n   | DocFX website ",
    "keywords": "Class MarkdownTocReader Inheritance Object MarkdownTocReader Namespace :Microsoft.DocAsCode.EntityModel.Plugins Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class MarkdownTocReader Methods LoadToc(String, String) Declaration public static TocViewModel LoadToc(string tocContent, string filePath) Parameters Type Name Description String tocContent String filePath Returns Type Description TocViewModel"
  },
  "api/Microsoft.DocAsCode.EntityModel.Plugins.MarkdownReader.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.Plugins.MarkdownReader.html",
    "title": "Class MarkdownReader\r\n   | DocFX website ",
    "keywords": "Class MarkdownReader Inheritance Object MarkdownReader Namespace :Microsoft.DocAsCode.EntityModel.Plugins Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class MarkdownReader Methods ReadMarkdownAsConceptual(String, String) Declaration public static Dictionary<string, object> ReadMarkdownAsConceptual(string baseDir, string file) Parameters Type Name Description String baseDir String file Returns Type Description System.Collections.Generic.Dictionary < String , Object > ReadMarkdownAsOverwrite(String, String) Declaration public static List<OverwriteDocumentModel> ReadMarkdownAsOverwrite(string baseDir, string file) Parameters Type Name Description String baseDir String file Returns Type Description System.Collections.Generic.List < OverwriteDocumentModel >"
  },
  "api/Microsoft.DocAsCode.EntityModel.Plugins.ManagedReferenceDocumentProcessor.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.Plugins.ManagedReferenceDocumentProcessor.html",
    "title": "Class ManagedReferenceDocumentProcessor\r\n   | DocFX website ",
    "keywords": "Class ManagedReferenceDocumentProcessor Inheritance Object DisposableDocumentProcessor ManagedReferenceDocumentProcessor Namespace :Microsoft.DocAsCode.EntityModel.Plugins Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Export(typeof (IDocumentProcessor))] public class ManagedReferenceDocumentProcessor : DisposableDocumentProcessor, IDocumentProcessor, IDisposable Properties BuildSteps Declaration [ImportMany(\"ManagedReferenceDocumentProcessor\")] public override IEnumerable<IDocumentBuildStep> BuildSteps { get; set; } Proverty Value Type Description System.Collections.Generic.IEnumerable < IDocumentBuildStep > Name Declaration public override string Name { get; } Proverty Value Type Description String Methods GetProcessingPriority(FileAndType) Declaration public override ProcessingPriority GetProcessingPriority(FileAndType file) Parameters Type Name Description FileAndType file Returns Type Description ProcessingPriority Load(FileAndType, ImmutableDictionary<String, Object>) Declaration public override FileModel Load(FileAndType file, ImmutableDictionary<string, object> metadata) Parameters Type Name Description FileAndType file System.Collections.Immutable.ImmutableDictionary < String , Object > metadata Returns Type Description FileModel Save(FileModel) Declaration public override SaveResult Save(FileModel model) Parameters Type Name Description FileModel model Returns Type Description SaveResult"
  },
  "api/Microsoft.DocAsCode.EntityModel.Plugins.IResourceFileConfig.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.Plugins.IResourceFileConfig.html",
    "title": "Interface IResourceFileConfig\r\n   | DocFX website ",
    "keywords": "Interface IResourceFileConfig Namespace :Microsoft.DocAsCode.EntityModel.Plugins Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public interface IResourceFileConfig Methods IsResourceFile(String) Declaration bool IsResourceFile(string fileExtension) Parameters Type Name Description String fileExtension Returns Type Description Boolean"
  },
  "api/Microsoft.DocAsCode.EntityModel.Plugins.FillReferenceInformation.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.Plugins.FillReferenceInformation.html",
    "title": "Class FillReferenceInformation\r\n   | DocFX website ",
    "keywords": "Class FillReferenceInformation Inheritance Object BaseDocumentBuildStep FillReferenceInformation Namespace :Microsoft.DocAsCode.EntityModel.Plugins Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Export(\"ManagedReferenceDocumentProcessor\", typeof (IDocumentBuildStep))] public class FillReferenceInformation : BaseDocumentBuildStep, IDocumentBuildStep Properties BuildOrder Declaration public override int BuildOrder { get; } Proverty Value Type Description Int32 Name Declaration public override string Name { get; } Proverty Value Type Description String Methods Postbuild(ImmutableList<FileModel>, IHostService) Declaration public override void Postbuild(ImmutableList<FileModel> models, IHostService host) Parameters Type Name Description System.Collections.Immutable.ImmutableList < FileModel > models IHostService host"
  },
  "api/Microsoft.DocAsCode.EntityModel.Plugins.DisposableDocumentProcessor.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.Plugins.DisposableDocumentProcessor.html",
    "title": "Class DisposableDocumentProcessor\r\n   | DocFX website ",
    "keywords": "Class DisposableDocumentProcessor Inheritance Object DisposableDocumentProcessor Namespace :Microsoft.DocAsCode.EntityModel.Plugins Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public abstract class DisposableDocumentProcessor : IDocumentProcessor, IDisposable Properties BuildSteps Declaration public abstract IEnumerable<IDocumentBuildStep> BuildSteps { get; set; } Proverty Value Type Description System.Collections.Generic.IEnumerable < IDocumentBuildStep > Name Declaration public abstract string Name { get; } Proverty Value Type Description String Methods Dispose() Declaration public void Dispose() GetProcessingPriority(FileAndType) Declaration public abstract ProcessingPriority GetProcessingPriority(FileAndType file) Parameters Type Name Description FileAndType file Returns Type Description ProcessingPriority Load(FileAndType, ImmutableDictionary<String, Object>) Declaration public abstract FileModel Load(FileAndType file, ImmutableDictionary<string, object> metadata) Parameters Type Name Description FileAndType file System.Collections.Immutable.ImmutableDictionary < String , Object > metadata Returns Type Description FileModel Save(FileModel) Declaration public abstract SaveResult Save(FileModel model) Parameters Type Name Description FileModel model Returns Type Description SaveResult UpdateHref(FileModel, IDocumentBuildContext) Declaration public virtual void UpdateHref(FileModel model, IDocumentBuildContext context) Parameters Type Name Description FileModel model IDocumentBuildContext context"
  },
  "api/Microsoft.DocAsCode.EntityModel.Plugins.CountWord.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.Plugins.CountWord.html",
    "title": "Class CountWord\r\n   | DocFX website ",
    "keywords": "Class CountWord Inheritance Object BaseDocumentBuildStep CountWord Namespace :Microsoft.DocAsCode.EntityModel.Plugins Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Export(\"ConceptualDocumentProcessor\", typeof (IDocumentBuildStep))] public class CountWord : BaseDocumentBuildStep, IDocumentBuildStep Properties BuildOrder Declaration public override int BuildOrder { get; } Proverty Value Type Description Int32 Name Declaration public override string Name { get; } Proverty Value Type Description String Methods Postbuild(ImmutableList<FileModel>, IHostService) Declaration public override void Postbuild(ImmutableList<FileModel> models, IHostService host) Parameters Type Name Description System.Collections.Immutable.ImmutableList < FileModel > models IHostService host"
  },
  "api/Microsoft.DocAsCode.EntityModel.Plugins.ConceptualDocumentProcessor.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.Plugins.ConceptualDocumentProcessor.html",
    "title": "Class ConceptualDocumentProcessor\r\n   | DocFX website ",
    "keywords": "Class ConceptualDocumentProcessor Inheritance Object DisposableDocumentProcessor ConceptualDocumentProcessor Namespace :Microsoft.DocAsCode.EntityModel.Plugins Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Export(typeof (IDocumentProcessor))] public class ConceptualDocumentProcessor : DisposableDocumentProcessor, IDocumentProcessor, IDisposable Properties BuildSteps Declaration [ImportMany(\"ConceptualDocumentProcessor\")] public override IEnumerable<IDocumentBuildStep> BuildSteps { get; set; } Proverty Value Type Description System.Collections.Generic.IEnumerable < IDocumentBuildStep > Name Declaration public override string Name { get; } Proverty Value Type Description String Methods GetProcessingPriority(FileAndType) Declaration public override ProcessingPriority GetProcessingPriority(FileAndType file) Parameters Type Name Description FileAndType file Returns Type Description ProcessingPriority Load(FileAndType, ImmutableDictionary<String, Object>) Declaration public override FileModel Load(FileAndType file, ImmutableDictionary<string, object> metadata) Parameters Type Name Description FileAndType file System.Collections.Immutable.ImmutableDictionary < String , Object > metadata Returns Type Description FileModel Save(FileModel) Declaration public override SaveResult Save(FileModel model) Parameters Type Name Description FileModel model Returns Type Description SaveResult"
  },
  "api/Microsoft.DocAsCode.EntityModel.Plugins.BuildTocDocument.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.Plugins.BuildTocDocument.html",
    "title": "Class BuildTocDocument\r\n   | DocFX website ",
    "keywords": "Class BuildTocDocument Inheritance Object BaseDocumentBuildStep BuildTocDocument Namespace :Microsoft.DocAsCode.EntityModel.Plugins Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Export(\"TocDocumentProcessor\", typeof (IDocumentBuildStep))] public class BuildTocDocument : BaseDocumentBuildStep, IDocumentBuildStep Properties BuildOrder Declaration public override int BuildOrder { get; } Proverty Value Type Description Int32 Name Declaration public override string Name { get; } Proverty Value Type Description String Methods Build(FileModel, IHostService) Declaration public override void Build(FileModel model, IHostService host) Parameters Type Name Description FileModel model IHostService host"
  },
  "api/Microsoft.DocAsCode.EntityModel.Plugins.BuildRestApiDocument.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.Plugins.BuildRestApiDocument.html",
    "title": "Class BuildRestApiDocument\r\n   | DocFX website ",
    "keywords": "Class BuildRestApiDocument Inheritance Object BaseDocumentBuildStep BuildRestApiDocument Namespace :Microsoft.DocAsCode.EntityModel.Plugins Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Export(\"RestApiDocumentProcessor\", typeof (IDocumentBuildStep))] public class BuildRestApiDocument : BaseDocumentBuildStep, IDocumentBuildStep Properties BuildOrder Declaration public override int BuildOrder { get; } Proverty Value Type Description Int32 Name Declaration public override string Name { get; } Proverty Value Type Description String Methods Build(FileModel, IHostService) Declaration public override void Build(FileModel model, IHostService host) Parameters Type Name Description FileModel model IHostService host BuildItem(IHostService, RestApiItemViewModel, FileModel, Func<String, Boolean>) Declaration public static RestApiItemViewModel BuildItem(IHostService host, RestApiItemViewModel item, FileModel model, Func<string, bool> filter = null) Parameters Type Name Description IHostService host RestApiItemViewModel item FileModel model System.Func < String , Boolean > filter Returns Type Description RestApiItemViewModel"
  },
  "api/Microsoft.DocAsCode.EntityModel.Plugins.BuildResourceDocument.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.Plugins.BuildResourceDocument.html",
    "title": "Class BuildResourceDocument\r\n   | DocFX website ",
    "keywords": "Class BuildResourceDocument Inheritance Object BaseDocumentBuildStep BuildResourceDocument Namespace :Microsoft.DocAsCode.EntityModel.Plugins Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Export(\"ResourceDocumentProcessor\", typeof (IDocumentBuildStep))] public class BuildResourceDocument : BaseDocumentBuildStep, IDocumentBuildStep Properties BuildOrder Declaration public override int BuildOrder { get; } Proverty Value Type Description Int32 Name Declaration public override string Name { get; } Proverty Value Type Description String Methods Build(FileModel, IHostService) Declaration public override void Build(FileModel model, IHostService host) Parameters Type Name Description FileModel model IHostService host"
  },
  "api/Microsoft.DocAsCode.EntityModel.Plugins.BuildManagedReferenceDocument.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.Plugins.BuildManagedReferenceDocument.html",
    "title": "Class BuildManagedReferenceDocument\r\n   | DocFX website ",
    "keywords": "Class BuildManagedReferenceDocument Inheritance Object BaseDocumentBuildStep BuildManagedReferenceDocument Namespace :Microsoft.DocAsCode.EntityModel.Plugins Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Export(\"ManagedReferenceDocumentProcessor\", typeof (IDocumentBuildStep))] public class BuildManagedReferenceDocument : BaseDocumentBuildStep, IDocumentBuildStep Properties BuildOrder Declaration public override int BuildOrder { get; } Proverty Value Type Description Int32 Name Declaration public override string Name { get; } Proverty Value Type Description String Methods Build(FileModel, IHostService) Declaration public override void Build(FileModel model, IHostService host) Parameters Type Name Description FileModel model IHostService host BuildItem(IHostService, ItemViewModel, FileModel, Func<String, Boolean>) Declaration public static ItemViewModel BuildItem(IHostService host, ItemViewModel item, FileModel model, Func<string, bool> filter = null) Parameters Type Name Description IHostService host ItemViewModel item FileModel model System.Func < String , Boolean > filter Returns Type Description ItemViewModel"
  },
  "api/Microsoft.DocAsCode.EntityModel.Plugins.BuildConceptualDocument.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.Plugins.BuildConceptualDocument.html",
    "title": "Class BuildConceptualDocument\r\n   | DocFX website ",
    "keywords": "Class BuildConceptualDocument Inheritance Object BaseDocumentBuildStep BuildConceptualDocument Namespace :Microsoft.DocAsCode.EntityModel.Plugins Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Export(\"ConceptualDocumentProcessor\", typeof (IDocumentBuildStep))] public class BuildConceptualDocument : BaseDocumentBuildStep, IDocumentBuildStep Properties BuildOrder Declaration public override int BuildOrder { get; } Proverty Value Type Description Int32 Name Declaration public override string Name { get; } Proverty Value Type Description String Methods Build(FileModel, IHostService) Declaration public override void Build(FileModel model, IHostService host) Parameters Type Name Description FileModel model IHostService host"
  },
  "api/Microsoft.DocAsCode.EntityModel.Plugins.BaseDocumentBuildStep.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.Plugins.BaseDocumentBuildStep.html",
    "title": "Class BaseDocumentBuildStep\r\n   | DocFX website ",
    "keywords": "Class BaseDocumentBuildStep Inheritance Object BaseDocumentBuildStep Namespace :Microsoft.DocAsCode.EntityModel.Plugins Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public abstract class BaseDocumentBuildStep : IDocumentBuildStep Properties BuildOrder Declaration public abstract int BuildOrder { get; } Proverty Value Type Description Int32 Name Declaration public abstract string Name { get; } Proverty Value Type Description String Methods Build(FileModel, IHostService) Declaration public virtual void Build(FileModel model, IHostService host) Parameters Type Name Description FileModel model IHostService host Markup(IHostService, String, FileModel, Func<String, Boolean>) TODO: merge with the one in BuildManagedReferenceDocument Declaration public static string Markup(IHostService host, string markdown, FileModel model, Func<string, bool> filter = null) Parameters Type Name Description IHostService host String markdown FileModel model System.Func < String , Boolean > filter Returns Type Description String Postbuild(ImmutableList<FileModel>, IHostService) Declaration public virtual void Postbuild(ImmutableList<FileModel> models, IHostService host) Parameters Type Name Description System.Collections.Immutable.ImmutableList < FileModel > models IHostService host Prebuild(ImmutableList<FileModel>, IHostService) Declaration public virtual IEnumerable<FileModel> Prebuild(ImmutableList<FileModel> models, IHostService host) Parameters Type Name Description System.Collections.Immutable.ImmutableList < FileModel > models IHostService host Returns Type Description System.Collections.Generic.IEnumerable < FileModel >"
  },
  "api/Microsoft.DocAsCode.EntityModel.Plugins.ApplyPlatformVersion.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.Plugins.ApplyPlatformVersion.html",
    "title": "Class ApplyPlatformVersion\r\n   | DocFX website ",
    "keywords": "Class ApplyPlatformVersion Inheritance Object BaseDocumentBuildStep ApplyPlatformVersion Namespace :Microsoft.DocAsCode.EntityModel.Plugins Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class ApplyPlatformVersion : BaseDocumentBuildStep, IDocumentBuildStep Properties BuildOrder Declaration public override int BuildOrder { get; } Proverty Value Type Description Int32 Name Declaration public override string Name { get; } Proverty Value Type Description String Methods Prebuild(ImmutableList<FileModel>, IHostService) Declaration public override IEnumerable<FileModel> Prebuild(ImmutableList<FileModel> models, IHostService host) Parameters Type Name Description System.Collections.Immutable.ImmutableList < FileModel > models IHostService host Returns Type Description System.Collections.Generic.IEnumerable < FileModel >"
  },
  "api/Microsoft.DocAsCode.EntityModel.Plugins.ApplyOverwriteDocument`1.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.Plugins.ApplyOverwriteDocument`1.html",
    "title": "Class ApplyOverwriteDocument&lt;T&gt;\r\n   | DocFX website ",
    "keywords": "Class ApplyOverwriteDocument<T> Inheritance Object BaseDocumentBuildStep ApplyOverwriteDocument<T> Namespace :Microsoft.DocAsCode.EntityModel.Plugins Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public abstract class ApplyOverwriteDocument<T> : BaseDocumentBuildStep, IDocumentBuildStep where T : class, IOverwriteDocumentViewModel Methods GetItemsFromOverwriteDocument(FileModel, String, IHostService) Declaration protected abstract IEnumerable<T> GetItemsFromOverwriteDocument(FileModel fileModel, string uid, IHostService host) Parameters Type Name Description FileModel fileModel String uid IHostService host Returns Type Description System.Collections.Generic.IEnumerable <T> GetItemsToOverwrite(FileModel, String, IHostService) Declaration protected abstract IEnumerable<T> GetItemsToOverwrite(FileModel fileModel, string uid, IHostService host) Parameters Type Name Description FileModel fileModel String uid IHostService host Returns Type Description System.Collections.Generic.IEnumerable <T> Postbuild(ImmutableList<FileModel>, IHostService) Declaration public override void Postbuild(ImmutableList<FileModel> models, IHostService host) Parameters Type Name Description System.Collections.Immutable.ImmutableList < FileModel > models IHostService host"
  },
  "api/Microsoft.DocAsCode.EntityModel.Plugins.ApplyOverwriteDocumentForRestApi.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.Plugins.ApplyOverwriteDocumentForRestApi.html",
    "title": "Class ApplyOverwriteDocumentForRestApi\r\n   | DocFX website ",
    "keywords": "Class ApplyOverwriteDocumentForRestApi Inheritance Object BaseDocumentBuildStep ApplyOverwriteDocument < RestApiItemViewModel > ApplyOverwriteDocumentForRestApi Namespace :Microsoft.DocAsCode.EntityModel.Plugins Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Export(\"RestApiDocumentProcessor\", typeof (IDocumentBuildStep))] public class ApplyOverwriteDocumentForRestApi : ApplyOverwriteDocument<RestApiItemViewModel>, IDocumentBuildStep Properties BuildOrder Declaration public override int BuildOrder { get; } Proverty Value Type Description Int32 Name Declaration public override string Name { get; } Proverty Value Type Description String Methods GetItemsFromOverwriteDocument(FileModel, String, IHostService) Declaration protected override IEnumerable<RestApiItemViewModel> GetItemsFromOverwriteDocument(FileModel fileModel, string uid, IHostService host) Parameters Type Name Description FileModel fileModel String uid IHostService host Returns Type Description System.Collections.Generic.IEnumerable < RestApiItemViewModel > GetItemsToOverwrite(FileModel, String, IHostService) Declaration protected override IEnumerable<RestApiItemViewModel> GetItemsToOverwrite(FileModel model, string uid, IHostService host) Parameters Type Name Description FileModel model String uid IHostService host Returns Type Description System.Collections.Generic.IEnumerable < RestApiItemViewModel >"
  },
  "api/Microsoft.DocAsCode.EntityModel.Plugins.ApplyOverwriteDocumentForMref.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.Plugins.ApplyOverwriteDocumentForMref.html",
    "title": "Class ApplyOverwriteDocumentForMref\r\n   | DocFX website ",
    "keywords": "Class ApplyOverwriteDocumentForMref Inheritance Object BaseDocumentBuildStep ApplyOverwriteDocument < ItemViewModel > ApplyOverwriteDocumentForMref Namespace :Microsoft.DocAsCode.EntityModel.Plugins Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Export(\"ManagedReferenceDocumentProcessor\", typeof (IDocumentBuildStep))] public class ApplyOverwriteDocumentForMref : ApplyOverwriteDocument<ItemViewModel>, IDocumentBuildStep Properties BuildOrder Declaration public override int BuildOrder { get; } Proverty Value Type Description Int32 Name Declaration public override string Name { get; } Proverty Value Type Description String Methods GetItemsFromOverwriteDocument(FileModel, String, IHostService) Declaration protected override IEnumerable<ItemViewModel> GetItemsFromOverwriteDocument(FileModel fileModel, string uid, IHostService host) Parameters Type Name Description FileModel fileModel String uid IHostService host Returns Type Description System.Collections.Generic.IEnumerable < ItemViewModel > GetItemsToOverwrite(FileModel, String, IHostService) Declaration protected override IEnumerable<ItemViewModel> GetItemsToOverwrite(FileModel model, string uid, IHostService host) Parameters Type Name Description FileModel model String uid IHostService host Returns Type Description System.Collections.Generic.IEnumerable < ItemViewModel >"
  },
  "api/Microsoft.DocAsCode.EntityModel.OverwriteDocumentModel.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.OverwriteDocumentModel.html",
    "title": "Class OverwriteDocumentModel\r\n   | DocFX website ",
    "keywords": "Class OverwriteDocumentModel Inheritance Object OverwriteDocumentModel Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class OverwriteDocumentModel Properties Conceptual The markdown content from the overwrite document Declaration [YamlMember(Alias = \"conceptual\")] [JsonProperty(\"conceptual\")] public string Conceptual { get; set; } Proverty Value Type Description String Documentation The details for current overwrite document, containing the start/end line numbers, file path, and git info. Declaration [YamlMember(Alias = \"documentation\")] [JsonProperty(\"documentation\")] public SourceDetail Documentation { get; set; } Proverty Value Type Description SourceDetail Metadata Declaration [ExtensibleMember] [JsonExtensionData] public Dictionary<string, object> Metadata { get; set; } Proverty Value Type Description System.Collections.Generic.Dictionary < String , Object > Uid The uid for this overwrite document, as defined in YAML header Declaration [YamlMember(Alias = \"uid\")] [JsonProperty(\"uid\")] public string Uid { get; set; } Proverty Value Type Description String Methods ConvertTo<T>() Declaration public T ConvertTo<T>()where T : class Returns Type Description T"
  },
  "api/Microsoft.DocAsCode.EntityModel.NormalizeSyntax.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.NormalizeSyntax.html",
    "title": "Class NormalizeSyntax\r\n   | DocFX website ",
    "keywords": "Class NormalizeSyntax Inheritance Object NormalizeSyntax Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class NormalizeSyntax : IResolverPipeline Methods Run(MetadataModel, ResolverContext) Declaration public void Run(MetadataModel yaml, ResolverContext context) Parameters Type Name Description MetadataModel yaml ResolverContext context"
  },
  "api/Microsoft.DocAsCode.EntityModel.NameVisitorCreator.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.NameVisitorCreator.html",
    "title": "Class NameVisitorCreator\r\n   | DocFX website ",
    "keywords": "Class NameVisitorCreator Inheritance Object NameVisitorCreator Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public abstract class NameVisitorCreator Constructors NameVisitorCreator() Declaration protected NameVisitorCreator() Methods Create() Declaration protected abstract NameVisitor Create() Returns Type Description NameVisitor GetCSharp(NameOptions) Declaration public static NameVisitorCreator GetCSharp(NameOptions option) Parameters Type Name Description NameOptions option Returns Type Description NameVisitorCreator GetName(ISymbol) Declaration public string GetName(ISymbol symbol) Parameters Type Name Description Microsoft.CodeAnalysis.ISymbol symbol Returns Type Description String GetVB(NameOptions) Declaration public static NameVisitorCreator GetVB(NameOptions option) Parameters Type Name Description NameOptions option Returns Type Description NameVisitorCreator"
  },
  "api/Microsoft.DocAsCode.EntityModel.NameVisitor.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.NameVisitor.html",
    "title": "Class NameVisitor\r\n   | DocFX website ",
    "keywords": "Class NameVisitor Inheritance Object Microsoft.CodeAnalysis.SymbolVisitor NameVisitor Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public abstract class NameVisitor : SymbolVisitor Constructors NameVisitor() Declaration protected NameVisitor() Methods Append(String) Declaration protected void Append(string text) Parameters Type Name Description String text"
  },
  "api/Microsoft.DocAsCode.EntityModel.NameOptions.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.NameOptions.html",
    "title": "Enum NameOptions\r\n   | DocFX website ",
    "keywords": "Enum NameOptions Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Flags] public enum NameOptions Fields All Declaration All = 15 None Declaration None = 0 Qualified Declaration Qualified = 2 UseAlias Declaration UseAlias = 1 WithGenericParameter Declaration WithGenericParameter = 4 WithParameter Declaration WithParameter = 8"
  },
  "api/Microsoft.DocAsCode.EntityModel.MetadataModelUtility.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.MetadataModelUtility.html",
    "title": "Class MetadataModelUtility\r\n   | DocFX website ",
    "keywords": "Class MetadataModelUtility Inheritance Object MetadataModelUtility Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class MetadataModelUtility Methods ResolveApiHrefRelativeToCurrentApi(ApiReferenceModel, String, String) Declaration public static string ResolveApiHrefRelativeToCurrentApi(ApiReferenceModel index, string name, string currentApiName) Parameters Type Name Description ApiReferenceModel index String name String currentApiName Returns Type Description String"
  },
  "api/Microsoft.DocAsCode.EntityModel.MetadataModel.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.MetadataModel.html",
    "title": "Class MetadataModel\r\n   | DocFX website ",
    "keywords": "Class MetadataModel Inheritance Object MetadataModel Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class MetadataModel Properties Members Declaration public List<MetadataItem> Members { get; set; } Proverty Value Type Description System.Collections.Generic.List < MetadataItem > TocYamlViewModel Declaration public MetadataItem TocYamlViewModel { get; set; } Proverty Value Type Description MetadataItem"
  },
  "api/Microsoft.DocAsCode.EntityModel.MetadataMergers.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.MetadataMergers.html",
    "title": "Namespace Microsoft.DocAsCode.EntityModel.MetadataMergers\r\n   | DocFX website ",
    "keywords": "Namespace Microsoft.DocAsCode.EntityModel.MetadataMergers Classes MetadataMergeParameters MetadataMerger"
  },
  "api/Microsoft.DocAsCode.EntityModel.MetadataMergers.MetadataMerger.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.MetadataMergers.MetadataMerger.html",
    "title": "Class MetadataMerger\r\n   | DocFX website ",
    "keywords": "Class MetadataMerger Inheritance Object MetadataMerger Namespace :Microsoft.DocAsCode.EntityModel.MetadataMergers Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class MetadataMerger Fields PhaseName Declaration public const string PhaseName Methods Merge(MetadataMergeParameters) Declaration public void Merge(MetadataMergeParameters parameters) Parameters Type Name Description MetadataMergeParameters parameters"
  },
  "api/Microsoft.DocAsCode.EntityModel.MetadataMergers.MetadataMergeParameters.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.MetadataMergers.MetadataMergeParameters.html",
    "title": "Class MetadataMergeParameters\r\n   | DocFX website ",
    "keywords": "Class MetadataMergeParameters Inheritance Object MetadataMergeParameters Namespace :Microsoft.DocAsCode.EntityModel.MetadataMergers Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class MetadataMergeParameters Properties FileMetadata Declaration public FileMetadata FileMetadata { get; set; } Proverty Value Type Description FileMetadata Files Declaration public FileCollection Files { get; set; } Proverty Value Type Description FileCollection Metadata Declaration public ImmutableDictionary<string, object> Metadata { get; set; } Proverty Value Type Description System.Collections.Immutable.ImmutableDictionary < String , Object > OutputBaseDir Declaration public string OutputBaseDir { get; set; } Proverty Value Type Description String"
  },
  "api/Microsoft.DocAsCode.EntityModel.MetadataItem.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.MetadataItem.html",
    "title": "Class MetadataItem\r\n   | DocFX website ",
    "keywords": "Class MetadataItem Inheritance Object MetadataItem Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class MetadataItem : ICloneable Properties AssemblyNameList Declaration [YamlMember(Alias = \"assemblies\")] [JsonProperty(\"assemblies\")] public List<string> AssemblyNameList { get; set; } Proverty Value Type Description System.Collections.Generic.List < String > CommentModel Declaration [YamlIgnore] [JsonIgnore] public TripleSlashCommentModel CommentModel { get; set; } Proverty Value Type Description TripleSlashCommentModel DisplayNames Declaration [YamlMember(Alias = \"name\")] [JsonProperty(\"name\")] public SortedList<SyntaxLanguage, string> DisplayNames { get; set; } Proverty Value Type Description System.Collections.Generic.SortedList < SyntaxLanguage , String > DisplayQualifiedNames Declaration [YamlMember(Alias = \"qualifiedName\")] [JsonProperty(\"qualifiedName\")] public SortedList<SyntaxLanguage, string> DisplayQualifiedNames { get; set; } Proverty Value Type Description System.Collections.Generic.SortedList < SyntaxLanguage , String > Documentation Declaration [YamlMember(Alias = \"documentation\")] [JsonProperty(\"documentation\")] public SourceDetail Documentation { get; set; } Proverty Value Type Description SourceDetail Examples Declaration [YamlMember(Alias = \"example\")] [JsonProperty(\"example\")] public List<string> Examples { get; set; } Proverty Value Type Description System.Collections.Generic.List < String > Exceptions Declaration [YamlMember(Alias = \"exceptions\")] [JsonProperty(\"exceptions\")] public List<CrefInfo> Exceptions { get; set; } Proverty Value Type Description System.Collections.Generic.List < CrefInfo > Implements Declaration [YamlMember(Alias = \"implements\")] [JsonProperty(\"implements\")] public List<string> Implements { get; set; } Proverty Value Type Description System.Collections.Generic.List < String > Inheritance Declaration [YamlMember(Alias = \"inheritance\")] [JsonProperty(\"inheritance\")] public List<string> Inheritance { get; set; } Proverty Value Type Description System.Collections.Generic.List < String > InheritedMembers Declaration [YamlMember(Alias = \"inheritedMembers\")] [JsonProperty(\"inheritedMembers\")] public List<string> InheritedMembers { get; set; } Proverty Value Type Description System.Collections.Generic.List < String > IsInvalid Declaration [YamlIgnore] [JsonIgnore] public bool IsInvalid { get; set; } Proverty Value Type Description Boolean Items Declaration [YamlMember(Alias = \"items\")] [JsonProperty(\"items\")] public List<MetadataItem> Items { get; set; } Proverty Value Type Description System.Collections.Generic.List < MetadataItem > Language Declaration [YamlMember(Alias = \"language\")] [JsonProperty(\"language\")] public SyntaxLanguage Language { get; set; } Proverty Value Type Description SyntaxLanguage Layout Declaration public List<LayoutItem> Layout { get; set; } Proverty Value Type Description System.Collections.Generic.List < LayoutItem > Modifiers Declaration [YamlMember(Alias = \"modifiers\")] [JsonProperty(\"modifiers\")] public SortedList<SyntaxLanguage, List<string>> Modifiers { get; set; } Proverty Value Type Description System.Collections.Generic.SortedList < SyntaxLanguage , System.Collections.Generic.List < String >> Name Declaration [YamlMember(Alias = \"id\")] [JsonProperty(\"id\")] public string Name { get; set; } Proverty Value Type Description String NamespaceName Declaration [YamlMember(Alias = \"namespace\")] [JsonProperty(\"namespace\")] public string NamespaceName { get; set; } Proverty Value Type Description String Overridden Declaration [YamlMember(Alias = \"overridden\")] [JsonProperty(\"overridden\")] public string Overridden { get; set; } Proverty Value Type Description String Parent Declaration [YamlMember(Alias = \"parent\")] [JsonProperty(\"parent\")] public MetadataItem Parent { get; set; } Proverty Value Type Description MetadataItem RawComment Declaration [YamlIgnore] [JsonIgnore] public string RawComment { get; set; } Proverty Value Type Description String References Declaration [YamlMember(Alias = \"references\")] [JsonProperty(\"references\")] public Dictionary<string, ReferenceItem> References { get; set; } Proverty Value Type Description System.Collections.Generic.Dictionary < String , ReferenceItem > Remarks Declaration [YamlMember(Alias = \"remarks\")] [JsonProperty(\"remarks\")] public string Remarks { get; set; } Proverty Value Type Description String SeeAlsos Declaration [YamlMember(Alias = \"seealso\")] [JsonProperty(\"seealso\")] public List<CrefInfo> SeeAlsos { get; set; } Proverty Value Type Description System.Collections.Generic.List < CrefInfo > Sees Declaration [YamlMember(Alias = \"see\")] [JsonProperty(\"see\")] public List<CrefInfo> Sees { get; set; } Proverty Value Type Description System.Collections.Generic.List < CrefInfo > Source Declaration [YamlMember(Alias = \"source\")] [JsonProperty(\"source\")] public SourceDetail Source { get; set; } Proverty Value Type Description SourceDetail Summary Declaration [YamlMember(Alias = \"summary\")] [JsonProperty(\"summary\")] public string Summary { get; set; } Proverty Value Type Description String Syntax Declaration [YamlMember(Alias = \"syntax\")] [JsonProperty(\"syntax\")] public SyntaxDetail Syntax { get; set; } Proverty Value Type Description SyntaxDetail Type Declaration [YamlMember(Alias = \"type\")] [JsonProperty(\"type\")] public MemberType Type { get; set; } Proverty Value Type Description MemberType Methods Clone() Declaration public object Clone() Returns Type Description Object ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "api/Microsoft.DocAsCode.EntityModel.MemberType.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.MemberType.html",
    "title": "Enum MemberType\r\n   | DocFX website ",
    "keywords": "Enum MemberType Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Serializable] public enum MemberType Fields Assembly Declaration Assembly = 2 Class Declaration Class = 4 Constructor Declaration Constructor = 12 Default Declaration Default = 0 Delegate Declaration Delegate = 7 Enum Declaration Enum = 8 Event Declaration Event = 11 Field Declaration Field = 9 Interface Declaration Interface = 5 Method Declaration Method = 13 Namespace Declaration Namespace = 3 Operator Declaration Operator = 14 Property Declaration Property = 10 Struct Declaration Struct = 6 Toc Declaration Toc = 1"
  },
  "api/Microsoft.DocAsCode.EntityModel.MatchDetail.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.MatchDetail.html",
    "title": "Class MatchDetail\r\n   | DocFX website ",
    "keywords": "Class MatchDetail Inheritance Object MatchDetail Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class MatchDetail Properties EndLine Declaration public int EndLine { get; set; } Proverty Value Type Description Int32 Id The Id from regular expression's content group, e.g. ABC from @ABC Declaration public string Id { get; set; } Proverty Value Type Description String MatchedSection Declaration public Section MatchedSection { get; set; } Proverty Value Type Description Section Path Declaration public string Path { get; set; } Proverty Value Type Description String Properties Declaration public Dictionary<string, object> Properties { get; set; } Proverty Value Type Description System.Collections.Generic.Dictionary < String , Object > StartLine Declaration public int StartLine { get; set; } Proverty Value Type Description Int32 Methods GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32"
  },
  "api/Microsoft.DocAsCode.EntityModel.Location.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.Location.html",
    "title": "Struct Location\r\n   | DocFX website ",
    "keywords": "Struct Location Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public struct Location Properties EndLocation Declaration public Coordinate EndLocation { get; set; } Proverty Value Type Description Coordinate StartLocation Declaration public Coordinate StartLocation { get; set; } Proverty Value Type Description Coordinate Methods GetLocation(String, Int32, Int32) Declaration public static Location GetLocation(string input, int matchedStartIndex, int matchedLength) Parameters Type Name Description String input Int32 matchedStartIndex Int32 matchedLength Returns Type Description Location IsIn(Location) Declaration public bool IsIn(Location wrapper) Parameters Type Name Description Location wrapper Returns Type Description Boolean ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "api/Microsoft.DocAsCode.EntityModel.LinkItem.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.LinkItem.html",
    "title": "Class LinkItem\r\n   | DocFX website ",
    "keywords": "Class LinkItem Inheritance Object LinkItem Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class LinkItem Properties DisplayName Declaration [YamlMember(Alias = \"name\")] [JsonProperty(\"name\")] public string DisplayName { get; set; } Proverty Value Type Description String DisplayQualifiedNames Declaration [YamlMember(Alias = \"qualifiedName\")] [JsonProperty(\"qualifiedName\")] public string DisplayQualifiedNames { get; set; } Proverty Value Type Description String Href The url path for current source, should be resolved at some late stage Declaration [YamlMember(Alias = \"href\")] [JsonProperty(\"href\")] public string Href { get; set; } Proverty Value Type Description String IsExternalPath The external path for current source if it is not locally available Declaration [YamlMember(Alias = \"isExternal\")] [JsonProperty(\"isExternal\")] public bool IsExternalPath { get; set; } Proverty Value Type Description Boolean Name Declaration [YamlMember(Alias = \"id\")] [JsonProperty(\"id\")] public string Name { get; set; } Proverty Value Type Description String Methods Clone() Declaration public LinkItem Clone() Returns Type Description LinkItem"
  },
  "api/Microsoft.DocAsCode.EntityModel.LayoutItem.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.LayoutItem.html",
    "title": "Enum LayoutItem\r\n   | DocFX website ",
    "keywords": "Enum LayoutItem Defines the layout for an API page Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public enum LayoutItem Fields Exception Declaration Exception = 2 ExternalComments Declaration ExternalComments = 5 Hierarchy Declaration Hierarchy = 1 InlineComments Declaration InlineComments = 4 MemberTable Declaration MemberTable = 7 SeeAlso Declaration SeeAlso = 6 Syntax Declaration Syntax = 3 Title Declaration Title = 0"
  },
  "api/Microsoft.DocAsCode.EntityModel.LayoutCheckAndCleanup.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.LayoutCheckAndCleanup.html",
    "title": "Class LayoutCheckAndCleanup\r\n   | DocFX website ",
    "keywords": "Class LayoutCheckAndCleanup Inheritance Object LayoutCheckAndCleanup Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class LayoutCheckAndCleanup : IResolverPipeline Methods Run(MetadataModel, ResolverContext) The yaml layout should be namespace -- class level -- method level Declaration public void Run(MetadataModel yaml, ResolverContext context) Parameters Type Name Description MetadataModel yaml ResolverContext context"
  },
  "api/Microsoft.DocAsCode.EntityModel.JintProcessorHelper.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.JintProcessorHelper.html",
    "title": "Class JintProcessorHelper\r\n   | DocFX website ",
    "keywords": "Class JintProcessorHelper Inheritance Object JintProcessorHelper Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class JintProcessorHelper Methods ConvertJTokenToJsValue(JToken) Declaration public static JsValue ConvertJTokenToJsValue(JToken raw) Parameters Type Name Description Newtonsoft.Json.Linq.JToken raw Returns Type Description Jint.Native.JsValue ConvertStrongTypeToJsValue(Object) Declaration public static JsValue ConvertStrongTypeToJsValue(object raw) Parameters Type Name Description Object raw Returns Type Description Jint.Native.JsValue"
  },
  "api/Microsoft.DocAsCode.EntityModel.ITripleSlashCommentParserContext.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.ITripleSlashCommentParserContext.html",
    "title": "Interface ITripleSlashCommentParserContext\r\n   | DocFX website ",
    "keywords": "Interface ITripleSlashCommentParserContext Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public interface ITripleSlashCommentParserContext Properties AddReferenceDelegate Declaration Action<string> AddReferenceDelegate { get; set; } Proverty Value Type Description System.Action < String > PreserveRawInlineComments Declaration bool PreserveRawInlineComments { get; set; } Proverty Value Type Description Boolean Source Declaration SourceDetail Source { get; set; } Proverty Value Type Description SourceDetail"
  },
  "api/Microsoft.DocAsCode.EntityModel.IResolverPipeline.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.IResolverPipeline.html",
    "title": "Interface IResolverPipeline\r\n   | DocFX website ",
    "keywords": "Interface IResolverPipeline Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public interface IResolverPipeline Methods Run(MetadataModel, ResolverContext) Declaration void Run(MetadataModel yaml, ResolverContext context) Parameters Type Name Description MetadataModel yaml ResolverContext context"
  },
  "api/Microsoft.DocAsCode.EntityModel.FileResourceCollection.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.FileResourceCollection.html",
    "title": "Class FileResourceCollection\r\n   | DocFX website ",
    "keywords": "Class FileResourceCollection Inheritance Object ResourceCollection FileResourceCollection Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public sealed class FileResourceCollection : ResourceCollection, IDisposable Constructors FileResourceCollection(String, Int32) Declaration public FileResourceCollection(string directory, int maxSearchLevel = 5) Parameters Type Name Description String directory Int32 maxSearchLevel Properties IsEmpty Declaration public override bool IsEmpty { get; } Proverty Value Type Description Boolean Name Declaration public override string Name { get; } Proverty Value Type Description String Names Declaration public override IEnumerable<string> Names { get; } Proverty Value Type Description System.Collections.Generic.IEnumerable < String > Methods GetResourceStream(String) Declaration public override Stream GetResourceStream(string name) Parameters Type Name Description String name Returns Type Description Stream"
  },
  "api/Microsoft.DocAsCode.EntityModel.FileMetadataItem.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.FileMetadataItem.html",
    "title": "Class FileMetadataItem\r\n   | DocFX website ",
    "keywords": "Class FileMetadataItem Inheritance Object FileMetadataItem Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public sealed class FileMetadataItem Constructors FileMetadataItem(GlobMatcher, String, Object) Declaration public FileMetadataItem(GlobMatcher glob, string key, object value) Parameters Type Name Description GlobMatcher glob String key Object value Properties Glob Declaration public GlobMatcher Glob { get; set; } Proverty Value Type Description GlobMatcher Key Declaration public string Key { get; set; } Proverty Value Type Description String Value Declaration public object Value { get; set; } Proverty Value Type Description Object"
  },
  "api/Microsoft.DocAsCode.EntityModel.FileMetadata.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.FileMetadata.html",
    "title": "Class FileMetadata\r\n   | DocFX website ",
    "keywords": "Class FileMetadata Inheritance Object System.Collections.Generic.Dictionary < String , System.Collections.Immutable.ImmutableArray < FileMetadataItem >> FileMetadata Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public sealed class FileMetadata : Dictionary<string, ImmutableArray<FileMetadataItem>>, IDictionary<string, ImmutableArray<FileMetadataItem>>, ICollection<KeyValuePair<string, ImmutableArray<FileMetadataItem>>>, IDictionary, ICollection, IReadOnlyDictionary<string, ImmutableArray<FileMetadataItem>>, IReadOnlyCollection<KeyValuePair<string, ImmutableArray<FileMetadataItem>>>, IEnumerable<KeyValuePair<string, ImmutableArray<FileMetadataItem>>>, IEnumerable, ISerializable, IDeserializationCallback Constructors FileMetadata(String) Declaration public FileMetadata(string baseDir) Parameters Type Name Description String baseDir FileMetadata(String, IDictionary<String, ImmutableArray<FileMetadataItem>>) Declaration public FileMetadata(string baseDir, IDictionary<string, ImmutableArray<FileMetadataItem>> dictionary) Parameters Type Name Description String baseDir System.Collections.Generic.IDictionary < String , System.Collections.Immutable.ImmutableArray < FileMetadataItem >> dictionary Properties BaseDir Declaration public string BaseDir { get; } Proverty Value Type Description String"
  },
  "api/Microsoft.DocAsCode.EntityModel.ExtractSearchData.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.ExtractSearchData.html",
    "title": "Namespace Microsoft.DocAsCode.EntityModel.ExtractSearchData\r\n   | DocFX website ",
    "keywords": "Namespace Microsoft.DocAsCode.EntityModel.ExtractSearchData Classes ExtractSearchIndexFromHtml SearchIndexItem"
  },
  "api/Microsoft.DocAsCode.EntityModel.ExtractSearchData.SearchIndexItem.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.ExtractSearchData.SearchIndexItem.html",
    "title": "Class SearchIndexItem\r\n   | DocFX website ",
    "keywords": "Class SearchIndexItem Inheritance Object SearchIndexItem Namespace :Microsoft.DocAsCode.EntityModel.ExtractSearchData Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class SearchIndexItem Properties Href Declaration [JsonProperty(\"href\")] public string Href { get; set; } Proverty Value Type Description String Keywords Declaration [JsonProperty(\"keywords\")] public string Keywords { get; set; } Proverty Value Type Description String Title Declaration [JsonProperty(\"title\")] public string Title { get; set; } Proverty Value Type Description String Methods Equals(SearchIndexItem) Declaration public bool Equals(SearchIndexItem other) Parameters Type Name Description SearchIndexItem other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32"
  },
  "api/Microsoft.DocAsCode.EntityModel.ExtractSearchData.ExtractSearchIndexFromHtml.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.ExtractSearchData.ExtractSearchIndexFromHtml.html",
    "title": "Class ExtractSearchIndexFromHtml\r\n   | DocFX website ",
    "keywords": "Class ExtractSearchIndexFromHtml Inheritance Object ExtractSearchIndexFromHtml Namespace :Microsoft.DocAsCode.EntityModel.ExtractSearchData Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class ExtractSearchIndexFromHtml Methods ExtractItem(HtmlDocument, String) Declaration public static SearchIndexItem ExtractItem(HtmlDocument html, string href) Parameters Type Name Description HtmlAgilityPack.HtmlDocument html String href Returns Type Description SearchIndexItem GenerateFile(List<TemplateManifestItem>, String) Declaration public static void GenerateFile(List<TemplateManifestItem> manifest, string baseDir) Parameters Type Name Description System.Collections.Generic.List < TemplateManifestItem > manifest String baseDir"
  },
  "api/Microsoft.DocAsCode.EntityModel.ExtractMetadataWorker.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.ExtractMetadataWorker.html",
    "title": "Class ExtractMetadataWorker\r\n   | DocFX website ",
    "keywords": "Class ExtractMetadataWorker Inheritance Object ExtractMetadataWorker Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public sealed class ExtractMetadataWorker : IDisposable Constructors ExtractMetadataWorker(ExtractMetadataInputModel, Boolean) Declaration public ExtractMetadataWorker(ExtractMetadataInputModel input, bool rebuild) Parameters Type Name Description ExtractMetadataInputModel input Boolean rebuild Methods Dispose() Declaration public void Dispose() ExtractMetadataAsync() Declaration public Task ExtractMetadataAsync() Returns Type Description Task"
  },
  "api/Microsoft.DocAsCode.EntityModel.ExtractMetadataInputModel.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.ExtractMetadataInputModel.html",
    "title": "Class ExtractMetadataInputModel\r\n   | DocFX website ",
    "keywords": "Class ExtractMetadataInputModel Inheritance Object ExtractMetadataInputModel Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class ExtractMetadataInputModel Properties ApiFolderName Declaration public string ApiFolderName { get; set; } Proverty Value Type Description String ExternalReferences Declaration public List<string> ExternalReferences { get; set; } Proverty Value Type Description System.Collections.Generic.List < String > ForceRebuild Declaration public bool ForceRebuild { get; set; } Proverty Value Type Description Boolean IndexFileName Declaration public string IndexFileName { get; set; } Proverty Value Type Description String Items Declaration public Dictionary<string, List<string>> Items { get; set; } Proverty Value Type Description System.Collections.Generic.Dictionary < String , System.Collections.Generic.List < String >> PreserveRawInlineComments Declaration public bool PreserveRawInlineComments { get; set; } Proverty Value Type Description Boolean TocFileName Declaration public string TocFileName { get; set; } Proverty Value Type Description String Methods Clone() Declaration public ExtractMetadataInputModel Clone() Returns Type Description ExtractMetadataInputModel ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "api/Microsoft.DocAsCode.EntityModel.ExternalReferencePackageWriter.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.ExternalReferencePackageWriter.html",
    "title": "Class ExternalReferencePackageWriter\r\n   | DocFX website ",
    "keywords": "Class ExternalReferencePackageWriter Inheritance Object ExternalReferencePackageWriter Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class ExternalReferencePackageWriter : IDisposable Methods AddFiles(String, IReadOnlyList<String>) Declaration public void AddFiles(string relativePath, IReadOnlyList<string> docPaths) Parameters Type Name Description String relativePath System.Collections.Generic.IReadOnlyList < String > docPaths AddOrUpdateEntry(String, List<ReferenceViewModel>) Declaration public void AddOrUpdateEntry(string entryName, List<ReferenceViewModel> vm) Parameters Type Name Description String entryName System.Collections.Generic.List < ReferenceViewModel > vm AddProjects(IReadOnlyList<String>) Declaration public void AddProjects(IReadOnlyList<string> projectPaths) Parameters Type Name Description System.Collections.Generic.IReadOnlyList < String > projectPaths Append(String, Uri) Declaration public static ExternalReferencePackageWriter Append(string packageFile, Uri baseUri) Parameters Type Name Description String packageFile Uri baseUri Returns Type Description ExternalReferencePackageWriter Create(String, Uri) Declaration public static ExternalReferencePackageWriter Create(string packageFile, Uri baseUri) Parameters Type Name Description String packageFile Uri baseUri Returns Type Description ExternalReferencePackageWriter Dispose() Declaration public void Dispose()"
  },
  "api/Microsoft.DocAsCode.EntityModel.ExternalReferencePackageReader.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.ExternalReferencePackageReader.html",
    "title": "Class ExternalReferencePackageReader\r\n   | DocFX website ",
    "keywords": "Class ExternalReferencePackageReader Inheritance Object ExternalReferencePackageReader Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class ExternalReferencePackageReader : IDisposable Constructors ExternalReferencePackageReader(String) Declaration public ExternalReferencePackageReader(string packageFile) Parameters Type Name Description String packageFile Methods CreateNoThrow(String) Declaration public static ExternalReferencePackageReader CreateNoThrow(string packageFile) Parameters Type Name Description String packageFile Returns Type Description ExternalReferencePackageReader Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Finalize() Declaration protected void Finalize() SeekUidIndex(String) Declaration protected virtual int SeekUidIndex(string uid) Parameters Type Name Description String uid Returns Type Description Int32 TryGetReference(String, out ReferenceViewModel) Declaration public bool TryGetReference(string uid, out ReferenceViewModel vm) Parameters Type Name Description String uid ReferenceViewModel vm Returns Type Description Boolean"
  },
  "api/Microsoft.DocAsCode.EntityModel.ExternalReferencePackageCollection.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.ExternalReferencePackageCollection.html",
    "title": "Class ExternalReferencePackageCollection\r\n   | DocFX website ",
    "keywords": "Class ExternalReferencePackageCollection Inheritance Object ExternalReferencePackageCollection Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class ExternalReferencePackageCollection : IDisposable Constructors ExternalReferencePackageCollection(IEnumerable<String>) Declaration public ExternalReferencePackageCollection(IEnumerable<string> packageFiles) Parameters Type Name Description System.Collections.Generic.IEnumerable < String > packageFiles Properties Readers Declaration public ImmutableList<ExternalReferencePackageReader> Readers { get; } Proverty Value Type Description System.Collections.Immutable.ImmutableList < ExternalReferencePackageReader > Methods Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Finalize() Declaration protected void Finalize() TryGetReference(String, out ReferenceViewModel) Declaration public bool TryGetReference(string uid, out ReferenceViewModel vm) Parameters Type Name Description String uid ReferenceViewModel vm Returns Type Description Boolean"
  },
  "api/Microsoft.DocAsCode.EntityModel.ExternalReferenceConverter.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.ExternalReferenceConverter.html",
    "title": "Class ExternalReferenceConverter\r\n   | DocFX website ",
    "keywords": "Class ExternalReferenceConverter Inheritance Object ExternalReferenceConverter Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class ExternalReferenceConverter Methods ToExternalReferenceViewModel(PageViewModel, Uri) Declaration public static IEnumerable<ReferenceViewModel> ToExternalReferenceViewModel(PageViewModel page, Uri baseUri) Parameters Type Name Description PageViewModel page Uri baseUri Returns Type Description System.Collections.Generic.IEnumerable < ReferenceViewModel >"
  },
  "api/Microsoft.DocAsCode.EntityModel.ExportSettings.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.ExportSettings.html",
    "title": "Class ExportSettings\r\n   | DocFX website ",
    "keywords": "Class ExportSettings Inheritance Object ExportSettings Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class ExportSettings Constructors ExportSettings() Declaration public ExportSettings() ExportSettings(ExportSettings) Declaration public ExportSettings(ExportSettings settings) Parameters Type Name Description ExportSettings settings Properties Export Declaration public bool Export { get; set; } Proverty Value Type Description Boolean Extension Declaration public string Extension { get; set; } Proverty Value Type Description String OutputFolder Declaration public string OutputFolder { get; set; } Proverty Value Type Description String PathRewriter Declaration public Func<string, string> PathRewriter { get; set; } Proverty Value Type Description System.Func < String , String >"
  },
  "api/Microsoft.DocAsCode.EntityModel.CSYamlModelGenerator.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.CSYamlModelGenerator.html",
    "title": "Class CSYamlModelGenerator\r\n   | DocFX website ",
    "keywords": "Class CSYamlModelGenerator Inheritance Object YamlModelGenerator SimpleYamlModelGenerator CSYamlModelGenerator Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class CSYamlModelGenerator : SimpleYamlModelGenerator Constructors CSYamlModelGenerator() Declaration public CSYamlModelGenerator() Methods DefaultVisit(ISymbol, MetadataItem, SymbolVisitorAdapter) Declaration public override void DefaultVisit(ISymbol symbol, MetadataItem item, SymbolVisitorAdapter adapter) Parameters Type Name Description Microsoft.CodeAnalysis.ISymbol symbol MetadataItem item SymbolVisitorAdapter adapter GenerateEvent(IEventSymbol, MetadataItem, SymbolVisitorAdapter) Declaration public override void GenerateEvent(IEventSymbol symbol, MetadataItem item, SymbolVisitorAdapter adapter) Parameters Type Name Description Microsoft.CodeAnalysis.IEventSymbol symbol MetadataItem item SymbolVisitorAdapter adapter GenerateField(IFieldSymbol, MetadataItem, SymbolVisitorAdapter) Declaration public override void GenerateField(IFieldSymbol symbol, MetadataItem item, SymbolVisitorAdapter adapter) Parameters Type Name Description Microsoft.CodeAnalysis.IFieldSymbol symbol MetadataItem item SymbolVisitorAdapter adapter GenerateMethod(IMethodSymbol, MetadataItem, SymbolVisitorAdapter) Declaration public override void GenerateMethod(IMethodSymbol symbol, MetadataItem item, SymbolVisitorAdapter adapter) Parameters Type Name Description Microsoft.CodeAnalysis.IMethodSymbol symbol MetadataItem item SymbolVisitorAdapter adapter GenerateNamedType(INamedTypeSymbol, MetadataItem, SymbolVisitorAdapter) Declaration public override void GenerateNamedType(INamedTypeSymbol symbol, MetadataItem item, SymbolVisitorAdapter adapter) Parameters Type Name Description Microsoft.CodeAnalysis.INamedTypeSymbol symbol MetadataItem item SymbolVisitorAdapter adapter GenerateProperty(IPropertySymbol, MetadataItem, SymbolVisitorAdapter) Declaration public override void GenerateProperty(IPropertySymbol symbol, MetadataItem item, SymbolVisitorAdapter adapter) Parameters Type Name Description Microsoft.CodeAnalysis.IPropertySymbol symbol MetadataItem item SymbolVisitorAdapter adapter GenerateReference(ISymbol, ReferenceItem, SymbolVisitorAdapter) Declaration protected override void GenerateReference(ISymbol symbol, ReferenceItem reference, SymbolVisitorAdapter adapter) Parameters Type Name Description Microsoft.CodeAnalysis.ISymbol symbol ReferenceItem reference SymbolVisitorAdapter adapter GetLiteralExpressionCore(Object, ITypeSymbol) Declaration public static ExpressionSyntax GetLiteralExpressionCore(object value, ITypeSymbol type) Parameters Type Name Description Object value Microsoft.CodeAnalysis.ITypeSymbol type Returns Type Description Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax GetSyntaxContent(MemberType, ISymbol, SymbolVisitorAdapter) Declaration protected override string GetSyntaxContent(MemberType typeKind, ISymbol symbol, SymbolVisitorAdapter adapter) Parameters Type Name Description MemberType typeKind Microsoft.CodeAnalysis.ISymbol symbol SymbolVisitorAdapter adapter Returns Type Description String"
  },
  "api/Microsoft.DocAsCode.EntityModel.CSReferenceItemVisitor.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.CSReferenceItemVisitor.html",
    "title": "Class CSReferenceItemVisitor\r\n   | DocFX website ",
    "keywords": "Class CSReferenceItemVisitor Inheritance Object Microsoft.CodeAnalysis.SymbolVisitor ReferenceItemVisitor CSReferenceItemVisitor Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class CSReferenceItemVisitor : ReferenceItemVisitor Constructors CSReferenceItemVisitor(ReferenceItem) Declaration public CSReferenceItemVisitor(ReferenceItem referenceItem) Parameters Type Name Description ReferenceItem referenceItem Methods AddBeginGenericParameter() Declaration protected override void AddBeginGenericParameter() AddEndGenericParameter() Declaration protected override void AddEndGenericParameter() AddGenericParameterSeparator() Declaration protected override void AddGenericParameterSeparator() AddLinkItems(INamedTypeSymbol, Boolean) Declaration protected override void AddLinkItems(INamedTypeSymbol symbol, bool withGenericeParameter) Parameters Type Name Description Microsoft.CodeAnalysis.INamedTypeSymbol symbol Boolean withGenericeParameter VisitArrayType(IArrayTypeSymbol) Declaration public override void VisitArrayType(IArrayTypeSymbol symbol) Parameters Type Name Description Microsoft.CodeAnalysis.IArrayTypeSymbol symbol VisitEvent(IEventSymbol) Declaration public override void VisitEvent(IEventSymbol symbol) Parameters Type Name Description Microsoft.CodeAnalysis.IEventSymbol symbol VisitField(IFieldSymbol) Declaration public override void VisitField(IFieldSymbol symbol) Parameters Type Name Description Microsoft.CodeAnalysis.IFieldSymbol symbol VisitMethod(IMethodSymbol) Declaration public override void VisitMethod(IMethodSymbol symbol) Parameters Type Name Description Microsoft.CodeAnalysis.IMethodSymbol symbol VisitNamespace(INamespaceSymbol) Declaration public override void VisitNamespace(INamespaceSymbol symbol) Parameters Type Name Description Microsoft.CodeAnalysis.INamespaceSymbol symbol VisitPointerType(IPointerTypeSymbol) Declaration public override void VisitPointerType(IPointerTypeSymbol symbol) Parameters Type Name Description Microsoft.CodeAnalysis.IPointerTypeSymbol symbol VisitProperty(IPropertySymbol) Declaration public override void VisitProperty(IPropertySymbol symbol) Parameters Type Name Description Microsoft.CodeAnalysis.IPropertySymbol symbol VisitTypeParameter(ITypeParameterSymbol) Declaration public override void VisitTypeParameter(ITypeParameterSymbol symbol) Parameters Type Name Description Microsoft.CodeAnalysis.ITypeParameterSymbol symbol"
  },
  "api/Microsoft.DocAsCode.EntityModel.CSharpNameVisitorCreator.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.CSharpNameVisitorCreator.html",
    "title": "Class CSharpNameVisitorCreator\r\n   | DocFX website ",
    "keywords": "Class CSharpNameVisitorCreator Inheritance Object NameVisitorCreator CSharpNameVisitorCreator Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class CSharpNameVisitorCreator : NameVisitorCreator Constructors CSharpNameVisitorCreator(NameOptions) Declaration public CSharpNameVisitorCreator(NameOptions options) Parameters Type Name Description NameOptions options Methods Create() Declaration protected override NameVisitor Create() Returns Type Description NameVisitor"
  },
  "api/Microsoft.DocAsCode.EntityModel.CrefInfo.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.CrefInfo.html",
    "title": "Class CrefInfo\r\n   | DocFX website ",
    "keywords": "Class CrefInfo Inheritance Object CrefInfo Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Serializable] public class CrefInfo Properties Description Declaration [YamlMember(Alias = \"description\")] [JsonProperty(\"description\")] public string Description { get; set; } Proverty Value Type Description String Type Declaration [YamlMember(Alias = \"type\")] [MergeOption(MergeOption.MergeKey)] [JsonProperty(\"type\")] public string Type { get; set; } Proverty Value Type Description String"
  },
  "api/Microsoft.DocAsCode.EntityModel.Coordinate.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.Coordinate.html",
    "title": "Struct Coordinate\r\n   | DocFX website ",
    "keywords": "Struct Coordinate Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public struct Coordinate : IComparable<Coordinate> Fields Default Declaration public static readonly Coordinate Default Properties Column Declaration public int Column { get; set; } Proverty Value Type Description Int32 Line Declaration public int Line { get; set; } Proverty Value Type Description Int32 Methods Add(Coordinate) Declaration public Coordinate Add(Coordinate toAdd) Parameters Type Name Description Coordinate toAdd Returns Type Description Coordinate CompareTo(Coordinate) Declaration public int CompareTo(Coordinate other) Parameters Type Name Description Coordinate other Returns Type Description Int32 GetCoordinate(String) Lines and Columns start at 0 to leverage default value, NOTE that IDE start at 1, need to +1 at the outermost Declaration public static Coordinate GetCoordinate(string content) Parameters Type Name Description String content Returns Type Description Coordinate ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "api/Microsoft.DocAsCode.EntityModel.Constants.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.Constants.html",
    "title": "Class Constants\r\n   | DocFX website ",
    "keywords": "Class Constants Inheritance Object Constants Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class Constants Fields ContentPlaceholder Declaration public static string ContentPlaceholder DefaultParallelism Declaration public const int DefaultParallelism IndexFileName Declaration public const string IndexFileName YamlExtension Declaration public const string YamlExtension"
  },
  "api/Microsoft.DocAsCode.EntityModel.Constants.PropertyName.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.Constants.PropertyName.html",
    "title": "Class Constants.PropertyName\r\n   | DocFX website ",
    "keywords": "Class Constants.PropertyName TODO: add other property name const Inheritance Object Constants.PropertyName Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class PropertyName Fields Conceptual Declaration public const string Conceptual Documentation Declaration public const string Documentation DocumentType Declaration public const string DocumentType Href Declaration public const string Href Id Declaration public const string Id Path Declaration public const string Path Source Declaration public const string Source Title Declaration public const string Title Type Declaration public const string Type Uid Declaration public const string Uid"
  },
  "api/Microsoft.DocAsCode.EntityModel.CompositeYamlModelGenerator.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.CompositeYamlModelGenerator.html",
    "title": "Class CompositeYamlModelGenerator\r\n   | DocFX website ",
    "keywords": "Class CompositeYamlModelGenerator Inheritance Object YamlModelGenerator CompositeYamlModelGenerator Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public sealed class CompositeYamlModelGenerator : YamlModelGenerator Constructors CompositeYamlModelGenerator(SimpleYamlModelGenerator[]) Declaration public CompositeYamlModelGenerator(params SimpleYamlModelGenerator[] generators) Parameters Type Name Description SimpleYamlModelGenerator [] generators CompositeYamlModelGenerator(IEnumerable<SimpleYamlModelGenerator>) Declaration public CompositeYamlModelGenerator(IEnumerable<SimpleYamlModelGenerator> generators) Parameters Type Name Description System.Collections.Generic.IEnumerable < SimpleYamlModelGenerator > generators Methods DefaultVisit(ISymbol, MetadataItem, SymbolVisitorAdapter) Declaration public override void DefaultVisit(ISymbol symbol, MetadataItem item, SymbolVisitorAdapter adapter) Parameters Type Name Description Microsoft.CodeAnalysis.ISymbol symbol MetadataItem item SymbolVisitorAdapter adapter GenerateEvent(IEventSymbol, MetadataItem, SymbolVisitorAdapter) Declaration public override void GenerateEvent(IEventSymbol symbol, MetadataItem item, SymbolVisitorAdapter adapter) Parameters Type Name Description Microsoft.CodeAnalysis.IEventSymbol symbol MetadataItem item SymbolVisitorAdapter adapter GenerateField(IFieldSymbol, MetadataItem, SymbolVisitorAdapter) Declaration public override void GenerateField(IFieldSymbol symbol, MetadataItem item, SymbolVisitorAdapter adapter) Parameters Type Name Description Microsoft.CodeAnalysis.IFieldSymbol symbol MetadataItem item SymbolVisitorAdapter adapter GenerateMethod(IMethodSymbol, MetadataItem, SymbolVisitorAdapter) Declaration public override void GenerateMethod(IMethodSymbol symbol, MetadataItem item, SymbolVisitorAdapter adapter) Parameters Type Name Description Microsoft.CodeAnalysis.IMethodSymbol symbol MetadataItem item SymbolVisitorAdapter adapter GenerateNamedType(INamedTypeSymbol, MetadataItem, SymbolVisitorAdapter) Declaration public override void GenerateNamedType(INamedTypeSymbol symbol, MetadataItem item, SymbolVisitorAdapter adapter) Parameters Type Name Description Microsoft.CodeAnalysis.INamedTypeSymbol symbol MetadataItem item SymbolVisitorAdapter adapter GenerateProperty(IPropertySymbol, MetadataItem, SymbolVisitorAdapter) Declaration public override void GenerateProperty(IPropertySymbol symbol, MetadataItem item, SymbolVisitorAdapter adapter) Parameters Type Name Description Microsoft.CodeAnalysis.IPropertySymbol symbol MetadataItem item SymbolVisitorAdapter adapter Operators Addition(CompositeYamlModelGenerator, SimpleYamlModelGenerator) Declaration public static CompositeYamlModelGenerator operator +(CompositeYamlModelGenerator left, SimpleYamlModelGenerator right) Parameters Type Name Description CompositeYamlModelGenerator left SimpleYamlModelGenerator right Returns Type Description CompositeYamlModelGenerator"
  },
  "api/Microsoft.DocAsCode.EntityModel.CompositeResourceCollectionWithOverridden.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.CompositeResourceCollectionWithOverridden.html",
    "title": "Class CompositeResourceCollectionWithOverridden\r\n   | DocFX website ",
    "keywords": "Class CompositeResourceCollectionWithOverridden Inheritance Object ResourceCollection CompositeResourceCollectionWithOverridden Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public sealed class CompositeResourceCollectionWithOverridden : ResourceCollection, IDisposable Constructors CompositeResourceCollectionWithOverridden(IEnumerable<ResourceCollection>) Declaration public CompositeResourceCollectionWithOverridden(IEnumerable<ResourceCollection> collectionsInOverriddenOrder) Parameters Type Name Description System.Collections.Generic.IEnumerable < ResourceCollection > collectionsInOverriddenOrder Properties IsEmpty Declaration public override bool IsEmpty { get; } Proverty Value Type Description Boolean Name Declaration public override string Name { get; } Proverty Value Type Description String Names Declaration public override IEnumerable<string> Names { get; } Proverty Value Type Description System.Collections.Generic.IEnumerable < String > Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing GetResourceStream(String) Declaration public override Stream GetResourceStream(string name) Parameters Type Name Description String name Returns Type Description Stream"
  },
  "api/Microsoft.DocAsCode.EntityModel.CacheBase.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.CacheBase.html",
    "title": "Class CacheBase\r\n   | DocFX website ",
    "keywords": "Class CacheBase Inheritance Object CacheBase Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public abstract class CacheBase Constructors CacheBase(String) Declaration public CacheBase(string path) Parameters Type Name Description String path Fields AssemblyName Declaration public static readonly string AssemblyName Methods CleanupConfig() Declaration protected virtual void CleanupConfig() GetConfig(String) Declaration protected virtual BuildInfo GetConfig(string key) Parameters Type Name Description String key Returns Type Description BuildInfo GetValidConfig(IEnumerable<String>) Declaration public BuildInfo GetValidConfig(IEnumerable<string> inputProjects) Parameters Type Name Description System.Collections.Generic.IEnumerable < String > inputProjects Returns Type Description BuildInfo ReadConfig(String) Declaration protected virtual BuildInfo ReadConfig(string key) Parameters Type Name Description String key Returns Type Description BuildInfo SaveConfig(String, BuildInfo) Declaration protected virtual void SaveConfig(string key, BuildInfo config) Parameters Type Name Description String key BuildInfo config SaveToCache(IEnumerable<String>, IDictionary<String, List<String>>, DateTime, String, IList<String>) Declaration public void SaveToCache(IEnumerable<string> inputProjects, IDictionary<string, List<string>> containedFiles, DateTime triggeredTime, string outputFolder, IList<string> fileRelativePaths) Parameters Type Name Description System.Collections.Generic.IEnumerable < String > inputProjects System.Collections.Generic.IDictionary < String , System.Collections.Generic.List < String >> containedFiles DateTime triggeredTime String outputFolder System.Collections.Generic.IList < String > fileRelativePaths"
  },
  "api/Microsoft.DocAsCode.EntityModel.BuildToc.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.BuildToc.html",
    "title": "Class BuildToc\r\n   | DocFX website ",
    "keywords": "Class BuildToc Inheritance Object BuildToc Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class BuildToc : IResolverPipeline Methods Run(MetadataModel, ResolverContext) Declaration public void Run(MetadataModel yaml, ResolverContext context) Parameters Type Name Description MetadataModel yaml ResolverContext context"
  },
  "api/Microsoft.DocAsCode.EntityModel.BuildOutputs.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.BuildOutputs.html",
    "title": "Namespace Microsoft.DocAsCode.EntityModel.BuildOutputs\r\n   | DocFX website ",
    "keywords": "Namespace Microsoft.DocAsCode.EntityModel.BuildOutputs Classes ApiBuildOutput ApiBuildOutputUtility ApiCrefInfoBuildOutput ApiLanguageValuePair ApiParameterBuildOutput ApiReferenceBuildOutput ApiSyntaxBuildOutput"
  },
  "api/Microsoft.DocAsCode.EntityModel.BuildOutputs.ApiSyntaxBuildOutput.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.BuildOutputs.ApiSyntaxBuildOutput.html",
    "title": "Class ApiSyntaxBuildOutput\r\n   | DocFX website ",
    "keywords": "Class ApiSyntaxBuildOutput Inheritance Object ApiSyntaxBuildOutput Namespace :Microsoft.DocAsCode.EntityModel.BuildOutputs Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Serializable] public class ApiSyntaxBuildOutput Properties Content Declaration [YamlMember(Alias = \"content\")] [JsonProperty(\"content\")] public List<ApiLanguageValuePair> Content { get; set; } Proverty Value Type Description System.Collections.Generic.List < ApiLanguageValuePair > Parameters Declaration [YamlMember(Alias = \"parameters\")] [JsonProperty(\"parameters\")] public List<ApiParameterBuildOutput> Parameters { get; set; } Proverty Value Type Description System.Collections.Generic.List < ApiParameterBuildOutput > Return Declaration [YamlMember(Alias = \"return\")] [JsonProperty(\"return\")] public ApiParameterBuildOutput Return { get; set; } Proverty Value Type Description ApiParameterBuildOutput TypeParameters Declaration [YamlMember(Alias = \"typeParameters\")] [JsonProperty(\"typeParameters\")] public List<ApiParameterBuildOutput> TypeParameters { get; set; } Proverty Value Type Description System.Collections.Generic.List < ApiParameterBuildOutput > Methods Expand(Dictionary<String, ApiReferenceBuildOutput>, String[]) Declaration public void Expand(Dictionary<string, ApiReferenceBuildOutput> references, string[] supportedLanguages) Parameters Type Name Description System.Collections.Generic.Dictionary < String , ApiReferenceBuildOutput > references String [] supportedLanguages FromModel(SyntaxDetailViewModel, Dictionary<String, ApiReferenceBuildOutput>, String[]) Declaration public static ApiSyntaxBuildOutput FromModel(SyntaxDetailViewModel model, Dictionary<string, ApiReferenceBuildOutput> references, string[] supportedLanguages) Parameters Type Name Description SyntaxDetailViewModel model System.Collections.Generic.Dictionary < String , ApiReferenceBuildOutput > references String [] supportedLanguages Returns Type Description ApiSyntaxBuildOutput FromModel(SyntaxDetailViewModel, String[]) Declaration public static ApiSyntaxBuildOutput FromModel(SyntaxDetailViewModel model, string[] supportedLanguages) Parameters Type Name Description SyntaxDetailViewModel model String [] supportedLanguages Returns Type Description ApiSyntaxBuildOutput"
  },
  "api/Microsoft.DocAsCode.EntityModel.BuildOutputs.ApiReferenceBuildOutput.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.BuildOutputs.ApiReferenceBuildOutput.html",
    "title": "Class ApiReferenceBuildOutput\r\n   | DocFX website ",
    "keywords": "Class ApiReferenceBuildOutput Inheritance Object ApiReferenceBuildOutput Namespace :Microsoft.DocAsCode.EntityModel.BuildOutputs Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Serializable] public class ApiReferenceBuildOutput Properties AssemblyNameList Declaration [YamlMember(Alias = \"assemblies\")] [JsonProperty(\"assemblies\")] public List<string> AssemblyNameList { get; set; } Proverty Value Type Description System.Collections.Generic.List < String > Conceptual Declaration [YamlMember(Alias = \"conceptual\")] [JsonProperty(\"conceptual\")] public string Conceptual { get; set; } Proverty Value Type Description String Definition Declaration [YamlMember(Alias = \"definition\")] [JsonProperty(\"definition\")] public string Definition { get; set; } Proverty Value Type Description String Documentation Declaration [YamlMember(Alias = \"documentation\")] [JsonProperty(\"documentation\")] public SourceDetail Documentation { get; set; } Proverty Value Type Description SourceDetail Examples Declaration [YamlMember(Alias = \"example\")] [JsonProperty(\"example\")] public List<string> Examples { get; set; } Proverty Value Type Description System.Collections.Generic.List < String > Exceptions Declaration [YamlMember(Alias = \"exceptions\")] [JsonProperty(\"exceptions\")] public List<ApiCrefInfoBuildOutput> Exceptions { get; set; } Proverty Value Type Description System.Collections.Generic.List < ApiCrefInfoBuildOutput > FullName Declaration [YamlMember(Alias = \"fullName\")] [JsonProperty(\"fullName\")] public List<ApiLanguageValuePair> FullName { get; set; } Proverty Value Type Description System.Collections.Generic.List < ApiLanguageValuePair > Href Declaration [YamlMember(Alias = \"href\")] [JsonProperty(\"href\")] public string Href { get; set; } Proverty Value Type Description String Id Declaration [YamlMember(Alias = \"id\")] [JsonProperty(\"id\")] public string Id { get; set; } Proverty Value Type Description String Implements Declaration [YamlMember(Alias = \"implements\")] [JsonProperty(\"implements\")] public List<string> Implements { get; set; } Proverty Value Type Description System.Collections.Generic.List < String > Index Declaration [YamlMember(Alias = \"index\")] [JsonProperty(\"index\")] public int ? Index { get; set; } Proverty Value Type Description System.Nullable < Int32 > Inheritance Declaration [YamlMember(Alias = \"inheritance\")] [JsonProperty(\"inheritance\")] public List<ApiReferenceBuildOutput> Inheritance { get; set; } Proverty Value Type Description System.Collections.Generic.List < ApiReferenceBuildOutput > InheritedMembers Declaration [YamlMember(Alias = \"inheritedMembers\")] [JsonProperty(\"inheritedMembers\")] public List<string> InheritedMembers { get; set; } Proverty Value Type Description System.Collections.Generic.List < String > IsExternal Declaration [JsonProperty(\"isExternal\")] [YamlMember(Alias = \"isExternal\")] public bool ? IsExternal { get; set; } Proverty Value Type Description System.Nullable < Boolean > Level Declaration [YamlMember(Alias = \"level\")] [JsonProperty(\"level\")] public int Level { get; } Proverty Value Type Description Int32 Metadata Declaration [ExtensibleMember] [JsonIgnore] public Dictionary<string, object> Metadata { get; set; } Proverty Value Type Description System.Collections.Generic.Dictionary < String , Object > Modifiers Declaration [ExtensibleMember(\"modifiers.\")] [JsonIgnore] public SortedList<string, List<string>> Modifiers { get; set; } Proverty Value Type Description System.Collections.Generic.SortedList < String , System.Collections.Generic.List < String >> Name Declaration [YamlMember(Alias = \"name\")] [JsonProperty(\"name\")] public List<ApiLanguageValuePair> Name { get; set; } Proverty Value Type Description System.Collections.Generic.List < ApiLanguageValuePair > NamespaceName Declaration [YamlMember(Alias = \"namespace\")] [JsonProperty(\"namespace\")] public string NamespaceName { get; set; } Proverty Value Type Description String Overridden Declaration [YamlMember(Alias = \"overridden\")] [JsonProperty(\"overridden\")] public string Overridden { get; set; } Proverty Value Type Description String Parent Declaration [YamlMember(Alias = \"parent\")] [JsonProperty(\"parent\")] public string Parent { get; set; } Proverty Value Type Description String Platform Declaration [YamlMember(Alias = \"platform\")] [JsonProperty(\"platform\")] public List<string> Platform { get; set; } Proverty Value Type Description System.Collections.Generic.List < String > Remarks Declaration [YamlMember(Alias = \"remarks\")] [JsonProperty(\"remarks\")] public string Remarks { get; set; } Proverty Value Type Description String SeeAlsos Declaration [YamlMember(Alias = \"seealso\")] [JsonProperty(\"seealso\")] public List<ApiCrefInfoBuildOutput> SeeAlsos { get; set; } Proverty Value Type Description System.Collections.Generic.List < ApiCrefInfoBuildOutput > Sees Declaration [YamlMember(Alias = \"see\")] [JsonProperty(\"see\")] public List<ApiCrefInfoBuildOutput> Sees { get; set; } Proverty Value Type Description System.Collections.Generic.List < ApiCrefInfoBuildOutput > Source Declaration [YamlMember(Alias = \"source\")] [JsonProperty(\"source\")] public SourceDetail Source { get; set; } Proverty Value Type Description SourceDetail Spec Declaration [YamlMember(Alias = \"specName\")] [JsonProperty(\"specName\")] public List<ApiLanguageValuePair> Spec { get; set; } Proverty Value Type Description System.Collections.Generic.List < ApiLanguageValuePair > Summary Declaration [YamlMember(Alias = \"summary\")] [JsonProperty(\"summary\")] public string Summary { get; set; } Proverty Value Type Description String Syntax Declaration [YamlMember(Alias = \"syntax\")] [JsonProperty(\"syntax\")] public ApiSyntaxBuildOutput Syntax { get; set; } Proverty Value Type Description ApiSyntaxBuildOutput Type Declaration [YamlMember(Alias = \"type\")] [JsonProperty(\"type\")] public MemberType? Type { get; set; } Proverty Value Type Description System.Nullable < MemberType > Uid Declaration [YamlMember(Alias = \"uid\")] [JsonProperty(\"uid\")] public string Uid { get; set; } Proverty Value Type Description String Methods Expand(Dictionary<String, ApiReferenceBuildOutput>, String[]) Declaration public void Expand(Dictionary<string, ApiReferenceBuildOutput> references, string[] supportedLanguages) Parameters Type Name Description System.Collections.Generic.Dictionary < String , ApiReferenceBuildOutput > references String [] supportedLanguages FromModel(ItemViewModel) Declaration public static ApiReferenceBuildOutput FromModel(ItemViewModel vm) Parameters Type Name Description ItemViewModel vm Returns Type Description ApiReferenceBuildOutput FromModel(ReferenceViewModel, String[]) Declaration public static ApiReferenceBuildOutput FromModel(ReferenceViewModel vm, string[] supportedLanguages) Parameters Type Name Description ReferenceViewModel vm String [] supportedLanguages Returns Type Description ApiReferenceBuildOutput FromUid(String) Declaration public static ApiReferenceBuildOutput FromUid(string uid) Parameters Type Name Description String uid Returns Type Description ApiReferenceBuildOutput GetSpecNames(String, String[], SortedList<String, List<SpecViewModel>>) Declaration public static List<ApiLanguageValuePair> GetSpecNames(string xref, string[] supportedLanguages, SortedList<string, List<SpecViewModel>> specs = null) Parameters Type Name Description String xref String [] supportedLanguages System.Collections.Generic.SortedList < String , System.Collections.Generic.List < SpecViewModel >> specs Returns Type Description System.Collections.Generic.List < ApiLanguageValuePair >"
  },
  "api/Microsoft.DocAsCode.EntityModel.BuildOutputs.ApiParameterBuildOutput.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.BuildOutputs.ApiParameterBuildOutput.html",
    "title": "Class ApiParameterBuildOutput\r\n   | DocFX website ",
    "keywords": "Class ApiParameterBuildOutput Inheritance Object ApiParameterBuildOutput Namespace :Microsoft.DocAsCode.EntityModel.BuildOutputs Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Serializable] public class ApiParameterBuildOutput Properties Description Declaration [YamlMember(Alias = \"description\")] [JsonProperty(\"description\")] public string Description { get; set; } Proverty Value Type Description String Name Declaration [YamlMember(Alias = \"id\")] [JsonProperty(\"id\")] public string Name { get; set; } Proverty Value Type Description String Type Declaration [YamlMember(Alias = \"type\")] [JsonProperty(\"type\")] public ApiReferenceBuildOutput Type { get; set; } Proverty Value Type Description ApiReferenceBuildOutput Methods Expand(Dictionary<String, ApiReferenceBuildOutput>, String[]) Declaration public void Expand(Dictionary<string, ApiReferenceBuildOutput> references, string[] supportedLanguages) Parameters Type Name Description System.Collections.Generic.Dictionary < String , ApiReferenceBuildOutput > references String [] supportedLanguages FromModel(ApiParameter) Declaration public static ApiParameterBuildOutput FromModel(ApiParameter model) Parameters Type Name Description ApiParameter model Returns Type Description ApiParameterBuildOutput FromModel(ApiParameter, Dictionary<String, ApiReferenceBuildOutput>, String[]) Declaration public static ApiParameterBuildOutput FromModel(ApiParameter model, Dictionary<string, ApiReferenceBuildOutput> references, string[] supportedLanguages) Parameters Type Name Description ApiParameter model System.Collections.Generic.Dictionary < String , ApiReferenceBuildOutput > references String [] supportedLanguages Returns Type Description ApiParameterBuildOutput"
  },
  "api/Microsoft.DocAsCode.EntityModel.BuildOutputs.ApiLanguageValuePair.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.BuildOutputs.ApiLanguageValuePair.html",
    "title": "Class ApiLanguageValuePair\r\n   | DocFX website ",
    "keywords": "Class ApiLanguageValuePair Inheritance Object ApiLanguageValuePair Namespace :Microsoft.DocAsCode.EntityModel.BuildOutputs Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Serializable] public class ApiLanguageValuePair Properties Language Declaration [YamlMember(Alias = \"lang\")] [JsonProperty(\"lang\")] public string Language { get; set; } Proverty Value Type Description String Value Declaration [YamlMember(Alias = \"value\")] [JsonProperty(\"value\")] public string Value { get; set; } Proverty Value Type Description String"
  },
  "api/Microsoft.DocAsCode.EntityModel.BuildOutputs.ApiCrefInfoBuildOutput.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.BuildOutputs.ApiCrefInfoBuildOutput.html",
    "title": "Class ApiCrefInfoBuildOutput\r\n   | DocFX website ",
    "keywords": "Class ApiCrefInfoBuildOutput Inheritance Object ApiCrefInfoBuildOutput Namespace :Microsoft.DocAsCode.EntityModel.BuildOutputs Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Serializable] public class ApiCrefInfoBuildOutput Properties Description Declaration [YamlMember(Alias = \"description\")] [JsonProperty(\"description\")] public string Description { get; set; } Proverty Value Type Description String Type Declaration [YamlMember(Alias = \"type\")] [JsonProperty(\"type\")] public ApiReferenceBuildOutput Type { get; set; } Proverty Value Type Description ApiReferenceBuildOutput Methods Expand(Dictionary<String, ApiReferenceBuildOutput>, String[]) Declaration public void Expand(Dictionary<string, ApiReferenceBuildOutput> references, string[] supportedLanguages) Parameters Type Name Description System.Collections.Generic.Dictionary < String , ApiReferenceBuildOutput > references String [] supportedLanguages FromModel(CrefInfo) Declaration public static ApiCrefInfoBuildOutput FromModel(CrefInfo model) Parameters Type Name Description CrefInfo model Returns Type Description ApiCrefInfoBuildOutput FromModel(CrefInfo, Dictionary<String, ApiReferenceBuildOutput>, String[]) Declaration public static ApiCrefInfoBuildOutput FromModel(CrefInfo model, Dictionary<string, ApiReferenceBuildOutput> references, string[] supportedLanguages) Parameters Type Name Description CrefInfo model System.Collections.Generic.Dictionary < String , ApiReferenceBuildOutput > references String [] supportedLanguages Returns Type Description ApiCrefInfoBuildOutput"
  },
  "api/Microsoft.DocAsCode.EntityModel.BuildOutputs.ApiBuildOutputUtility.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.BuildOutputs.ApiBuildOutputUtility.html",
    "title": "Class ApiBuildOutputUtility\r\n   | DocFX website ",
    "keywords": "Class ApiBuildOutputUtility Inheritance Object ApiBuildOutputUtility Namespace :Microsoft.DocAsCode.EntityModel.BuildOutputs Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class ApiBuildOutputUtility Methods GetReferenceViewModel(String, Dictionary<String, ApiReferenceBuildOutput>, String[]) Declaration public static ApiReferenceBuildOutput GetReferenceViewModel(string key, Dictionary<string, ApiReferenceBuildOutput> references, string[] supportedLanguages) Parameters Type Name Description String key System.Collections.Generic.Dictionary < String , ApiReferenceBuildOutput > references String [] supportedLanguages Returns Type Description ApiReferenceBuildOutput GetReferenceViewModel(String, Dictionary<String, ApiReferenceBuildOutput>, String[], Int32) Declaration public static ApiReferenceBuildOutput GetReferenceViewModel(string key, Dictionary<string, ApiReferenceBuildOutput> references, string[] supportedLanguages, int index) Parameters Type Name Description String key System.Collections.Generic.Dictionary < String , ApiReferenceBuildOutput > references String [] supportedLanguages Int32 index Returns Type Description ApiReferenceBuildOutput GetXref(String, String, String) Declaration public static string GetXref(string uid, string fullName = null, string name = null) Parameters Type Name Description String uid String fullName String name Returns Type Description String TransformToLanguagePairList(String, SortedList<String, String>, String[]) Declaration public static List<ApiLanguageValuePair> TransformToLanguagePairList(string defaultValue, SortedList<string, string> values, string[] supportedLanguages) Parameters Type Name Description String defaultValue System.Collections.Generic.SortedList < String , String > values String [] supportedLanguages Returns Type Description System.Collections.Generic.List < ApiLanguageValuePair >"
  },
  "api/Microsoft.DocAsCode.EntityModel.BuildOutputs.ApiBuildOutput.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.BuildOutputs.ApiBuildOutput.html",
    "title": "Class ApiBuildOutput\r\n   | DocFX website ",
    "keywords": "Class ApiBuildOutput Inheritance Object ApiBuildOutput Namespace :Microsoft.DocAsCode.EntityModel.BuildOutputs Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Serializable] public class ApiBuildOutput Properties AssemblyNameList Declaration [YamlMember(Alias = \"assemblies\")] [JsonProperty(\"assemblies\")] public List<string> AssemblyNameList { get; set; } Proverty Value Type Description System.Collections.Generic.List < String > Children Declaration [YamlMember(Alias = \"children\")] [JsonProperty(\"children\")] public List<ApiReferenceBuildOutput> Children { get; set; } Proverty Value Type Description System.Collections.Generic.List < ApiReferenceBuildOutput > Conceptual Declaration [YamlMember(Alias = \"conceptual\")] [JsonProperty(\"conceptual\")] public string Conceptual { get; set; } Proverty Value Type Description String Documentation Declaration [YamlMember(Alias = \"documentation\")] [JsonProperty(\"documentation\")] public SourceDetail Documentation { get; set; } Proverty Value Type Description SourceDetail Examples Declaration [YamlMember(Alias = \"example\")] [JsonProperty(\"example\")] public List<string> Examples { get; set; } Proverty Value Type Description System.Collections.Generic.List < String > Exceptions Declaration [YamlMember(Alias = \"exceptions\")] [JsonProperty(\"exceptions\")] public List<ApiCrefInfoBuildOutput> Exceptions { get; set; } Proverty Value Type Description System.Collections.Generic.List < ApiCrefInfoBuildOutput > FullName Declaration [YamlMember(Alias = \"fullName\")] [JsonProperty(\"fullName\")] public List<ApiLanguageValuePair> FullName { get; set; } Proverty Value Type Description System.Collections.Generic.List < ApiLanguageValuePair > Href Declaration [YamlMember(Alias = \"href\")] [JsonProperty(\"href\")] public string Href { get; set; } Proverty Value Type Description String Id Declaration [YamlMember(Alias = \"id\")] [JsonProperty(\"id\")] public string Id { get; set; } Proverty Value Type Description String Implements Declaration [YamlMember(Alias = \"implements\")] [JsonProperty(\"implements\")] public List<ApiReferenceBuildOutput> Implements { get; set; } Proverty Value Type Description System.Collections.Generic.List < ApiReferenceBuildOutput > Inheritance Declaration [YamlMember(Alias = \"inheritance\")] [MergeOption(MergeOption.Ignore)] [JsonProperty(\"inheritance\")] public List<ApiReferenceBuildOutput> Inheritance { get; set; } Proverty Value Type Description System.Collections.Generic.List < ApiReferenceBuildOutput > InheritedMembers Declaration [YamlMember(Alias = \"inheritedMembers\")] [JsonProperty(\"inheritedMembers\")] public List<ApiReferenceBuildOutput> InheritedMembers { get; set; } Proverty Value Type Description System.Collections.Generic.List < ApiReferenceBuildOutput > Level Declaration [YamlMember(Alias = \"level\")] [JsonProperty(\"level\")] public int Level { get; } Proverty Value Type Description Int32 Metadata Declaration [ExtensibleMember] [JsonExtensionData] public Dictionary<string, object> Metadata { get; set; } Proverty Value Type Description System.Collections.Generic.Dictionary < String , Object > Name Declaration [YamlMember(Alias = \"name\")] [JsonProperty(\"name\")] public List<ApiLanguageValuePair> Name { get; set; } Proverty Value Type Description System.Collections.Generic.List < ApiLanguageValuePair > NamespaceName Declaration [YamlMember(Alias = \"namespace\")] [JsonProperty(\"namespace\")] public ApiReferenceBuildOutput NamespaceName { get; set; } Proverty Value Type Description ApiReferenceBuildOutput Overridden Declaration [YamlMember(Alias = \"overridden\")] [JsonProperty(\"overridden\")] public ApiReferenceBuildOutput Overridden { get; set; } Proverty Value Type Description ApiReferenceBuildOutput Parent Declaration [YamlMember(Alias = \"parent\")] [JsonProperty(\"parent\")] public ApiReferenceBuildOutput Parent { get; set; } Proverty Value Type Description ApiReferenceBuildOutput Platform Declaration [YamlMember(Alias = \"platform\")] [JsonProperty(\"platform\")] public List<string> Platform { get; set; } Proverty Value Type Description System.Collections.Generic.List < String > Remarks Declaration [YamlMember(Alias = \"remarks\")] [JsonProperty(\"remarks\")] public string Remarks { get; set; } Proverty Value Type Description String SeeAlsos Declaration [YamlMember(Alias = \"seealso\")] [JsonProperty(\"seealso\")] public List<ApiCrefInfoBuildOutput> SeeAlsos { get; set; } Proverty Value Type Description System.Collections.Generic.List < ApiCrefInfoBuildOutput > Sees Declaration [YamlMember(Alias = \"see\")] [JsonProperty(\"see\")] public List<ApiCrefInfoBuildOutput> Sees { get; set; } Proverty Value Type Description System.Collections.Generic.List < ApiCrefInfoBuildOutput > Source Declaration [YamlMember(Alias = \"source\")] [JsonProperty(\"source\")] public SourceDetail Source { get; set; } Proverty Value Type Description SourceDetail Summary Declaration [YamlMember(Alias = \"summary\")] [JsonProperty(\"summary\")] public string Summary { get; set; } Proverty Value Type Description String SupportedLanguages Declaration [YamlMember(Alias = \"langs\")] [JsonProperty(\"langs\")] public string[] SupportedLanguages { get; set; } Proverty Value Type Description String [] Syntax Declaration [YamlMember(Alias = \"syntax\")] [JsonProperty(\"syntax\")] public ApiSyntaxBuildOutput Syntax { get; set; } Proverty Value Type Description ApiSyntaxBuildOutput Type Declaration [YamlMember(Alias = \"type\")] [JsonProperty(\"type\")] public MemberType? Type { get; set; } Proverty Value Type Description System.Nullable < MemberType > Uid Declaration [YamlMember(Alias = \"uid\")] [JsonProperty(\"uid\")] public string Uid { get; set; } Proverty Value Type Description String Methods FromModel(PageViewModel) Declaration public static ApiBuildOutput FromModel(PageViewModel model) Parameters Type Name Description PageViewModel model Returns Type Description ApiBuildOutput"
  },
  "api/Microsoft.DocAsCode.EntityModel.BuildMembers.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.BuildMembers.html",
    "title": "Class BuildMembers\r\n   | DocFX website ",
    "keywords": "Class BuildMembers Inheritance Object BuildMembers Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class BuildMembers : IResolverPipeline Methods Run(MetadataModel, ResolverContext) Declaration public void Run(MetadataModel yaml, ResolverContext context) Parameters Type Name Description MetadataModel yaml ResolverContext context"
  },
  "api/Microsoft.DocAsCode.EntityModel.BuildInfo.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.BuildInfo.html",
    "title": "Class BuildInfo\r\n   | DocFX website ",
    "keywords": "Class BuildInfo Inheritance Object BuildInfo Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class BuildInfo Properties BuildAssembly Declaration public string BuildAssembly { get; set; } Proverty Value Type Description String CheckSum Declaration public string CheckSum { get; set; } Proverty Value Type Description String CompleteUtcTime Declaration public DateTime CompleteUtcTime { get; set; } Proverty Value Type Description DateTime ContainedFiles Save the files involved in the build Declaration public IDictionary<string, List<string>> ContainedFiles { get; set; } Proverty Value Type Description System.Collections.Generic.IDictionary < String , System.Collections.Generic.List < String >> InputFilesKey Declaration public string InputFilesKey { get; set; } Proverty Value Type Description String OutputFolder Declaration public string OutputFolder { get; set; } Proverty Value Type Description String RelatvieOutputFiles Declaration public IEnumerable<string> RelatvieOutputFiles { get; set; } Proverty Value Type Description System.Collections.Generic.IEnumerable < String > TriggeredUtcTime Declaration public DateTime TriggeredUtcTime { get; set; } Proverty Value Type Description DateTime"
  },
  "api/Microsoft.DocAsCode.EntityModel.Builders.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.Builders.html",
    "title": "Namespace Microsoft.DocAsCode.EntityModel.Builders\r\n   | DocFX website ",
    "keywords": "Namespace Microsoft.DocAsCode.EntityModel.Builders Classes DocumentBuildContext DocumentBuilder DocumentBuildParameters FileCollection ManifestItem"
  },
  "api/Microsoft.DocAsCode.EntityModel.Builders.ManifestItem.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.Builders.ManifestItem.html",
    "title": "Class ManifestItem\r\n   | DocFX website ",
    "keywords": "Class ManifestItem Inheritance Object ManifestItem Namespace :Microsoft.DocAsCode.EntityModel.Builders Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class ManifestItem Properties DocumentType Declaration public string DocumentType { get; set; } Proverty Value Type Description String InputFolder Declaration public string InputFolder { get; set; } Proverty Value Type Description String Key Declaration public string Key { get; set; } Proverty Value Type Description String LocalPathFromRepoRoot Declaration public string LocalPathFromRepoRoot { get; set; } Proverty Value Type Description String Model Declaration public ModelWithCache Model { get; set; } Proverty Value Type Description ModelWithCache ModelFile Declaration public string ModelFile { get; set; } Proverty Value Type Description String ResourceFile Declaration public string ResourceFile { get; set; } Proverty Value Type Description String"
  },
  "api/Microsoft.DocAsCode.EntityModel.Builders.FileCollection.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.Builders.FileCollection.html",
    "title": "Class FileCollection\r\n   | DocFX website ",
    "keywords": "Class FileCollection Inheritance Object FileCollection Namespace :Microsoft.DocAsCode.EntityModel.Builders Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class FileCollection Constructors FileCollection(FileCollection) Declaration public FileCollection(FileCollection collection) Parameters Type Name Description FileCollection collection FileCollection(String) Declaration public FileCollection(string defaultBaseDir) Parameters Type Name Description String defaultBaseDir Properties Count Declaration public int Count { get; } Proverty Value Type Description Int32 DefaultBaseDir Declaration public string DefaultBaseDir { get; set; } Proverty Value Type Description String Methods Add(DocumentType, IEnumerable<String>, Func<String, String>) Declaration public void Add(DocumentType type, IEnumerable<string> files, Func<string, string> pathRewriter = null) Parameters Type Name Description DocumentType type System.Collections.Generic.IEnumerable < String > files System.Func < String , String > pathRewriter Add(DocumentType, String, IEnumerable<String>, Func<String, String>) Declaration public void Add(DocumentType type, string baseDir, IEnumerable<string> files, Func<string, string> pathRewriter = null) Parameters Type Name Description DocumentType type String baseDir System.Collections.Generic.IEnumerable < String > files System.Func < String , String > pathRewriter EnumerateFiles() Declaration public IEnumerable<FileAndType> EnumerateFiles() Returns Type Description System.Collections.Generic.IEnumerable < FileAndType >"
  },
  "api/Microsoft.DocAsCode.EntityModel.Builders.DocumentBuildParameters.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.Builders.DocumentBuildParameters.html",
    "title": "Class DocumentBuildParameters\r\n   | DocFX website ",
    "keywords": "Class DocumentBuildParameters Inheritance Object MarshalByRefObject DocumentBuildParameters Namespace :Microsoft.DocAsCode.EntityModel.Builders Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public sealed class DocumentBuildParameters : MarshalByRefObject Properties ApplyTemplateSettings Declaration public ApplyTemplateSettings ApplyTemplateSettings { get; set; } Proverty Value Type Description ApplyTemplateSettings ExternalReferencePackages Declaration public ImmutableArray<string> ExternalReferencePackages { get; set; } Proverty Value Type Description System.Collections.Immutable.ImmutableArray < String > FileMetadata Declaration public FileMetadata FileMetadata { get; set; } Proverty Value Type Description FileMetadata Files Declaration public FileCollection Files { get; set; } Proverty Value Type Description FileCollection Metadata Declaration public ImmutableDictionary<string, object> Metadata { get; set; } Proverty Value Type Description System.Collections.Immutable.ImmutableDictionary < String , Object > OutputBaseDir Declaration public string OutputBaseDir { get; set; } Proverty Value Type Description String TemplateManager Declaration public TemplateManager TemplateManager { get; set; } Proverty Value Type Description TemplateManager"
  },
  "api/Microsoft.DocAsCode.EntityModel.Builders.DocumentBuilder.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.Builders.DocumentBuilder.html",
    "title": "Class DocumentBuilder\r\n   | DocFX website ",
    "keywords": "Class DocumentBuilder Inheritance Object DocumentBuilder Namespace :Microsoft.DocAsCode.EntityModel.Builders Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class DocumentBuilder : IDisposable Constructors DocumentBuilder(IEnumerable<Assembly>) Declaration public DocumentBuilder(IEnumerable<Assembly> assemblies = null) Parameters Type Name Description System.Collections.Generic.IEnumerable < Assembly > assemblies Fields PhaseName Declaration public const string PhaseName Methods Build(DocumentBuildParameters) Declaration public void Build(DocumentBuildParameters parameters) Parameters Type Name Description DocumentBuildParameters parameters Dispose() Declaration public void Dispose()"
  },
  "api/Microsoft.DocAsCode.EntityModel.Builders.DocumentBuildContext.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.Builders.DocumentBuildContext.html",
    "title": "Class DocumentBuildContext\r\n   | DocFX website ",
    "keywords": "Class DocumentBuildContext Inheritance Object DocumentBuildContext Namespace :Microsoft.DocAsCode.EntityModel.Builders Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public sealed class DocumentBuildContext : IDocumentBuildContext Constructors DocumentBuildContext(String) Declaration public DocumentBuildContext(string buildOutputFolder) Parameters Type Name Description String buildOutputFolder DocumentBuildContext(String, IEnumerable<FileAndType>, ImmutableArray<String>) Declaration public DocumentBuildContext(string buildOutputFolder, IEnumerable<FileAndType> allSourceFiles, ImmutableArray<string> externalReferencePackages) Parameters Type Name Description String buildOutputFolder System.Collections.Generic.IEnumerable < FileAndType > allSourceFiles System.Collections.Immutable.ImmutableArray < String > externalReferencePackages Properties AllSourceFiles Declaration public ImmutableDictionary<string, FileAndType> AllSourceFiles { get; } Proverty Value Type Description System.Collections.Immutable.ImmutableDictionary < String , FileAndType > BuildOutputFolder Declaration public string BuildOutputFolder { get; } Proverty Value Type Description String ExternalReferencePackages Declaration public ImmutableArray<string> ExternalReferencePackages { get; } Proverty Value Type Description System.Collections.Immutable.ImmutableArray < String > ExternalXRefSpec Declaration public Dictionary<string, XRefSpec> ExternalXRefSpec { get; } Proverty Value Type Description System.Collections.Generic.Dictionary < String , XRefSpec > FileMap Declaration public Dictionary<string, string> FileMap { get; } Proverty Value Type Description System.Collections.Generic.Dictionary < String , String > TocMap Declaration public Dictionary<string, HashSet<string>> TocMap { get; } Proverty Value Type Description System.Collections.Generic.Dictionary < String , System.Collections.Generic.HashSet < String >> XRef Declaration public HashSet<string> XRef { get; } Proverty Value Type Description System.Collections.Generic.HashSet < String > XRefSpecMap Declaration public Dictionary<string, XRefSpec> XRefSpecMap { get; } Proverty Value Type Description System.Collections.Generic.Dictionary < String , XRefSpec > Methods GetFilePath(String) Declaration public string GetFilePath(string key) Parameters Type Name Description String key Returns Type Description String GetTocFileKeySet(String) Declaration public IImmutableList<string> GetTocFileKeySet(string key) Parameters Type Name Description String key Returns Type Description System.Collections.Immutable.IImmutableList < String > GetXrefSpec(String) Declaration public XRefSpec GetXrefSpec(string uid) Parameters Type Name Description String uid Returns Type Description XRefSpec RegisterInternalXrefSpec(XRefSpec) Declaration public void RegisterInternalXrefSpec(XRefSpec xrefSpec) Parameters Type Name Description XRefSpec xrefSpec RegisterToc(String, String) Declaration public void RegisterToc(string tocFileKey, string fileKey) Parameters Type Name Description String tocFileKey String fileKey SetExternalXRefSpec() Declaration public void SetExternalXRefSpec() SetFilePath(String, String) Declaration public void SetFilePath(string key, string filePath) Parameters Type Name Description String key String filePath"
  },
  "api/Microsoft.DocAsCode.EntityModel.ArchiveResourceCollection.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.ArchiveResourceCollection.html",
    "title": "Class ArchiveResourceCollection\r\n   | DocFX website ",
    "keywords": "Class ArchiveResourceCollection Inheritance Object ResourceCollection ArchiveResourceCollection Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public sealed class ArchiveResourceCollection : ResourceCollection, IDisposable Constructors ArchiveResourceCollection(Stream, String) Declaration public ArchiveResourceCollection(Stream stream, string name) Parameters Type Name Description Stream stream String name Properties IsEmpty Declaration public override bool IsEmpty { get; } Proverty Value Type Description Boolean Name Declaration public override string Name { get; } Proverty Value Type Description String Names Declaration public override IEnumerable<string> Names { get; } Proverty Value Type Description System.Collections.Generic.IEnumerable < String > Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing GetResourceStream(String) TODO: This is not thread safe, only expose GetResource in interface Declaration public override Stream GetResourceStream(string name) Parameters Type Name Description String name Returns Type Description Stream"
  },
  "api/Microsoft.DocAsCode.EntityModel.ApplyTemplateSettings.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.ApplyTemplateSettings.html",
    "title": "Class ApplyTemplateSettings\r\n   | DocFX website ",
    "keywords": "Class ApplyTemplateSettings Inheritance Object ApplyTemplateSettings Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class ApplyTemplateSettings Constructors ApplyTemplateSettings(String, String) Declaration public ApplyTemplateSettings(string inputFolder, string outputFolder) Parameters Type Name Description String inputFolder String outputFolder Fields DefaultRawModelExportSettings Declaration public static readonly ExportSettings DefaultRawModelExportSettings DefaultViewModelExportSettings Declaration public static readonly ExportSettings DefaultViewModelExportSettings RawModelExportSettingsForDebug Declaration public static readonly ExportSettings RawModelExportSettingsForDebug ViewModelExportSettingsForDebug Declaration public static readonly ExportSettings ViewModelExportSettingsForDebug Properties InputFolder Declaration public string InputFolder { get; } Proverty Value Type Description String Options Declaration public ApplyTemplateOptions Options { get; } Proverty Value Type Description ApplyTemplateOptions OutputFolder Declaration public string OutputFolder { get; } Proverty Value Type Description String RawModelExportSettings Declaration public ExportSettings RawModelExportSettings { get; set; } Proverty Value Type Description ExportSettings TransformDocument Declaration public bool TransformDocument { get; set; } Proverty Value Type Description Boolean ViewModelExportSettings Declaration public ExportSettings ViewModelExportSettings { get; set; } Proverty Value Type Description ExportSettings"
  },
  "api/Microsoft.DocAsCode.EntityModel.ApplyTemplateOptions.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.ApplyTemplateOptions.html",
    "title": "Enum ApplyTemplateOptions\r\n   | DocFX website ",
    "keywords": "Enum ApplyTemplateOptions Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Flags] public enum ApplyTemplateOptions Fields All Declaration All = 7 ExportRawModel Declaration ExportRawModel = 1 ExportViewModel Declaration ExportViewModel = 2 None Declaration None = 0 TransformDocument Declaration TransformDocument = 4"
  },
  "api/Microsoft.DocAsCode.EntityModel.ApplicationLevelCache.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.ApplicationLevelCache.html",
    "title": "Class ApplicationLevelCache\r\n   | DocFX website ",
    "keywords": "Class ApplicationLevelCache Inheritance Object CacheBase ApplicationLevelCache Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class ApplicationLevelCache : CacheBase Methods Get(IEnumerable<String>) Declaration public static ApplicationLevelCache Get(IEnumerable<string> files) Parameters Type Name Description System.Collections.Generic.IEnumerable < String > files Returns Type Description ApplicationLevelCache"
  },
  "api/Microsoft.DocAsCode.EntityModel.ApiReferenceViewModel.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.ApiReferenceViewModel.html",
    "title": "Class ApiReferenceViewModel\r\n   | DocFX website ",
    "keywords": "Class ApiReferenceViewModel Inheritance Object System.Collections.Generic.Dictionary < String , String > ApiReferenceViewModel Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class ApiReferenceViewModel : Dictionary<string, string>, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IDictionary, ICollection, IReadOnlyDictionary<string, string>, IReadOnlyCollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, ISerializable, IDeserializationCallback"
  },
  "api/Microsoft.DocAsCode.EntityModel.ApiReferenceModel.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.ApiReferenceModel.html",
    "title": "Class ApiReferenceModel\r\n   | DocFX website ",
    "keywords": "Class ApiReferenceModel Inheritance Object System.Collections.Generic.Dictionary < String , ApiIndexItemModel > ApiReferenceModel Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class ApiReferenceModel : Dictionary<string, ApiIndexItemModel>, IDictionary<string, ApiIndexItemModel>, ICollection<KeyValuePair<string, ApiIndexItemModel>>, IDictionary, ICollection, IReadOnlyDictionary<string, ApiIndexItemModel>, IReadOnlyCollection<KeyValuePair<string, ApiIndexItemModel>>, IEnumerable<KeyValuePair<string, ApiIndexItemModel>>, IEnumerable, ISerializable, IDeserializationCallback Methods ToViewModel() Declaration public ApiReferenceViewModel ToViewModel() Returns Type Description ApiReferenceViewModel"
  },
  "api/Microsoft.DocAsCode.EntityModel.ApiParameter.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.ApiParameter.html",
    "title": "Class ApiParameter\r\n   | DocFX website ",
    "keywords": "Class ApiParameter Inheritance Object ApiParameter Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Serializable] public class ApiParameter Properties Description Declaration [YamlMember(Alias = \"description\")] [JsonProperty(\"description\")] public string Description { get; set; } Proverty Value Type Description String Name Declaration [YamlMember(Alias = \"id\")] [JsonProperty(\"id\")] [MergeOption(MergeOption.MergeKey)] public string Name { get; set; } Proverty Value Type Description String Type Declaration [YamlMember(Alias = \"type\")] [JsonProperty(\"type\")] public string Type { get; set; } Proverty Value Type Description String"
  },
  "api/Microsoft.DocAsCode.EntityModel.ApiIndexItemModel.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.ApiIndexItemModel.html",
    "title": "Class ApiIndexItemModel\r\n   | DocFX website ",
    "keywords": "Class ApiIndexItemModel Inheritance Object ApiIndexItemModel Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class ApiIndexItemModel Properties Href Declaration public string Href { get; set; } Proverty Value Type Description String IndexFilePath Declaration public string IndexFilePath { get; set; } Proverty Value Type Description String Name Declaration public string Name { get; set; } Proverty Value Type Description String"
  },
  "api/Microsoft.DocAsCode.Dfm.html": {
    "href": "api/Microsoft.DocAsCode.Dfm.html",
    "title": "Namespace Microsoft.DocAsCode.Dfm\r\n   | DocFX website ",
    "keywords": "Namespace Microsoft.DocAsCode.Dfm Classes DfmBlockquoteBlockRule DfmContextExtensions DfmEmailInlineRule DfmEngine DfmEngineBuilder DfmFencesBlockPathQueryOption DfmFencesBlockRule DfmFencesBlockToken DfmIncludeBlockRule DfmIncludeBlockToken DfmIncludeInlineRule DfmIncludeInlineToken DfmMarkdownRenderer DfmNoteBlockRule DfmNoteBlockToken DfmParagraphBlockRule DfmRenderer DfmSectionBlockRule DfmSectionBlockToken DfmTextInlineRule DfmXrefAutoLinkInlineRule Xref auto link syntax: <xref:uid> <xref:\"uid with space\"> DfmXrefInlineToken DfmXrefLinkInlineRule Xref Link syntax: [name](xref:uid \"title\") [name](@uid \"title\") title can be omitted DfmXrefShortcutInlineRule XREF regex: 1. If content after `@` is wrapped by `'` or `\"`, it contains any character including white space 2. If content after `@` is not wrapped by `'` or `\"`, It must start with word character `a-z` or `A-Z` It ends when a. line ends b. meets whitespaces c. line ends with `.`, `,`, `;`, `:`, `!`, `?` and `~` d. meets 2 times or more `.`, `,`, `;`, `:`, `!`, `?` and `~` DfmYamlHeaderBlockRule DfmYamlHeaderBlockToken DocfxFlavoredMarked FileCacheLite"
  },
  "api/Microsoft.DocAsCode.EntityModel.ViewModels.IOverwriteDocumentViewModel.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.ViewModels.IOverwriteDocumentViewModel.html",
    "title": "Interface IOverwriteDocumentViewModel\r\n   | DocFX website ",
    "keywords": "Interface IOverwriteDocumentViewModel Namespace :Microsoft.DocAsCode.EntityModel.ViewModels Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public interface IOverwriteDocumentViewModel Properties Conceptual The markdown content from the overwrite document Declaration string Conceptual { get; set; } Proverty Value Type Description String Documentation The details for current overwrite document, containing the start/end line numbers, file path, and git info. Declaration SourceDetail Documentation { get; set; } Proverty Value Type Description SourceDetail Uid The uid for this overwrite document, as defined in YAML header Declaration string Uid { get; set; } Proverty Value Type Description String"
  },
  "api/Microsoft.DocAsCode.EntityModel.VBYamlModelGenerator.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.VBYamlModelGenerator.html",
    "title": "Class VBYamlModelGenerator\r\n   | DocFX website ",
    "keywords": "Class VBYamlModelGenerator Inheritance Object YamlModelGenerator SimpleYamlModelGenerator VBYamlModelGenerator Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class VBYamlModelGenerator : SimpleYamlModelGenerator Constructors VBYamlModelGenerator() Declaration public VBYamlModelGenerator() Methods DefaultVisit(ISymbol, MetadataItem, SymbolVisitorAdapter) Declaration public override void DefaultVisit(ISymbol symbol, MetadataItem item, SymbolVisitorAdapter adapter) Parameters Type Name Description Microsoft.CodeAnalysis.ISymbol symbol MetadataItem item SymbolVisitorAdapter adapter GenerateEvent(IEventSymbol, MetadataItem, SymbolVisitorAdapter) Declaration public override void GenerateEvent(IEventSymbol symbol, MetadataItem item, SymbolVisitorAdapter adapter) Parameters Type Name Description Microsoft.CodeAnalysis.IEventSymbol symbol MetadataItem item SymbolVisitorAdapter adapter GenerateField(IFieldSymbol, MetadataItem, SymbolVisitorAdapter) Declaration public override void GenerateField(IFieldSymbol symbol, MetadataItem item, SymbolVisitorAdapter adapter) Parameters Type Name Description Microsoft.CodeAnalysis.IFieldSymbol symbol MetadataItem item SymbolVisitorAdapter adapter GenerateMethod(IMethodSymbol, MetadataItem, SymbolVisitorAdapter) Declaration public override void GenerateMethod(IMethodSymbol symbol, MetadataItem item, SymbolVisitorAdapter adapter) Parameters Type Name Description Microsoft.CodeAnalysis.IMethodSymbol symbol MetadataItem item SymbolVisitorAdapter adapter GenerateNamedType(INamedTypeSymbol, MetadataItem, SymbolVisitorAdapter) Declaration public override void GenerateNamedType(INamedTypeSymbol symbol, MetadataItem item, SymbolVisitorAdapter adapter) Parameters Type Name Description Microsoft.CodeAnalysis.INamedTypeSymbol symbol MetadataItem item SymbolVisitorAdapter adapter GenerateProperty(IPropertySymbol, MetadataItem, SymbolVisitorAdapter) Declaration public override void GenerateProperty(IPropertySymbol symbol, MetadataItem item, SymbolVisitorAdapter adapter) Parameters Type Name Description Microsoft.CodeAnalysis.IPropertySymbol symbol MetadataItem item SymbolVisitorAdapter adapter GenerateReference(ISymbol, ReferenceItem, SymbolVisitorAdapter) Declaration protected override void GenerateReference(ISymbol symbol, ReferenceItem reference, SymbolVisitorAdapter adapter) Parameters Type Name Description Microsoft.CodeAnalysis.ISymbol symbol ReferenceItem reference SymbolVisitorAdapter adapter GetSyntaxContent(MemberType, ISymbol, SymbolVisitorAdapter) Declaration protected override string GetSyntaxContent(MemberType typeKind, ISymbol symbol, SymbolVisitorAdapter adapter) Parameters Type Name Description MemberType typeKind Microsoft.CodeAnalysis.ISymbol symbol SymbolVisitorAdapter adapter Returns Type Description String"
  },
  "api/Microsoft.DocAsCode.EntityModel.VBReferenceItemVisitor.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.VBReferenceItemVisitor.html",
    "title": "Class VBReferenceItemVisitor\r\n   | DocFX website ",
    "keywords": "Class VBReferenceItemVisitor Inheritance Object Microsoft.CodeAnalysis.SymbolVisitor ReferenceItemVisitor VBReferenceItemVisitor Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class VBReferenceItemVisitor : ReferenceItemVisitor Constructors VBReferenceItemVisitor(ReferenceItem) Declaration public VBReferenceItemVisitor(ReferenceItem referenceItem) Parameters Type Name Description ReferenceItem referenceItem Methods AddBeginGenericParameter() Declaration protected override void AddBeginGenericParameter() AddEndGenericParameter() Declaration protected override void AddEndGenericParameter() AddGenericParameterSeparator() Declaration protected override void AddGenericParameterSeparator() AddLinkItems(INamedTypeSymbol, Boolean) Declaration protected override void AddLinkItems(INamedTypeSymbol symbol, bool withGenericeParameter) Parameters Type Name Description Microsoft.CodeAnalysis.INamedTypeSymbol symbol Boolean withGenericeParameter VisitArrayType(IArrayTypeSymbol) Declaration public override void VisitArrayType(IArrayTypeSymbol symbol) Parameters Type Name Description Microsoft.CodeAnalysis.IArrayTypeSymbol symbol VisitEvent(IEventSymbol) Declaration public override void VisitEvent(IEventSymbol symbol) Parameters Type Name Description Microsoft.CodeAnalysis.IEventSymbol symbol VisitField(IFieldSymbol) Declaration public override void VisitField(IFieldSymbol symbol) Parameters Type Name Description Microsoft.CodeAnalysis.IFieldSymbol symbol VisitMethod(IMethodSymbol) Declaration public override void VisitMethod(IMethodSymbol symbol) Parameters Type Name Description Microsoft.CodeAnalysis.IMethodSymbol symbol VisitNamespace(INamespaceSymbol) Declaration public override void VisitNamespace(INamespaceSymbol symbol) Parameters Type Name Description Microsoft.CodeAnalysis.INamespaceSymbol symbol VisitPointerType(IPointerTypeSymbol) Declaration public override void VisitPointerType(IPointerTypeSymbol symbol) Parameters Type Name Description Microsoft.CodeAnalysis.IPointerTypeSymbol symbol VisitProperty(IPropertySymbol) Declaration public override void VisitProperty(IPropertySymbol symbol) Parameters Type Name Description Microsoft.CodeAnalysis.IPropertySymbol symbol VisitTypeParameter(ITypeParameterSymbol) Declaration public override void VisitTypeParameter(ITypeParameterSymbol symbol) Parameters Type Name Description Microsoft.CodeAnalysis.ITypeParameterSymbol symbol"
  },
  "api/Microsoft.DocAsCode.EntityModel.VBNameVisitorCreator.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.VBNameVisitorCreator.html",
    "title": "Class VBNameVisitorCreator\r\n   | DocFX website ",
    "keywords": "Class VBNameVisitorCreator Inheritance Object NameVisitorCreator VBNameVisitorCreator Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class VBNameVisitorCreator : NameVisitorCreator Constructors VBNameVisitorCreator(NameOptions) Declaration public VBNameVisitorCreator(NameOptions options) Parameters Type Name Description NameOptions options Methods Create() Declaration protected override NameVisitor Create() Returns Type Description NameVisitor"
  },
  "api/Microsoft.DocAsCode.EntityModel.TripleSlashCommentParserContext.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.TripleSlashCommentParserContext.html",
    "title": "Class TripleSlashCommentParserContext\r\n   | DocFX website ",
    "keywords": "Class TripleSlashCommentParserContext Inheritance Object TripleSlashCommentParserContext Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class TripleSlashCommentParserContext : ITripleSlashCommentParserContext Properties AddReferenceDelegate Declaration public Action<string> AddReferenceDelegate { get; set; } Proverty Value Type Description System.Action < String > Normalize Declaration public bool Normalize { get; set; } Proverty Value Type Description Boolean PreserveRawInlineComments Declaration public bool PreserveRawInlineComments { get; set; } Proverty Value Type Description Boolean Source Declaration public SourceDetail Source { get; set; } Proverty Value Type Description SourceDetail"
  },
  "api/Microsoft.DocAsCode.EntityModel.TripleSlashCommentModel.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.TripleSlashCommentModel.html",
    "title": "Class TripleSlashCommentModel\r\n   | DocFX website ",
    "keywords": "Class TripleSlashCommentModel Inheritance Object TripleSlashCommentModel Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class TripleSlashCommentModel Properties Examples Declaration public List<string> Examples { get; } Proverty Value Type Description System.Collections.Generic.List < String > Exceptions Declaration public List<CrefInfo> Exceptions { get; } Proverty Value Type Description System.Collections.Generic.List < CrefInfo > Parameters Declaration public Dictionary<string, string> Parameters { get; } Proverty Value Type Description System.Collections.Generic.Dictionary < String , String > Remarks Declaration public string Remarks { get; } Proverty Value Type Description String Returns Declaration public string Returns { get; } Proverty Value Type Description String SeeAlsos Declaration public List<CrefInfo> SeeAlsos { get; } Proverty Value Type Description System.Collections.Generic.List < CrefInfo > Sees Declaration public List<CrefInfo> Sees { get; } Proverty Value Type Description System.Collections.Generic.List < CrefInfo > Summary Declaration public string Summary { get; } Proverty Value Type Description String TypeParameters Declaration public Dictionary<string, string> TypeParameters { get; } Proverty Value Type Description System.Collections.Generic.Dictionary < String , String > Methods CreateModel(String, ITripleSlashCommentParserContext) Declaration public static TripleSlashCommentModel CreateModel(string xml, ITripleSlashCommentParserContext context) Parameters Type Name Description String xml ITripleSlashCommentParserContext context Returns Type Description TripleSlashCommentModel GetParameter(String) Declaration public string GetParameter(string name) Parameters Type Name Description String name Returns Type Description String GetTypeParameter(String) Declaration public string GetTypeParameter(string name) Parameters Type Name Description String name Returns Type Description String"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownRendererAdapter.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownRendererAdapter.html",
    "title": "Class MarkdownRendererAdapter\r\n   | DocFX website ",
    "keywords": "Class MarkdownRendererAdapter The adapter for markdown renderer, use dynamic dispatch. Inheritance Object MarkdownRendererAdapter Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownRendererAdapter : IMarkdownRenderer Constructors MarkdownRendererAdapter(IMarkdownEngine, Object, Options, Dictionary<String, LinkObj>) Declaration public MarkdownRendererAdapter(IMarkdownEngine engine, object renderer, Options options, Dictionary<string, LinkObj> links) Parameters Type Name Description IMarkdownEngine engine Object renderer Options options System.Collections.Generic.Dictionary < String , LinkObj > links Properties Engine Declaration public IMarkdownEngine Engine { get; } Proverty Value Type Description IMarkdownEngine Links Declaration public Dictionary<string, LinkObj> Links { get; } Proverty Value Type Description System.Collections.Generic.Dictionary < String , LinkObj > Options Declaration public Options Options { get; } Proverty Value Type Description Options Renderer Declaration public object Renderer { get; } Proverty Value Type Description Object Methods Render(IMarkdownToken) Declaration public StringBuffer Render(IMarkdownToken token) Parameters Type Name Description IMarkdownToken token Returns Type Description StringBuffer"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownRenderer.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownRenderer.html",
    "title": "Class MarkdownRenderer\r\n   | DocFX website ",
    "keywords": "Class MarkdownRenderer Inheritance Object MarkdownRenderer Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownRenderer Methods Render(IMarkdownRenderer, GfmDelInlineToken, MarkdownInlineContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer render, GfmDelInlineToken token, MarkdownInlineContext context) Parameters Type Name Description IMarkdownRenderer render GfmDelInlineToken token MarkdownInlineContext context Returns Type Description StringBuffer Render(IMarkdownRenderer, IMarkdownToken, IMarkdownContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer render, IMarkdownToken token, IMarkdownContext context) Parameters Type Name Description IMarkdownRenderer render IMarkdownToken token IMarkdownContext context Returns Type Description StringBuffer Render(IMarkdownRenderer, MarkdownBlockquoteBlockToken, MarkdownBlockContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer render, MarkdownBlockquoteBlockToken token, MarkdownBlockContext context) Parameters Type Name Description IMarkdownRenderer render MarkdownBlockquoteBlockToken token MarkdownBlockContext context Returns Type Description StringBuffer Render(IMarkdownRenderer, MarkdownEmInlineToken, MarkdownInlineContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer render, MarkdownEmInlineToken token, MarkdownInlineContext context) Parameters Type Name Description IMarkdownRenderer render MarkdownEmInlineToken token MarkdownInlineContext context Returns Type Description StringBuffer Render(IMarkdownRenderer, MarkdownHeadingBlockToken, MarkdownBlockContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer render, MarkdownHeadingBlockToken token, MarkdownBlockContext context) Parameters Type Name Description IMarkdownRenderer render MarkdownHeadingBlockToken token MarkdownBlockContext context Returns Type Description StringBuffer Render(IMarkdownRenderer, MarkdownHrBlockToken, MarkdownBlockContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer render, MarkdownHrBlockToken token, MarkdownBlockContext context) Parameters Type Name Description IMarkdownRenderer render MarkdownHrBlockToken token MarkdownBlockContext context Returns Type Description StringBuffer Render(IMarkdownRenderer, MarkdownHtmlBlockToken, MarkdownBlockContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer render, MarkdownHtmlBlockToken token, MarkdownBlockContext context) Parameters Type Name Description IMarkdownRenderer render MarkdownHtmlBlockToken token MarkdownBlockContext context Returns Type Description StringBuffer Render(IMarkdownRenderer, MarkdownImageInlineToken, MarkdownInlineContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer render, MarkdownImageInlineToken token, MarkdownInlineContext context) Parameters Type Name Description IMarkdownRenderer render MarkdownImageInlineToken token MarkdownInlineContext context Returns Type Description StringBuffer Render(IMarkdownRenderer, MarkdownLinkInlineToken, MarkdownInlineContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer render, MarkdownLinkInlineToken token, MarkdownInlineContext context) Parameters Type Name Description IMarkdownRenderer render MarkdownLinkInlineToken token MarkdownInlineContext context Returns Type Description StringBuffer Render(IMarkdownRenderer, MarkdownListBlockToken, MarkdownBlockContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer render, MarkdownListBlockToken token, MarkdownBlockContext context) Parameters Type Name Description IMarkdownRenderer render MarkdownListBlockToken token MarkdownBlockContext context Returns Type Description StringBuffer Render(IMarkdownRenderer, MarkdownListItemBlockToken, String) Declaration protected virtual StringBuffer Render(IMarkdownRenderer render, MarkdownListItemBlockToken token, string indent) Parameters Type Name Description IMarkdownRenderer render MarkdownListItemBlockToken token String indent Returns Type Description StringBuffer Render(IMarkdownRenderer, MarkdownNonParagraphBlockToken, MarkdownBlockContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer render, MarkdownNonParagraphBlockToken token, MarkdownBlockContext context) Parameters Type Name Description IMarkdownRenderer render MarkdownNonParagraphBlockToken token MarkdownBlockContext context Returns Type Description StringBuffer Render(IMarkdownRenderer, MarkdownParagraphBlockToken, MarkdownBlockContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer render, MarkdownParagraphBlockToken token, MarkdownBlockContext context) Parameters Type Name Description IMarkdownRenderer render MarkdownParagraphBlockToken token MarkdownBlockContext context Returns Type Description StringBuffer Render(IMarkdownRenderer, MarkdownStrongInlineToken, MarkdownInlineContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer render, MarkdownStrongInlineToken token, MarkdownInlineContext context) Parameters Type Name Description IMarkdownRenderer render MarkdownStrongInlineToken token MarkdownInlineContext context Returns Type Description StringBuffer Render(IMarkdownRenderer, MarkdownTableBlockToken, MarkdownBlockContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer render, MarkdownTableBlockToken token, MarkdownBlockContext context) Parameters Type Name Description IMarkdownRenderer render MarkdownTableBlockToken token MarkdownBlockContext context Returns Type Description StringBuffer"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownRefLinkInlineRule.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownRefLinkInlineRule.html",
    "title": "Class MarkdownRefLinkInlineRule\r\n   | DocFX website ",
    "keywords": "Class MarkdownRefLinkInlineRule Inheritance Object MarkdownLinkBaseInlineRule MarkdownRefLinkInlineRule Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownRefLinkInlineRule : MarkdownLinkBaseInlineRule, IMarkdownRule Properties Name Declaration public override string Name { get; } Proverty Value Type Description String RefLink Declaration public virtual Regex RefLink { get; } Proverty Value Type Description Regex Methods TryMatch(IMarkdownParser, ref String) Declaration public override IMarkdownToken TryMatch(IMarkdownParser engine, ref string source) Parameters Type Name Description IMarkdownParser engine String source Returns Type Description IMarkdownToken"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownRawToken.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownRawToken.html",
    "title": "Class MarkdownRawToken\r\n   | DocFX website ",
    "keywords": "Class MarkdownRawToken Inheritance Object MarkdownRawToken Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownRawToken : IMarkdownToken Constructors MarkdownRawToken(IMarkdownRule, IMarkdownContext, String) Declaration public MarkdownRawToken(IMarkdownRule rule, IMarkdownContext context, string rawMarkdown) Parameters Type Name Description IMarkdownRule rule IMarkdownContext context String rawMarkdown Properties Context Declaration public IMarkdownContext Context { get; } Proverty Value Type Description IMarkdownContext RawMarkdown Declaration public string RawMarkdown { get; set; } Proverty Value Type Description String Rule Declaration public IMarkdownRule Rule { get; } Proverty Value Type Description IMarkdownRule"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownParserExtensions.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownParserExtensions.html",
    "title": "Class MarkdownParserExtensions\r\n   | DocFX website ",
    "keywords": "Class MarkdownParserExtensions Inheritance Object MarkdownParserExtensions Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownParserExtensions Methods SwitchContext(IMarkdownParser, IReadOnlyDictionary<String, Object>) Declaration public static IMarkdownContext SwitchContext(IMarkdownParser parser, IReadOnlyDictionary<string, object> variables) Parameters Type Name Description IMarkdownParser parser System.Collections.Generic.IReadOnlyDictionary < String , Object > variables Returns Type Description IMarkdownContext SwitchContext(IMarkdownParser, String, Object) Declaration public static IMarkdownContext SwitchContext(IMarkdownParser parser, string variableKey, object value) Parameters Type Name Description IMarkdownParser parser String variableKey Object value Returns Type Description IMarkdownContext TokenizeInline(IMarkdownParser, String) Declaration public static InlineContent TokenizeInline(IMarkdownParser parser, string markdown) Parameters Type Name Description IMarkdownParser parser String markdown Returns Type Description InlineContent"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownParser.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownParser.html",
    "title": "Class MarkdownParser\r\n   | DocFX website ",
    "keywords": "Class MarkdownParser Inheritance Object MarkdownParser Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownParser : IMarkdownParser Constructors MarkdownParser(IMarkdownContext, Options, Dictionary<String, LinkObj>) Declaration public MarkdownParser(IMarkdownContext context, Options options, Dictionary<string, LinkObj> links) Parameters Type Name Description IMarkdownContext context Options options System.Collections.Generic.Dictionary < String , LinkObj > links Properties Context Declaration public IMarkdownContext Context { get; } Proverty Value Type Description IMarkdownContext Links Declaration public Dictionary<string, LinkObj> Links { get; } Proverty Value Type Description System.Collections.Generic.Dictionary < String , LinkObj > Options Declaration public Options Options { get; } Proverty Value Type Description Options Methods Preprocess(String) Declaration protected virtual string Preprocess(string src) Parameters Type Name Description String src Returns Type Description String SwitchContext(IMarkdownContext) Declaration public IMarkdownContext SwitchContext(IMarkdownContext context) Parameters Type Name Description IMarkdownContext context Returns Type Description IMarkdownContext Tokenize(String) Declaration public ImmutableArray<IMarkdownToken> Tokenize(string markdown) Parameters Type Name Description String markdown Returns Type Description System.Collections.Immutable.ImmutableArray < IMarkdownToken >"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownParagraphBlockToken.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownParagraphBlockToken.html",
    "title": "Class MarkdownParagraphBlockToken\r\n   | DocFX website ",
    "keywords": "Class MarkdownParagraphBlockToken Inheritance Object MarkdownParagraphBlockToken Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownParagraphBlockToken : IMarkdownToken, IMarkdownRewritable<MarkdownParagraphBlockToken> Constructors MarkdownParagraphBlockToken(IMarkdownRule, IMarkdownContext, InlineContent, String) Declaration public MarkdownParagraphBlockToken(IMarkdownRule rule, IMarkdownContext context, InlineContent inlineTokens, string rawMarkdown) Parameters Type Name Description IMarkdownRule rule IMarkdownContext context InlineContent inlineTokens String rawMarkdown Properties Context Declaration public IMarkdownContext Context { get; } Proverty Value Type Description IMarkdownContext InlineTokens Declaration public InlineContent InlineTokens { get; } Proverty Value Type Description InlineContent RawMarkdown Declaration public string RawMarkdown { get; set; } Proverty Value Type Description String Rule Declaration public IMarkdownRule Rule { get; } Proverty Value Type Description IMarkdownRule Methods Create(IMarkdownRule, MarkdownParser, String, String) Declaration public static MarkdownParagraphBlockToken Create(IMarkdownRule rule, MarkdownParser engine, string content, string rawMarkdown) Parameters Type Name Description IMarkdownRule rule MarkdownParser engine String content String rawMarkdown Returns Type Description MarkdownParagraphBlockToken Rewrite(IMarkdownRewriteEngine) Declaration public MarkdownParagraphBlockToken Rewrite(IMarkdownRewriteEngine rewriterEngine) Parameters Type Name Description IMarkdownRewriteEngine rewriterEngine Returns Type Description MarkdownParagraphBlockToken"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownParagraphBlockRule.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownParagraphBlockRule.html",
    "title": "Class MarkdownParagraphBlockRule\r\n   | DocFX website ",
    "keywords": "Class MarkdownParagraphBlockRule Inheritance Object MarkdownParagraphBlockRule Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownParagraphBlockRule : IMarkdownRule Properties Name Declaration public virtual string Name { get; } Proverty Value Type Description String Paragraph Declaration public virtual Regex Paragraph { get; } Proverty Value Type Description Regex Methods TryMatch(IMarkdownParser, ref String) Declaration public virtual IMarkdownToken TryMatch(IMarkdownParser engine, ref string source) Parameters Type Name Description IMarkdownParser engine String source Returns Type Description IMarkdownToken"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownNpTableBlockRule.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownNpTableBlockRule.html",
    "title": "Class MarkdownNpTableBlockRule\r\n   | DocFX website ",
    "keywords": "Class MarkdownNpTableBlockRule Inheritance Object MarkdownNpTableBlockRule Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownNpTableBlockRule : IMarkdownRule Properties Name Declaration public string Name { get; } Proverty Value Type Description String NpTable Declaration public virtual Regex NpTable { get; } Proverty Value Type Description Regex Methods ParseAligns(String[]) Declaration protected virtual Align[] ParseAligns(string[] aligns) Parameters Type Name Description String [] aligns Returns Type Description Align [] TryMatch(IMarkdownParser, ref String) Declaration public virtual IMarkdownToken TryMatch(IMarkdownParser engine, ref string source) Parameters Type Name Description IMarkdownParser engine String source Returns Type Description IMarkdownToken"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownNonParagraphBlockToken.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownNonParagraphBlockToken.html",
    "title": "Class MarkdownNonParagraphBlockToken\r\n   | DocFX website ",
    "keywords": "Class MarkdownNonParagraphBlockToken Inheritance Object MarkdownNonParagraphBlockToken Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownNonParagraphBlockToken : IMarkdownToken, IMarkdownRewritable<MarkdownNonParagraphBlockToken> Constructors MarkdownNonParagraphBlockToken(IMarkdownRule, IMarkdownContext, InlineContent, String) Declaration public MarkdownNonParagraphBlockToken(IMarkdownRule rule, IMarkdownContext context, InlineContent content, string rawMarkdown) Parameters Type Name Description IMarkdownRule rule IMarkdownContext context InlineContent content String rawMarkdown Properties Content Declaration public InlineContent Content { get; } Proverty Value Type Description InlineContent Context Declaration public IMarkdownContext Context { get; } Proverty Value Type Description IMarkdownContext RawMarkdown Declaration public string RawMarkdown { get; set; } Proverty Value Type Description String Rule Declaration public IMarkdownRule Rule { get; } Proverty Value Type Description IMarkdownRule Methods Rewrite(IMarkdownRewriteEngine) Declaration public MarkdownNonParagraphBlockToken Rewrite(IMarkdownRewriteEngine rewriteEngine) Parameters Type Name Description IMarkdownRewriteEngine rewriteEngine Returns Type Description MarkdownNonParagraphBlockToken"
  },
  "api/Microsoft.DocAsCode.EntityModel.Swagger.SwaggerModel.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.Swagger.SwaggerModel.html",
    "title": "Class SwaggerModel\r\n   | DocFX website ",
    "keywords": "Class SwaggerModel Inheritance Object SwaggerModel Namespace :Microsoft.DocAsCode.EntityModel.Swagger Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Serializable] public class SwaggerModel Properties BasePath The base path on which the API is served, which is relative to the host. If it is not included, the API is served directly under the host. The value MUST start with a leading slash (/). The basePath does not support path templating. Declaration [YamlMember(Alias = \"basePath\")] [JsonProperty(\"basePath\")] public string BasePath { get; set; } Proverty Value Type Description String Defintions An object to hold data types produced and consumed by operations. Declaration [YamlMember(Alias = \"definitions\")] [JsonProperty(\"definitions\")] public object Defintions { get; set; } Proverty Value Type Description Object Description Declaration [YamlMember(Alias = \"description\")] [JsonProperty(\"description\")] public string Description { get; set; } Proverty Value Type Description String Host The host (name or ip) serving the API. This MUST be the host only and does not include the scheme nor sub-paths. It MAY include a port. If the host is not included, the host serving the documentation is to be used (including the port). The host does not support path templating. Declaration [YamlMember(Alias = \"host\")] [JsonProperty(\"host\")] public string Host { get; set; } Proverty Value Type Description String Info Required. Provides metadata about the API. The metadata can be used by the clients if needed. Declaration [YamlMember(Alias = \"info\")] [JsonProperty(\"info\")] public InfoObject Info { get; set; } Proverty Value Type Description InfoObject Metadata Declaration [ExtensibleMember] [JsonExtensionData] public Dictionary<string, object> Metadata { get; set; } Proverty Value Type Description System.Collections.Generic.Dictionary < String , Object > Parameters An object to hold parameters that can be used across operations. This property does not define global parameters for all operations Declaration [YamlMember(Alias = \"parameters\")] [JsonProperty(\"parameters\")] public object Parameters { get; set; } Proverty Value Type Description Object Paths Required. The available paths and operations for the API. Declaration [YamlMember(Alias = \"paths\")] [JsonProperty(\"paths\")] public PathsObject Paths { get; set; } Proverty Value Type Description PathsObject Raw The original swagger.json cpntent Declaration [YamlIgnore] [JsonIgnore] public string Raw { get; set; } Proverty Value Type Description String Responses An object to hold responses that can be used across operations. This property does not define global responses for all operations. Declaration [YamlMember(Alias = \"responses\")] [JsonProperty(\"responses\")] public object Responses { get; set; } Proverty Value Type Description Object Summary Declaration [YamlMember(Alias = \"summary\")] [JsonProperty(\"summary\")] public string Summary { get; set; } Proverty Value Type Description String"
  },
  "api/Microsoft.DocAsCode.EntityModel.Swagger.ResponseObject.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.Swagger.ResponseObject.html",
    "title": "Class ResponseObject\r\n   | DocFX website ",
    "keywords": "Class ResponseObject Inheritance Object ResponseObject Namespace :Microsoft.DocAsCode.EntityModel.Swagger Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Serializable] public class ResponseObject Properties Description Declaration [YamlMember(Alias = \"description\")] [JsonProperty(\"description\")] public string Description { get; set; } Proverty Value Type Description String Examples Key is the mime type Declaration [YamlMember(Alias = \"examples\")] [JsonProperty(\"examples\")] public Dictionary<string, object> Examples { get; set; } Proverty Value Type Description System.Collections.Generic.Dictionary < String , Object > Metadata Declaration [ExtensibleMember] [JsonExtensionData] public Dictionary<string, object> Metadata { get; set; } Proverty Value Type Description System.Collections.Generic.Dictionary < String , Object > Summary Declaration [YamlMember(Alias = \"summary\")] [JsonProperty(\"summary\")] public string Summary { get; set; } Proverty Value Type Description String"
  },
  "api/Microsoft.DocAsCode.EntityModel.Swagger.PathsObject.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.Swagger.PathsObject.html",
    "title": "Class PathsObject\r\n   | DocFX website ",
    "keywords": "Class PathsObject Inheritance Object System.Collections.Generic.Dictionary < String , PathItemObject > PathsObject Namespace :Microsoft.DocAsCode.EntityModel.Swagger Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Serializable] public class PathsObject : Dictionary<string, PathItemObject>, IDictionary<string, PathItemObject>, ICollection<KeyValuePair<string, PathItemObject>>, IDictionary, ICollection, IReadOnlyDictionary<string, PathItemObject>, IReadOnlyCollection<KeyValuePair<string, PathItemObject>>, IEnumerable<KeyValuePair<string, PathItemObject>>, IEnumerable, ISerializable, IDeserializationCallback Properties Metadata Declaration [ExtensibleMember] [JsonExtensionData] public Dictionary<string, object> Metadata { get; set; } Proverty Value Type Description System.Collections.Generic.Dictionary < String , Object >"
  },
  "api/Microsoft.DocAsCode.EntityModel.Swagger.PathItemObject.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.Swagger.PathItemObject.html",
    "title": "Class PathItemObject\r\n   | DocFX website ",
    "keywords": "Class PathItemObject TODO: need a converter Inheritance Object System.Collections.Generic.Dictionary < String , OperationObject > PathItemObject Namespace :Microsoft.DocAsCode.EntityModel.Swagger Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Serializable] public class PathItemObject : Dictionary<string, OperationObject>, IDictionary<string, OperationObject>, ICollection<KeyValuePair<string, OperationObject>>, IDictionary, ICollection, IReadOnlyDictionary<string, OperationObject>, IReadOnlyCollection<KeyValuePair<string, OperationObject>>, IEnumerable<KeyValuePair<string, OperationObject>>, IEnumerable, ISerializable, IDeserializationCallback Properties Metadata Declaration [ExtensibleMember] [JsonExtensionData] public Dictionary<string, object> Metadata { get; set; } Proverty Value Type Description System.Collections.Generic.Dictionary < String , Object >"
  },
  "api/Microsoft.DocAsCode.EntityModel.Swagger.ParameterObject.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.Swagger.ParameterObject.html",
    "title": "Class ParameterObject\r\n   | DocFX website ",
    "keywords": "Class ParameterObject Inheritance Object ParameterObject Namespace :Microsoft.DocAsCode.EntityModel.Swagger Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Serializable] public class ParameterObject Properties Description Declaration [YamlMember(Alias = \"description\")] [JsonProperty(\"description\")] public string Description { get; set; } Proverty Value Type Description String Metadata Declaration [ExtensibleMember] [JsonExtensionData] public Dictionary<string, object> Metadata { get; set; } Proverty Value Type Description System.Collections.Generic.Dictionary < String , Object >"
  },
  "api/Microsoft.DocAsCode.EntityModel.Swagger.OperationObject.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.Swagger.OperationObject.html",
    "title": "Class OperationObject\r\n   | DocFX website ",
    "keywords": "Class OperationObject Inheritance Object OperationObject Namespace :Microsoft.DocAsCode.EntityModel.Swagger Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Serializable] public class OperationObject Properties Description Declaration [YamlMember(Alias = \"description\")] [JsonProperty(\"description\")] public string Description { get; set; } Proverty Value Type Description String Metadata Declaration [ExtensibleMember] [JsonExtensionData] public Dictionary<string, object> Metadata { get; set; } Proverty Value Type Description System.Collections.Generic.Dictionary < String , Object > OperationId Unique string used to identify the operation. The id MUST be unique among all operations described in the API. Tools and libraries MAY use the operationId to uniquely identify an operation, therefore, it is recommended to follow common programming naming conventions. Declaration [YamlMember(Alias = \"operationId\")] [JsonProperty(\"operationId\")] public string OperationId { get; set; } Proverty Value Type Description String OperationName Docfx Added: Operation name, e.g. get, put, post, delete, options, head, patch Declaration [YamlMember(Alias = \"name\")] [JsonProperty(\"name\")] public string OperationName { get; set; } Proverty Value Type Description String Parameters Declaration [YamlMember(Alias = \"parameters\")] [JsonProperty(\"parameters\")] public List<ParameterObject> Parameters { get; set; } Proverty Value Type Description System.Collections.Generic.List < ParameterObject > Responses Key: default or HttpStatusCode Declaration [YamlMember(Alias = \"responses\")] [JsonProperty(\"responses\")] public Dictionary<string, ResponseObject> Responses { get; set; } Proverty Value Type Description System.Collections.Generic.Dictionary < String , ResponseObject > Summary Declaration [YamlMember(Alias = \"summary\")] [JsonProperty(\"summary\")] public string Summary { get; set; } Proverty Value Type Description String"
  },
  "api/Microsoft.DocAsCode.EntityModel.Swagger.InfoObject.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.Swagger.InfoObject.html",
    "title": "Class InfoObject\r\n   | DocFX website ",
    "keywords": "Class InfoObject Info object Inheritance Object InfoObject Namespace :Microsoft.DocAsCode.EntityModel.Swagger Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Serializable] public class InfoObject Properties PatternedObjects Declaration [ExtensibleMember] [JsonExtensionData] public Dictionary<string, object> PatternedObjects { get; set; } Proverty Value Type Description System.Collections.Generic.Dictionary < String , Object > Title Required. The title of the application. Declaration [YamlMember(Alias = \"title\")] [JsonProperty(\"title\")] public string Title { get; set; } Proverty Value Type Description String"
  },
  "api/Microsoft.DocAsCode.EntityModel.SourceDetail.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.SourceDetail.html",
    "title": "Class SourceDetail\r\n   | DocFX website ",
    "keywords": "Class SourceDetail Inheritance Object SourceDetail Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Serializable] public class SourceDetail Properties BasePath Declaration [YamlMember(Alias = \"base\")] [JsonProperty(\"base\")] public string BasePath { get; set; } Proverty Value Type Description String Content Declaration [YamlMember(Alias = \"content\")] [JsonProperty(\"content\")] public string Content { get; set; } Proverty Value Type Description String EndLine Declaration [YamlMember(Alias = \"endLine\")] [JsonProperty(\"endLine\")] public int EndLine { get; set; } Proverty Value Type Description Int32 Href The url path for current source, should be resolved at some late stage Declaration [YamlMember(Alias = \"href\")] [JsonProperty(\"href\")] public string Href { get; set; } Proverty Value Type Description String IsExternalPath The external path for current source if it is not locally available Declaration [YamlMember(Alias = \"isExternal\")] [JsonProperty(\"isExternal\")] public bool IsExternalPath { get; set; } Proverty Value Type Description Boolean Name Declaration [YamlMember(Alias = \"id\")] [JsonProperty(\"id\")] public string Name { get; set; } Proverty Value Type Description String Path The local path for current source, should be resolved to be relative path at some late stage Declaration [YamlMember(Alias = \"path\")] [JsonProperty(\"path\")] public string Path { get; set; } Proverty Value Type Description String Remote Declaration [YamlMember(Alias = \"remote\")] [JsonProperty(\"remote\")] public GitDetail Remote { get; set; } Proverty Value Type Description GitDetail StartLine Declaration [YamlMember(Alias = \"startLine\")] [JsonProperty(\"startLine\")] public int StartLine { get; set; } Proverty Value Type Description Int32"
  },
  "api/Microsoft.DocAsCode.EntityModel.SimpleYamlModelGenerator.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.SimpleYamlModelGenerator.html",
    "title": "Class SimpleYamlModelGenerator\r\n   | DocFX website ",
    "keywords": "Class SimpleYamlModelGenerator Inheritance Object YamlModelGenerator SimpleYamlModelGenerator Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public abstract class SimpleYamlModelGenerator : YamlModelGenerator Constructors SimpleYamlModelGenerator(SyntaxLanguage) Declaration protected SimpleYamlModelGenerator(SyntaxLanguage language) Parameters Type Name Description SyntaxLanguage language Fields QualifiedFormat Declaration public static readonly SymbolDisplayFormat QualifiedFormat ShortFormat Declaration public static readonly SymbolDisplayFormat ShortFormat Properties Language Declaration public SyntaxLanguage Language { get; } Proverty Value Type Description SyntaxLanguage Methods GenerateReference(ISymbol, ReferenceItem, SymbolVisitorAdapter) Declaration protected abstract void GenerateReference(ISymbol symbol, ReferenceItem reference, SymbolVisitorAdapter adapter) Parameters Type Name Description Microsoft.CodeAnalysis.ISymbol symbol ReferenceItem reference SymbolVisitorAdapter adapter GetSyntaxContent(MemberType, ISymbol, SymbolVisitorAdapter) Declaration protected abstract string GetSyntaxContent(MemberType typeKind, ISymbol symbol, SymbolVisitorAdapter adapter) Parameters Type Name Description MemberType typeKind Microsoft.CodeAnalysis.ISymbol symbol SymbolVisitorAdapter adapter Returns Type Description String Operators Addition(SimpleYamlModelGenerator, SimpleYamlModelGenerator) Declaration public static CompositeYamlModelGenerator operator +(SimpleYamlModelGenerator left, SimpleYamlModelGenerator right) Parameters Type Name Description SimpleYamlModelGenerator left SimpleYamlModelGenerator right Returns Type Description CompositeYamlModelGenerator"
  },
  "api/Microsoft.DocAsCode.EntityModel.SetParent.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.SetParent.html",
    "title": "Class SetParent\r\n   | DocFX website ",
    "keywords": "Class SetParent Inheritance Object SetParent Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class SetParent : IResolverPipeline Methods Run(MetadataModel, ResolverContext) Declaration public void Run(MetadataModel yaml, ResolverContext context) Parameters Type Name Description MetadataModel yaml ResolverContext context"
  },
  "api/Microsoft.DocAsCode.EntityModel.Section.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.Section.html",
    "title": "Class Section\r\n   | DocFX website ",
    "keywords": "Class Section Inheritance Object Section Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class Section Properties Key The raw content matching the regular expression, e.g. @ABC Declaration [YamlMember(Alias = \"key\")] [JsonProperty(\"key\")] public string Key { get; set; } Proverty Value Type Description String Locations Defines the Markdown Content Location Range Declaration [YamlIgnore] [JsonIgnore] public List<Location> Locations { get; set; } Proverty Value Type Description System.Collections.Generic.List < Location >"
  },
  "api/Microsoft.DocAsCode.EntityModel.ResourceFinder.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.ResourceFinder.html",
    "title": "Class ResourceFinder\r\n   | DocFX website ",
    "keywords": "Class ResourceFinder Inheritance Object ResourceFinder Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Serializable] public class ResourceFinder Constructors ResourceFinder(Assembly, String, String) Declaration public ResourceFinder(Assembly assembly, string rootNamespace, string baseDirectory = null) Parameters Type Name Description Assembly assembly String rootNamespace String baseDirectory Methods Find(String) Search in order: Inside OverrideFolder, NOTE sub-folders are NOT included a. Folder with provided name b. ZIP file with provided name Inside Embedded Resources a. ZIP file with provided name Declaration public ResourceCollection Find(string name) Parameters Type Name Description String name The resource name provided Returns Type Description ResourceCollection If found, return the resource collection; if not, return null"
  },
  "api/Microsoft.DocAsCode.EntityModel.ResourceCollection.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.ResourceCollection.html",
    "title": "Class ResourceCollection\r\n   | DocFX website ",
    "keywords": "Class ResourceCollection Inheritance Object ResourceCollection Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public abstract class ResourceCollection : IDisposable Properties IsEmpty Declaration public abstract bool IsEmpty { get; } Proverty Value Type Description Boolean Name Declaration public abstract string Name { get; } Proverty Value Type Description String Names Declaration public abstract IEnumerable<string> Names { get; } Proverty Value Type Description System.Collections.Generic.IEnumerable < String > Methods Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Finalize() Override Object.Finalize by defining a destructor Declaration protected void Finalize() GetResource(String) Declaration public string GetResource(string name) Parameters Type Name Description String name Returns Type Description String GetResources(String) Declaration public IEnumerable<KeyValuePair<string, string>> GetResources(string selector = null) Parameters Type Name Description String selector Returns Type Description System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair < String , String >> GetResourceStream(String) Declaration public abstract Stream GetResourceStream(string name) Parameters Type Name Description String name Returns Type Description Stream GetResourceStreams(String) Declaration public IEnumerable<KeyValuePair<string, Stream>> GetResourceStreams(string selector = null) Parameters Type Name Description String selector Returns Type Description System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair < String , Stream >>"
  },
  "api/Microsoft.DocAsCode.EntityModel.ResolveReference.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.ResolveReference.html",
    "title": "Class ResolveReference\r\n   | DocFX website ",
    "keywords": "Class ResolveReference Inheritance Object ResolveReference Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class ResolveReference : IResolverPipeline Methods Run(MetadataModel, ResolverContext) Declaration public void Run(MetadataModel yaml, ResolverContext context) Parameters Type Name Description MetadataModel yaml ResolverContext context"
  },
  "api/Microsoft.DocAsCode.EntityModel.ResolverContext.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.ResolverContext.html",
    "title": "Class ResolverContext\r\n   | DocFX website ",
    "keywords": "Class ResolverContext Inheritance Object ResolverContext Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class ResolverContext Properties ApiFolder Declaration public string ApiFolder { get; set; } Proverty Value Type Description String ExternalReferences Declaration public ExternalReferencePackageCollection ExternalReferences { get; set; } Proverty Value Type Description ExternalReferencePackageCollection PreserveRawInlineComments Declaration public bool PreserveRawInlineComments { get; set; } Proverty Value Type Description Boolean References Declaration public Dictionary<string, ReferenceItem> References { get; set; } Proverty Value Type Description System.Collections.Generic.Dictionary < String , ReferenceItem >"
  },
  "api/Microsoft.DocAsCode.EntityModel.ReferenceItemVisitor.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.ReferenceItemVisitor.html",
    "title": "Class ReferenceItemVisitor\r\n   | DocFX website ",
    "keywords": "Class ReferenceItemVisitor Inheritance Object Microsoft.CodeAnalysis.SymbolVisitor ReferenceItemVisitor Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public abstract class ReferenceItemVisitor : SymbolVisitor Constructors ReferenceItemVisitor(ReferenceItem) Declaration protected ReferenceItemVisitor(ReferenceItem referenceItem) Parameters Type Name Description ReferenceItem referenceItem Fields QualifiedFormat Declaration public static readonly SymbolDisplayFormat QualifiedFormat QualifiedFormatWithoutGenericeParameter Declaration public static readonly SymbolDisplayFormat QualifiedFormatWithoutGenericeParameter ShortFormat Declaration public static readonly SymbolDisplayFormat ShortFormat ShortFormatWithoutGenericeParameter Declaration public static readonly SymbolDisplayFormat ShortFormatWithoutGenericeParameter Properties ReferenceItem Declaration protected ReferenceItem ReferenceItem { get; } Proverty Value Type Description ReferenceItem Methods AddBeginGenericParameter() Declaration protected abstract void AddBeginGenericParameter() AddEndGenericParameter() Declaration protected abstract void AddEndGenericParameter() AddGenericParameterSeparator() Declaration protected abstract void AddGenericParameterSeparator() AddLinkItems(INamedTypeSymbol, Boolean) Declaration protected abstract void AddLinkItems(INamedTypeSymbol symbol, bool withGenericeParameter) Parameters Type Name Description Microsoft.CodeAnalysis.INamedTypeSymbol symbol Boolean withGenericeParameter VisitNamedType(INamedTypeSymbol) Declaration public override void VisitNamedType(INamedTypeSymbol symbol) Parameters Type Name Description Microsoft.CodeAnalysis.INamedTypeSymbol symbol"
  },
  "api/Microsoft.DocAsCode.Dfm.MarkdownValidators.html": {
    "href": "api/Microsoft.DocAsCode.Dfm.MarkdownValidators.html",
    "title": "Namespace Microsoft.DocAsCode.Dfm.MarkdownValidators\r\n   | DocFX website ",
    "keywords": "Namespace Microsoft.DocAsCode.Dfm.MarkdownValidators Classes MarkdownSytleConfig MarkdownTagValidationRule MarkdownValidationRule MarkdownValidatorBuilder Enums TagValidationBehavior"
  },
  "api/Microsoft.DocAsCode.Dfm.MarkdownValidators.TagValidationBehavior.html": {
    "href": "api/Microsoft.DocAsCode.Dfm.MarkdownValidators.TagValidationBehavior.html",
    "title": "Enum TagValidationBehavior\r\n   | DocFX website ",
    "keywords": "Enum TagValidationBehavior Namespace :Microsoft.DocAsCode.Dfm.MarkdownValidators Assembly :Microsoft.DocAsCode.Dfm.dll Syntax public enum TagValidationBehavior Fields Error Declaration Error = 2 None Declaration None = 0 Warning Declaration Warning = 1"
  },
  "api/Microsoft.DocAsCode.Dfm.MarkdownValidators.MarkdownValidatorBuilder.html": {
    "href": "api/Microsoft.DocAsCode.Dfm.MarkdownValidators.MarkdownValidatorBuilder.html",
    "title": "Class MarkdownValidatorBuilder\r\n   | DocFX website ",
    "keywords": "Class MarkdownValidatorBuilder Inheritance Object MarkdownValidatorBuilder Namespace :Microsoft.DocAsCode.Dfm.MarkdownValidators Assembly :Microsoft.DocAsCode.Dfm.dll Syntax public class MarkdownValidatorBuilder Constructors MarkdownValidatorBuilder(CompositionHost) Declaration public MarkdownValidatorBuilder(CompositionHost host) Parameters Type Name Description System.Composition.Hosting.CompositionHost host Fields MarkdownValidatePhaseName Declaration public const string MarkdownValidatePhaseName Properties CompositionHost Declaration public CompositionHost CompositionHost { get; } Proverty Value Type Description System.Composition.Hosting.CompositionHost TagValidators Declaration public ImmutableList<MarkdownTagValidationRule> TagValidators { get; set; } Proverty Value Type Description System.Collections.Immutable.ImmutableList < MarkdownTagValidationRule > ValidatorContracts Declaration public ImmutableList<string> ValidatorContracts { get; set; } Proverty Value Type Description System.Collections.Immutable.ImmutableList < String > Methods AddTagValidators(MarkdownTagValidationRule[]) Declaration public void AddTagValidators(params MarkdownTagValidationRule[] validators) Parameters Type Name Description MarkdownTagValidationRule [] validators AddTagValidators(IEnumerable<MarkdownTagValidationRule>) Declaration public void AddTagValidators(IEnumerable<MarkdownTagValidationRule> validators) Parameters Type Name Description System.Collections.Generic.IEnumerable < MarkdownTagValidationRule > validators AddValidators(IEnumerable<String>) Declaration public void AddValidators(IEnumerable<string> validatorContracts) Parameters Type Name Description System.Collections.Generic.IEnumerable < String > validatorContracts AddValidators(String[]) Declaration public void AddValidators(params string[] validatorContracts) Parameters Type Name Description String [] validatorContracts Create() Declaration public IMarkdownTokenRewriter Create() Returns Type Description IMarkdownTokenRewriter"
  },
  "api/Microsoft.DocAsCode.Dfm.MarkdownValidators.MarkdownValidationRule.html": {
    "href": "api/Microsoft.DocAsCode.Dfm.MarkdownValidators.MarkdownValidationRule.html",
    "title": "Class MarkdownValidationRule\r\n   | DocFX website ",
    "keywords": "Class MarkdownValidationRule Inheritance Object MarkdownValidationRule Namespace :Microsoft.DocAsCode.Dfm.MarkdownValidators Assembly :Microsoft.DocAsCode.Dfm.dll Syntax public class MarkdownValidationRule Properties Disable Declaration [DefaultValue(false)] [JsonProperty(\"disable\")] public bool Disable { get; set; } Proverty Value Type Description Boolean RuleName Declaration [JsonProperty(\"name\")] public string RuleName { get; set; } Proverty Value Type Description String Operators Explicit(String to MarkdownValidationRule) Declaration public static explicit operator MarkdownValidationRule(string ruleName) Parameters Type Name Description String ruleName Returns Type Description MarkdownValidationRule"
  },
  "api/Microsoft.DocAsCode.Dfm.MarkdownValidators.MarkdownTagValidationRule.html": {
    "href": "api/Microsoft.DocAsCode.Dfm.MarkdownValidators.MarkdownTagValidationRule.html",
    "title": "Class MarkdownTagValidationRule\r\n   | DocFX website ",
    "keywords": "Class MarkdownTagValidationRule Inheritance Object MarkdownTagValidationRule Namespace :Microsoft.DocAsCode.Dfm.MarkdownValidators Assembly :Microsoft.DocAsCode.Dfm.dll Syntax public class MarkdownTagValidationRule Properties Behavior Define tag's behavior. Declaration [JsonProperty(\"behavior\")] public TagValidationBehavior Behavior { get; set; } Proverty Value Type Description TagValidationBehavior CustomValidatorContractName The contract name for custom validator ICustomMarkdownTagValidator . Declaration [JsonProperty(\"customValidatorContractName\")] public string CustomValidatorContractName { get; set; } Proverty Value Type Description String MessageFormatter The message formatter for warning and error. '{0}' is name of tag, '{1}' is the full tag. Declaration [JsonProperty(\"messageFormatter\")] public string MessageFormatter { get; set; } Proverty Value Type Description String OpeningTagOnly Only validate opening tag. Declaration [JsonProperty(\"openingTagOnly\")] public bool OpeningTagOnly { get; set; } Proverty Value Type Description Boolean TagNames The names of tag. Declaration [JsonProperty(\"tagNames\")] public List<string> TagNames { get; set; } Proverty Value Type Description System.Collections.Generic.List < String >"
  },
  "api/Microsoft.DocAsCode.Dfm.MarkdownValidators.MarkdownSytleConfig.html": {
    "href": "api/Microsoft.DocAsCode.Dfm.MarkdownValidators.MarkdownSytleConfig.html",
    "title": "Class MarkdownSytleConfig\r\n   | DocFX website ",
    "keywords": "Class MarkdownSytleConfig Inheritance Object MarkdownSytleConfig Namespace :Microsoft.DocAsCode.Dfm.MarkdownValidators Assembly :Microsoft.DocAsCode.Dfm.dll Syntax public class MarkdownSytleConfig Fields MarkdownStyleFileName Declaration public const string MarkdownStyleFileName Properties Rules Declaration [JsonProperty(\"rules\")] public MarkdownValidationRule[] Rules { get; set; } Proverty Value Type Description MarkdownValidationRule [] TagRules Declaration [JsonProperty(\"tagRules\")] public MarkdownTagValidationRule[] TagRules { get; set; } Proverty Value Type Description MarkdownTagValidationRule []"
  },
  "api/Microsoft.DocAsCode.Dfm.FileCacheLite.html": {
    "href": "api/Microsoft.DocAsCode.Dfm.FileCacheLite.html",
    "title": "Class FileCacheLite\r\n   | DocFX website ",
    "keywords": "Class FileCacheLite Inheritance Object FileCacheLite Namespace :Microsoft.DocAsCode.Dfm Assembly :Microsoft.DocAsCode.Dfm.dll Syntax public class FileCacheLite : IDisposable Constructors FileCacheLite(IEqualityComparer<String>) Declaration public FileCacheLite(IEqualityComparer<string> keyComparer) Parameters Type Name Description System.Collections.Generic.IEqualityComparer < String > keyComparer Fields Default Declaration public static readonly FileCacheLite Default Methods Add(String, String) Declaration public void Add(string key, string value) Parameters Type Name Description String key String value Dispose() Declaration public void Dispose() Get(String) Declaration public string Get(string key) Parameters Type Name Description String key Returns Type Description String Remove(String) Declaration public bool Remove(string key) Parameters Type Name Description String key Returns Type Description Boolean TryGet(String, out String) Declaration public bool TryGet(string key, out string value) Parameters Type Name Description String key String value Returns Type Description Boolean"
  },
  "api/Microsoft.DocAsCode.Dfm.DocfxFlavoredMarked.html": {
    "href": "api/Microsoft.DocAsCode.Dfm.DocfxFlavoredMarked.html",
    "title": "Class DocfxFlavoredMarked\r\n   | DocFX website ",
    "keywords": "Class DocfxFlavoredMarked Inheritance Object DocfxFlavoredMarked Namespace :Microsoft.DocAsCode.Dfm Assembly :Microsoft.DocAsCode.Dfm.dll Syntax public class DocfxFlavoredMarked Properties Renderer Declaration public static DfmRenderer Renderer { get; } Proverty Value Type Description DfmRenderer Methods CreateBuilder(String) Declaration public static DfmEngineBuilder CreateBuilder(string baseDir) Parameters Type Name Description String baseDir Returns Type Description DfmEngineBuilder Markup(String, String) Declaration public static string Markup(string src, string path = null) Parameters Type Name Description String src String path Returns Type Description String"
  },
  "api/Microsoft.DocAsCode.Dfm.DfmYamlHeaderBlockToken.html": {
    "href": "api/Microsoft.DocAsCode.Dfm.DfmYamlHeaderBlockToken.html",
    "title": "Class DfmYamlHeaderBlockToken\r\n   | DocFX website ",
    "keywords": "Class DfmYamlHeaderBlockToken Inheritance Object DfmYamlHeaderBlockToken Namespace :Microsoft.DocAsCode.Dfm Assembly :Microsoft.DocAsCode.Dfm.dll Syntax public class DfmYamlHeaderBlockToken : IMarkdownToken Constructors DfmYamlHeaderBlockToken(IMarkdownRule, IMarkdownContext, String, String) Declaration public DfmYamlHeaderBlockToken(IMarkdownRule rule, IMarkdownContext context, string content, string rawMarkdown) Parameters Type Name Description IMarkdownRule rule IMarkdownContext context String content String rawMarkdown Properties Content Declaration public string Content { get; } Proverty Value Type Description String Context Declaration public IMarkdownContext Context { get; } Proverty Value Type Description IMarkdownContext RawMarkdown Declaration public string RawMarkdown { get; set; } Proverty Value Type Description String Rule Declaration public IMarkdownRule Rule { get; } Proverty Value Type Description IMarkdownRule"
  },
  "api/Microsoft.DocAsCode.Dfm.DfmYamlHeaderBlockRule.html": {
    "href": "api/Microsoft.DocAsCode.Dfm.DfmYamlHeaderBlockRule.html",
    "title": "Class DfmYamlHeaderBlockRule\r\n   | DocFX website ",
    "keywords": "Class DfmYamlHeaderBlockRule Inheritance Object DfmYamlHeaderBlockRule Namespace :Microsoft.DocAsCode.Dfm Assembly :Microsoft.DocAsCode.Dfm.dll Syntax public class DfmYamlHeaderBlockRule : IMarkdownRule Fields _yamlHeaderRegex Declaration public static readonly Regex _yamlHeaderRegex Properties Name Declaration public string Name { get; } Proverty Value Type Description String YamlHeader Declaration public virtual Regex YamlHeader { get; } Proverty Value Type Description Regex Methods TryMatch(IMarkdownParser, ref String) Declaration public IMarkdownToken TryMatch(IMarkdownParser engine, ref string source) Parameters Type Name Description IMarkdownParser engine String source Returns Type Description IMarkdownToken"
  },
  "api/Microsoft.DocAsCode.Dfm.DfmXrefShortcutInlineRule.html": {
    "href": "api/Microsoft.DocAsCode.Dfm.DfmXrefShortcutInlineRule.html",
    "title": "Class DfmXrefShortcutInlineRule\r\n   | DocFX website ",
    "keywords": "Class DfmXrefShortcutInlineRule XREF regex: 1. If content after `@` is wrapped by `'` or `\"`, it contains any character including white space 2. If content after `@` is not wrapped by `'` or `\"`, It must start with word character `a-z` or `A-Z` It ends when a. line ends b. meets whitespaces c. line ends with `.`, `,`, `;`, `:`, `!`, `?` and `~` d. meets 2 times or more `.`, `,`, `;`, `:`, `!`, `?` and `~` Inheritance Object DfmXrefShortcutInlineRule Namespace :Microsoft.DocAsCode.Dfm Assembly :Microsoft.DocAsCode.Dfm.dll Syntax public class DfmXrefShortcutInlineRule : IMarkdownRule Fields XrefShortcutRegexString Declaration public static readonly string XrefShortcutRegexString XrefShortcutRegexWithQuoteString Declaration public static readonly string XrefShortcutRegexWithQuoteString Properties Name Declaration public string Name { get; } Proverty Value Type Description String Methods TryMatch(IMarkdownParser, ref String) Declaration public IMarkdownToken TryMatch(IMarkdownParser engine, ref string source) Parameters Type Name Description IMarkdownParser engine String source Returns Type Description IMarkdownToken"
  },
  "api/Microsoft.DocAsCode.Dfm.DfmXrefLinkInlineRule.html": {
    "href": "api/Microsoft.DocAsCode.Dfm.DfmXrefLinkInlineRule.html",
    "title": "Class DfmXrefLinkInlineRule\r\n   | DocFX website ",
    "keywords": "Class DfmXrefLinkInlineRule Xref Link syntax: [name](xref:uid \"title\") [name](@uid \"title\") title can be omitted Inheritance Object DfmXrefLinkInlineRule Namespace :Microsoft.DocAsCode.Dfm Assembly :Microsoft.DocAsCode.Dfm.dll Syntax public class DfmXrefLinkInlineRule : IMarkdownRule Properties Name Declaration public string Name { get; } Proverty Value Type Description String Methods TryMatch(IMarkdownParser, ref String) Declaration public IMarkdownToken TryMatch(IMarkdownParser engine, ref string source) Parameters Type Name Description IMarkdownParser engine String source Returns Type Description IMarkdownToken"
  },
  "api/Microsoft.DocAsCode.Dfm.DfmXrefInlineToken.html": {
    "href": "api/Microsoft.DocAsCode.Dfm.DfmXrefInlineToken.html",
    "title": "Class DfmXrefInlineToken\r\n   | DocFX website ",
    "keywords": "Class DfmXrefInlineToken Inheritance Object DfmXrefInlineToken Namespace :Microsoft.DocAsCode.Dfm Assembly :Microsoft.DocAsCode.Dfm.dll Syntax public class DfmXrefInlineToken : IMarkdownToken, IMarkdownRewritable<DfmXrefInlineToken> Constructors DfmXrefInlineToken(IMarkdownRule, IMarkdownContext, String, ImmutableArray<IMarkdownToken>, String, Boolean, String) Declaration public DfmXrefInlineToken(IMarkdownRule rule, IMarkdownContext context, string href, ImmutableArray<IMarkdownToken> content, string title, bool throwIfNotResolved, string rawMarkdown) Parameters Type Name Description IMarkdownRule rule IMarkdownContext context String href System.Collections.Immutable.ImmutableArray < IMarkdownToken > content String title Boolean throwIfNotResolved String rawMarkdown Properties Content Declaration public ImmutableArray<IMarkdownToken> Content { get; } Proverty Value Type Description System.Collections.Immutable.ImmutableArray < IMarkdownToken > Context Declaration public IMarkdownContext Context { get; } Proverty Value Type Description IMarkdownContext Href Declaration public string Href { get; } Proverty Value Type Description String RawMarkdown Declaration public string RawMarkdown { get; set; } Proverty Value Type Description String Rule Declaration public IMarkdownRule Rule { get; } Proverty Value Type Description IMarkdownRule ThrowIfNotResolved Declaration public bool ThrowIfNotResolved { get; } Proverty Value Type Description Boolean Title Declaration public string Title { get; } Proverty Value Type Description String Methods Rewrite(IMarkdownRewriteEngine) Declaration public DfmXrefInlineToken Rewrite(IMarkdownRewriteEngine rewriteEngine) Parameters Type Name Description IMarkdownRewriteEngine rewriteEngine Returns Type Description DfmXrefInlineToken"
  },
  "api/Microsoft.DocAsCode.Dfm.DfmXrefAutoLinkInlineRule.html": {
    "href": "api/Microsoft.DocAsCode.Dfm.DfmXrefAutoLinkInlineRule.html",
    "title": "Class DfmXrefAutoLinkInlineRule\r\n   | DocFX website ",
    "keywords": "Class DfmXrefAutoLinkInlineRule Xref auto link syntax: <xref:uid> <xref:\"uid with space\"> Inheritance Object DfmXrefAutoLinkInlineRule Namespace :Microsoft.DocAsCode.Dfm Assembly :Microsoft.DocAsCode.Dfm.dll Syntax public class DfmXrefAutoLinkInlineRule : IMarkdownRule Fields XrefAutoLinkRegexString Declaration public static readonly string XrefAutoLinkRegexString XrefAutoLinkRegexWithQuoteString Declaration public static readonly string XrefAutoLinkRegexWithQuoteString Properties Name Declaration public string Name { get; } Proverty Value Type Description String Methods TryMatch(IMarkdownParser, ref String) Declaration public IMarkdownToken TryMatch(IMarkdownParser engine, ref string source) Parameters Type Name Description IMarkdownParser engine String source Returns Type Description IMarkdownToken"
  },
  "api/Microsoft.DocAsCode.Dfm.DfmTextInlineRule.html": {
    "href": "api/Microsoft.DocAsCode.Dfm.DfmTextInlineRule.html",
    "title": "Class DfmTextInlineRule\r\n   | DocFX website ",
    "keywords": "Class DfmTextInlineRule Inheritance Object MarkdownTextInlineRule DfmTextInlineRule Namespace :Microsoft.DocAsCode.Dfm Assembly :Microsoft.DocAsCode.Dfm.dll Syntax public class DfmTextInlineRule : MarkdownTextInlineRule, IMarkdownRule Properties Text Override the one in MarkdownLite, difference is: If there is a @ following . , , , ; , : , ! , ? or whitespace, exclude it as it is a xref Declaration public override Regex Text { get; } Proverty Value Type Description Regex"
  },
  "api/Microsoft.DocAsCode.Dfm.DfmSectionBlockToken.html": {
    "href": "api/Microsoft.DocAsCode.Dfm.DfmSectionBlockToken.html",
    "title": "Class DfmSectionBlockToken\r\n   | DocFX website ",
    "keywords": "Class DfmSectionBlockToken Inheritance Object DfmSectionBlockToken Namespace :Microsoft.DocAsCode.Dfm Assembly :Microsoft.DocAsCode.Dfm.dll Syntax public class DfmSectionBlockToken : IMarkdownToken Constructors DfmSectionBlockToken(IMarkdownRule, IMarkdownContext, String, String) Declaration public DfmSectionBlockToken(IMarkdownRule rule, IMarkdownContext context, string attributes, string rawMarkdown) Parameters Type Name Description IMarkdownRule rule IMarkdownContext context String attributes String rawMarkdown Properties Attributes Declaration public string Attributes { get; } Proverty Value Type Description String Context Declaration public IMarkdownContext Context { get; } Proverty Value Type Description IMarkdownContext RawMarkdown Declaration public string RawMarkdown { get; set; } Proverty Value Type Description String Rule Declaration public IMarkdownRule Rule { get; } Proverty Value Type Description IMarkdownRule"
  },
  "api/Microsoft.DocAsCode.Dfm.DfmSectionBlockRule.html": {
    "href": "api/Microsoft.DocAsCode.Dfm.DfmSectionBlockRule.html",
    "title": "Class DfmSectionBlockRule\r\n   | DocFX website ",
    "keywords": "Class DfmSectionBlockRule Inheritance Object DfmSectionBlockRule Namespace :Microsoft.DocAsCode.Dfm Assembly :Microsoft.DocAsCode.Dfm.dll Syntax public class DfmSectionBlockRule : IMarkdownRule Fields _sectionRegex Declaration public static readonly Regex _sectionRegex Properties Name Declaration public string Name { get; } Proverty Value Type Description String Methods TryMatch(IMarkdownParser, ref String) Declaration public virtual IMarkdownToken TryMatch(IMarkdownParser engine, ref string source) Parameters Type Name Description IMarkdownParser engine String source Returns Type Description IMarkdownToken"
  },
  "api/Microsoft.DocAsCode.Dfm.DfmRenderer.html": {
    "href": "api/Microsoft.DocAsCode.Dfm.DfmRenderer.html",
    "title": "Class DfmRenderer\r\n   | DocFX website ",
    "keywords": "Class DfmRenderer Inheritance Object HtmlRenderer DfmRenderer Namespace :Microsoft.DocAsCode.Dfm Assembly :Microsoft.DocAsCode.Dfm.dll Syntax public class DfmRenderer : HtmlRenderer Methods Render(IMarkdownRenderer, DfmFencesBlockToken, MarkdownBlockContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer renderer, DfmFencesBlockToken token, MarkdownBlockContext context) Parameters Type Name Description IMarkdownRenderer renderer DfmFencesBlockToken token MarkdownBlockContext context Returns Type Description StringBuffer Render(IMarkdownRenderer, DfmIncludeBlockToken, MarkdownBlockContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer renderer, DfmIncludeBlockToken token, MarkdownBlockContext context) Parameters Type Name Description IMarkdownRenderer renderer DfmIncludeBlockToken token MarkdownBlockContext context Returns Type Description StringBuffer Render(IMarkdownRenderer, DfmIncludeInlineToken, MarkdownInlineContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer renderer, DfmIncludeInlineToken token, MarkdownInlineContext context) Parameters Type Name Description IMarkdownRenderer renderer DfmIncludeInlineToken token MarkdownInlineContext context Returns Type Description StringBuffer Render(IMarkdownRenderer, DfmNoteBlockToken, MarkdownBlockContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer engine, DfmNoteBlockToken token, MarkdownBlockContext context) Parameters Type Name Description IMarkdownRenderer engine DfmNoteBlockToken token MarkdownBlockContext context Returns Type Description StringBuffer Render(IMarkdownRenderer, DfmXrefInlineToken, MarkdownInlineContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer renderer, DfmXrefInlineToken token, MarkdownInlineContext context) Parameters Type Name Description IMarkdownRenderer renderer DfmXrefInlineToken token MarkdownInlineContext context Returns Type Description StringBuffer Render(IMarkdownRenderer, DfmYamlHeaderBlockToken, MarkdownBlockContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer renderer, DfmYamlHeaderBlockToken token, MarkdownBlockContext context) Parameters Type Name Description IMarkdownRenderer renderer DfmYamlHeaderBlockToken token MarkdownBlockContext context Returns Type Description StringBuffer Render(IMarkdownRenderer, MarkdownBlockquoteBlockToken, MarkdownBlockContext) Declaration public override StringBuffer Render(IMarkdownRenderer renderer, MarkdownBlockquoteBlockToken token, MarkdownBlockContext context) Parameters Type Name Description IMarkdownRenderer renderer MarkdownBlockquoteBlockToken token MarkdownBlockContext context Returns Type Description StringBuffer"
  },
  "api/Microsoft.DocAsCode.Dfm.DfmParagraphBlockRule.html": {
    "href": "api/Microsoft.DocAsCode.Dfm.DfmParagraphBlockRule.html",
    "title": "Class DfmParagraphBlockRule\r\n   | DocFX website ",
    "keywords": "Class DfmParagraphBlockRule Inheritance Object MarkdownParagraphBlockRule GfmParagraphBlockRule DfmParagraphBlockRule Namespace :Microsoft.DocAsCode.Dfm Assembly :Microsoft.DocAsCode.Dfm.dll Syntax public class DfmParagraphBlockRule : GfmParagraphBlockRule, IMarkdownRule Fields _paragraph Declaration public static readonly Regex _paragraph Properties Paragraph Declaration public override Regex Paragraph { get; } Proverty Value Type Description Regex"
  },
  "api/Microsoft.DocAsCode.Dfm.DfmNoteBlockToken.html": {
    "href": "api/Microsoft.DocAsCode.Dfm.DfmNoteBlockToken.html",
    "title": "Class DfmNoteBlockToken\r\n   | DocFX website ",
    "keywords": "Class DfmNoteBlockToken Inheritance Object DfmNoteBlockToken Namespace :Microsoft.DocAsCode.Dfm Assembly :Microsoft.DocAsCode.Dfm.dll Syntax public class DfmNoteBlockToken : IMarkdownToken Constructors DfmNoteBlockToken(IMarkdownRule, IMarkdownContext, String, String, String) Declaration public DfmNoteBlockToken(IMarkdownRule rule, IMarkdownContext context, string noteType, string content, string rawMarkdown) Parameters Type Name Description IMarkdownRule rule IMarkdownContext context String noteType String content String rawMarkdown Properties Content Declaration public string Content { get; } Proverty Value Type Description String Context Declaration public IMarkdownContext Context { get; } Proverty Value Type Description IMarkdownContext NoteType Declaration public string NoteType { get; } Proverty Value Type Description String RawMarkdown Declaration public string RawMarkdown { get; set; } Proverty Value Type Description String Rule Declaration public IMarkdownRule Rule { get; } Proverty Value Type Description IMarkdownRule"
  },
  "api/Microsoft.DocAsCode.Dfm.DfmNoteBlockRule.html": {
    "href": "api/Microsoft.DocAsCode.Dfm.DfmNoteBlockRule.html",
    "title": "Class DfmNoteBlockRule\r\n   | DocFX website ",
    "keywords": "Class DfmNoteBlockRule Inheritance Object DfmNoteBlockRule Namespace :Microsoft.DocAsCode.Dfm Assembly :Microsoft.DocAsCode.Dfm.dll Syntax public class DfmNoteBlockRule : IMarkdownRule Properties DfmNoteRegex Declaration public virtual Regex DfmNoteRegex { get; } Proverty Value Type Description Regex Name Declaration public virtual string Name { get; } Proverty Value Type Description String Methods TryMatch(IMarkdownParser, ref String) Declaration public virtual IMarkdownToken TryMatch(IMarkdownParser engine, ref string source) Parameters Type Name Description IMarkdownParser engine String source Returns Type Description IMarkdownToken"
  },
  "api/Microsoft.DocAsCode.Dfm.DfmMarkdownRenderer.html": {
    "href": "api/Microsoft.DocAsCode.Dfm.DfmMarkdownRenderer.html",
    "title": "Class DfmMarkdownRenderer\r\n   | DocFX website ",
    "keywords": "Class DfmMarkdownRenderer Inheritance Object MarkdownRenderer DfmMarkdownRenderer Namespace :Microsoft.DocAsCode.Dfm Assembly :Microsoft.DocAsCode.Dfm.dll Syntax public class DfmMarkdownRenderer : MarkdownRenderer Methods Render(IMarkdownRenderer, DfmIncludeBlockToken, MarkdownBlockContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer render, DfmIncludeBlockToken token, MarkdownBlockContext context) Parameters Type Name Description IMarkdownRenderer render DfmIncludeBlockToken token MarkdownBlockContext context Returns Type Description StringBuffer Render(IMarkdownRenderer, DfmIncludeInlineToken, MarkdownInlineContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer render, DfmIncludeInlineToken token, MarkdownInlineContext context) Parameters Type Name Description IMarkdownRenderer render DfmIncludeInlineToken token MarkdownInlineContext context Returns Type Description StringBuffer Render(IMarkdownRenderer, DfmNoteBlockToken, MarkdownBlockContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer render, DfmNoteBlockToken token, MarkdownBlockContext context) Parameters Type Name Description IMarkdownRenderer render DfmNoteBlockToken token MarkdownBlockContext context Returns Type Description StringBuffer Render(IMarkdownRenderer, DfmSectionBlockToken, MarkdownBlockContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer render, DfmSectionBlockToken token, MarkdownBlockContext context) Parameters Type Name Description IMarkdownRenderer render DfmSectionBlockToken token MarkdownBlockContext context Returns Type Description StringBuffer Render(IMarkdownRenderer, DfmYamlHeaderBlockToken, MarkdownBlockContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer render, DfmYamlHeaderBlockToken token, MarkdownBlockContext context) Parameters Type Name Description IMarkdownRenderer render DfmYamlHeaderBlockToken token MarkdownBlockContext context Returns Type Description StringBuffer"
  },
  "api/Microsoft.DocAsCode.Dfm.DfmIncludeInlineToken.html": {
    "href": "api/Microsoft.DocAsCode.Dfm.DfmIncludeInlineToken.html",
    "title": "Class DfmIncludeInlineToken\r\n   | DocFX website ",
    "keywords": "Class DfmIncludeInlineToken Inheritance Object DfmIncludeInlineToken Namespace :Microsoft.DocAsCode.Dfm Assembly :Microsoft.DocAsCode.Dfm.dll Syntax public class DfmIncludeInlineToken : IMarkdownToken Constructors DfmIncludeInlineToken(IMarkdownRule, IMarkdownContext, String, String, String, String, String) Declaration public DfmIncludeInlineToken(IMarkdownRule rule, IMarkdownContext context, string src, string name, string title, string raw, string rawMarkdown) Parameters Type Name Description IMarkdownRule rule IMarkdownContext context String src String name String title String raw String rawMarkdown Properties Context Declaration public IMarkdownContext Context { get; } Proverty Value Type Description IMarkdownContext Name Declaration public string Name { get; } Proverty Value Type Description String Raw Declaration public string Raw { get; } Proverty Value Type Description String RawMarkdown Declaration public string RawMarkdown { get; set; } Proverty Value Type Description String Rule Declaration public IMarkdownRule Rule { get; } Proverty Value Type Description IMarkdownRule Src Declaration public string Src { get; } Proverty Value Type Description String Title Declaration public string Title { get; } Proverty Value Type Description String"
  },
  "api/Microsoft.DocAsCode.Dfm.DfmIncludeInlineRule.html": {
    "href": "api/Microsoft.DocAsCode.Dfm.DfmIncludeInlineRule.html",
    "title": "Class DfmIncludeInlineRule\r\n   | DocFX website ",
    "keywords": "Class DfmIncludeInlineRule Inheritance Object DfmIncludeInlineRule Namespace :Microsoft.DocAsCode.Dfm Assembly :Microsoft.DocAsCode.Dfm.dll Syntax public class DfmIncludeInlineRule : IMarkdownRule Properties Include Declaration public virtual Regex Include { get; } Proverty Value Type Description Regex Name Declaration public virtual string Name { get; } Proverty Value Type Description String Methods TryMatch(IMarkdownParser, ref String) Declaration public IMarkdownToken TryMatch(IMarkdownParser engine, ref string source) Parameters Type Name Description IMarkdownParser engine String source Returns Type Description IMarkdownToken"
  },
  "api/Microsoft.DocAsCode.Dfm.DfmIncludeBlockToken.html": {
    "href": "api/Microsoft.DocAsCode.Dfm.DfmIncludeBlockToken.html",
    "title": "Class DfmIncludeBlockToken\r\n   | DocFX website ",
    "keywords": "Class DfmIncludeBlockToken Inheritance Object DfmIncludeBlockToken Namespace :Microsoft.DocAsCode.Dfm Assembly :Microsoft.DocAsCode.Dfm.dll Syntax public class DfmIncludeBlockToken : IMarkdownToken Constructors DfmIncludeBlockToken(IMarkdownRule, IMarkdownContext, String, String, String, String, String) Declaration public DfmIncludeBlockToken(IMarkdownRule rule, IMarkdownContext context, string src, string name, string title, string raw, string rawMarkdown) Parameters Type Name Description IMarkdownRule rule IMarkdownContext context String src String name String title String raw String rawMarkdown Properties Context Declaration public IMarkdownContext Context { get; } Proverty Value Type Description IMarkdownContext Name Declaration public string Name { get; } Proverty Value Type Description String Raw Declaration public string Raw { get; } Proverty Value Type Description String RawMarkdown Declaration public string RawMarkdown { get; set; } Proverty Value Type Description String Rule Declaration public IMarkdownRule Rule { get; } Proverty Value Type Description IMarkdownRule Src Declaration public string Src { get; } Proverty Value Type Description String Title Declaration public string Title { get; } Proverty Value Type Description String"
  },
  "api/Microsoft.DocAsCode.Dfm.DfmIncludeBlockRule.html": {
    "href": "api/Microsoft.DocAsCode.Dfm.DfmIncludeBlockRule.html",
    "title": "Class DfmIncludeBlockRule\r\n   | DocFX website ",
    "keywords": "Class DfmIncludeBlockRule Inheritance Object DfmIncludeBlockRule Namespace :Microsoft.DocAsCode.Dfm Assembly :Microsoft.DocAsCode.Dfm.dll Syntax public class DfmIncludeBlockRule : IMarkdownRule Properties Include Declaration public virtual Regex Include { get; } Proverty Value Type Description Regex Name Declaration public virtual string Name { get; } Proverty Value Type Description String Methods TryMatch(IMarkdownParser, ref String) Declaration public IMarkdownToken TryMatch(IMarkdownParser engine, ref string source) Parameters Type Name Description IMarkdownParser engine String source Returns Type Description IMarkdownToken"
  },
  "api/Microsoft.DocAsCode.Dfm.DfmFencesBlockToken.html": {
    "href": "api/Microsoft.DocAsCode.Dfm.DfmFencesBlockToken.html",
    "title": "Class DfmFencesBlockToken\r\n   | DocFX website ",
    "keywords": "Class DfmFencesBlockToken Inheritance Object DfmFencesBlockToken Namespace :Microsoft.DocAsCode.Dfm Assembly :Microsoft.DocAsCode.Dfm.dll Syntax public class DfmFencesBlockToken : IMarkdownToken Constructors DfmFencesBlockToken(IMarkdownRule, IMarkdownContext, String, String, String, String, String, DfmFencesBlockPathQueryOption) Declaration public DfmFencesBlockToken(IMarkdownRule rule, IMarkdownContext context, string name, string path, string rawMarkdown, string lang = null, string title = null, DfmFencesBlockPathQueryOption pathQueryOption = null) Parameters Type Name Description IMarkdownRule rule IMarkdownContext context String name String path String rawMarkdown String lang String title DfmFencesBlockPathQueryOption pathQueryOption Properties Context Declaration public IMarkdownContext Context { get; } Proverty Value Type Description IMarkdownContext Lang Declaration public string Lang { get; } Proverty Value Type Description String Name Declaration public string Name { get; } Proverty Value Type Description String Path Declaration public string Path { get; } Proverty Value Type Description String PathQueryOption Declaration public DfmFencesBlockPathQueryOption PathQueryOption { get; } Proverty Value Type Description DfmFencesBlockPathQueryOption RawMarkdown Declaration public string RawMarkdown { get; set; } Proverty Value Type Description String Rule Declaration public IMarkdownRule Rule { get; } Proverty Value Type Description IMarkdownRule Title Declaration public string Title { get; } Proverty Value Type Description String"
  },
  "api/Microsoft.DocAsCode.Dfm.DfmFencesBlockRule.html": {
    "href": "api/Microsoft.DocAsCode.Dfm.DfmFencesBlockRule.html",
    "title": "Class DfmFencesBlockRule\r\n   | DocFX website ",
    "keywords": "Class DfmFencesBlockRule Inheritance Object DfmFencesBlockRule Namespace :Microsoft.DocAsCode.Dfm Assembly :Microsoft.DocAsCode.Dfm.dll Syntax public class DfmFencesBlockRule : IMarkdownRule Fields _dfmFencesRegex Declaration public static readonly Regex _dfmFencesRegex _dfmFencesSharpQueryStringRegex Declaration public static readonly Regex _dfmFencesSharpQueryStringRegex Properties Name Declaration public string Name { get; } Proverty Value Type Description String Methods TryMatch(IMarkdownParser, ref String) Declaration public virtual IMarkdownToken TryMatch(IMarkdownParser engine, ref string source) Parameters Type Name Description IMarkdownParser engine String source Returns Type Description IMarkdownToken"
  },
  "api/Microsoft.DocAsCode.Dfm.DfmFencesBlockPathQueryOption.html": {
    "href": "api/Microsoft.DocAsCode.Dfm.DfmFencesBlockPathQueryOption.html",
    "title": "Class DfmFencesBlockPathQueryOption\r\n   | DocFX website ",
    "keywords": "Class DfmFencesBlockPathQueryOption Inheritance Object DfmFencesBlockPathQueryOption Namespace :Microsoft.DocAsCode.Dfm Assembly :Microsoft.DocAsCode.Dfm.dll Syntax public class DfmFencesBlockPathQueryOption Properties EndLine Declaration public int ? EndLine { get; set; } Proverty Value Type Description System.Nullable < Int32 > StartLine Declaration public int ? StartLine { get; set; } Proverty Value Type Description System.Nullable < Int32 > TagName Declaration public string TagName { get; set; } Proverty Value Type Description String"
  },
  "api/Microsoft.DocAsCode.Dfm.DfmEngineBuilder.html": {
    "href": "api/Microsoft.DocAsCode.Dfm.DfmEngineBuilder.html",
    "title": "Class DfmEngineBuilder\r\n   | DocFX website ",
    "keywords": "Class DfmEngineBuilder Inheritance Object MarkdownEngineBuilder GfmEngineBuilder DfmEngineBuilder Namespace :Microsoft.DocAsCode.Dfm Assembly :Microsoft.DocAsCode.Dfm.dll Syntax public class DfmEngineBuilder : GfmEngineBuilder Constructors DfmEngineBuilder(Options, String) Declaration public DfmEngineBuilder(Options options, string baseDir = null) Parameters Type Name Description Options options String baseDir Methods CreateDfmEngine(Object) Declaration public DfmEngine CreateDfmEngine(object renderer) Parameters Type Name Description Object renderer Returns Type Description DfmEngine CreateEngine(Object) Declaration public override IMarkdownEngine CreateEngine(object renderer) Parameters Type Name Description Object renderer Returns Type Description IMarkdownEngine"
  },
  "api/Microsoft.DocAsCode.Dfm.DfmEngine.html": {
    "href": "api/Microsoft.DocAsCode.Dfm.DfmEngine.html",
    "title": "Class DfmEngine\r\n   | DocFX website ",
    "keywords": "Class DfmEngine Inheritance Object MarkdownEngine DfmEngine Namespace :Microsoft.DocAsCode.Dfm Assembly :Microsoft.DocAsCode.Dfm.dll Syntax public class DfmEngine : MarkdownEngine, IMarkdownEngine Constructors DfmEngine(IMarkdownContext, IMarkdownTokenRewriter, Object, Options) Declaration public DfmEngine(IMarkdownContext context, IMarkdownTokenRewriter rewriter, object renderer, Options options) Parameters Type Name Description IMarkdownContext context IMarkdownTokenRewriter rewriter Object renderer Options options Methods Markup(String, String) Declaration public string Markup(string src, string path) Parameters Type Name Description String src String path Returns Type Description String"
  },
  "api/Microsoft.DocAsCode.Dfm.DfmEmailInlineRule.html": {
    "href": "api/Microsoft.DocAsCode.Dfm.DfmEmailInlineRule.html",
    "title": "Class DfmEmailInlineRule\r\n   | DocFX website ",
    "keywords": "Class DfmEmailInlineRule Inheritance Object DfmEmailInlineRule Namespace :Microsoft.DocAsCode.Dfm Assembly :Microsoft.DocAsCode.Dfm.dll Syntax public class DfmEmailInlineRule : IMarkdownRule Properties Name Declaration public string Name { get; } Proverty Value Type Description String Xref Declaration public virtual Regex Xref { get; } Proverty Value Type Description Regex Methods TryMatch(IMarkdownParser, ref String) Declaration public IMarkdownToken TryMatch(IMarkdownParser engine, ref string source) Parameters Type Name Description IMarkdownParser engine String source Returns Type Description IMarkdownToken"
  },
  "api/Microsoft.DocAsCode.Dfm.DfmContextExtensions.html": {
    "href": "api/Microsoft.DocAsCode.Dfm.DfmContextExtensions.html",
    "title": "Class DfmContextExtensions\r\n   | DocFX website ",
    "keywords": "Class DfmContextExtensions Inheritance Object DfmContextExtensions Namespace :Microsoft.DocAsCode.Dfm Assembly :Microsoft.DocAsCode.Dfm.dll Syntax public class DfmContextExtensions Methods GetFilePathStack(IMarkdownContext) Declaration public static ImmutableStack<string> GetFilePathStack(IMarkdownContext context) Parameters Type Name Description IMarkdownContext context Returns Type Description System.Collections.Immutable.ImmutableStack < String > SetFilePathStack(IMarkdownContext, ImmutableStack<String>) Declaration public static IMarkdownContext SetFilePathStack(IMarkdownContext context, ImmutableStack<string> filePathStack) Parameters Type Name Description IMarkdownContext context System.Collections.Immutable.ImmutableStack < String > filePathStack Returns Type Description IMarkdownContext"
  },
  "api/Microsoft.DocAsCode.Dfm.DfmBlockquoteBlockRule.html": {
    "href": "api/Microsoft.DocAsCode.Dfm.DfmBlockquoteBlockRule.html",
    "title": "Class DfmBlockquoteBlockRule\r\n   | DocFX website ",
    "keywords": "Class DfmBlockquoteBlockRule Inheritance Object MarkdownBlockquoteBlockRule DfmBlockquoteBlockRule Namespace :Microsoft.DocAsCode.Dfm Assembly :Microsoft.DocAsCode.Dfm.dll Syntax public class DfmBlockquoteBlockRule : MarkdownBlockquoteBlockRule, IMarkdownRule Properties Name Declaration public override string Name { get; } Proverty Value Type Description String Methods TryMatch(IMarkdownParser, ref String) Declaration public override IMarkdownToken TryMatch(IMarkdownParser engine, ref string source) Parameters Type Name Description IMarkdownParser engine String source Returns Type Description IMarkdownToken"
  },
  "api/Microsoft.DocAsCode.CustomAssemblyTextAttribute.html": {
    "href": "api/Microsoft.DocAsCode.CustomAssemblyTextAttribute.html",
    "title": "Class CustomAssemblyTextAttribute\r\n   | DocFX website ",
    "keywords": "Class CustomAssemblyTextAttribute Inheritance Object Attribute CustomAssemblyTextAttribute Namespace :Microsoft.DocAsCode Assembly :docfx.dll Syntax public abstract class CustomAssemblyTextAttribute : Attribute, _Attribute Constructors CustomAssemblyTextAttribute(String[]) Declaration public CustomAssemblyTextAttribute(params string[] lines) Parameters Type Name Description String [] lines Properties Value Declaration public string Value { get; } Proverty Value Type Description String"
  },
  "api/Microsoft.DocAsCode.Common.html": {
    "href": "api/Microsoft.DocAsCode.Common.html",
    "title": "Namespace Microsoft.DocAsCode.Common\r\n   | DocFX website ",
    "keywords": "Namespace Microsoft.DocAsCode.Common Classes ConsoleLogListener ConsoleUtility CrossAppDomainListener JsonUtility Logger LoggerFileScope LoggerPhaseScope PerformanceScope ReplayLogListener Replay log on flushing. ReportLogListener ReportLogListener.ReportItem ResourceLease <T> ResourcePool ResourcePoolAsyncManager <TResource> ResourcePoolManager <TResource> YamlUtility Interfaces ILoggerListener ILogItem Enums LogLevel ReportLogListener.MessageSeverity"
  },
  "api/Microsoft.DocAsCode.Common.YamlUtility.html": {
    "href": "api/Microsoft.DocAsCode.Common.YamlUtility.html",
    "title": "Class YamlUtility\r\n   | DocFX website ",
    "keywords": "Class YamlUtility Expresses static methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited. To browse the .NET Framework source code for this type, see the Reference Source Refer to ProjectLevelCache to see what to do with Files Inheritance Object YamlUtility Namespace :Microsoft.DocAsCode.Common Assembly :Microsoft.DocAsCode.Common.dll Syntax public class YamlUtility Remarks THIS is remarks overriden in MARKDWON file Methods Deserialize<T>(TextReader) Declaration public static T Deserialize<T>(TextReader reader) Parameters Type Name Description TextReader reader Returns Type Description T Deserialize<T>(String) Declaration public static T Deserialize<T>(string path) Parameters Type Name Description String path Returns Type Description T Serialize(TextWriter, Object) Declaration public static void Serialize(TextWriter writer, object graph) Parameters Type Name Description TextWriter writer Object graph Serialize(String, Object) Declaration public static void Serialize(string path, object graph) Parameters Type Name Description String path Object graph"
  },
  "api/Microsoft.DocAsCode.Common.ResourcePoolManager`1.html": {
    "href": "api/Microsoft.DocAsCode.Common.ResourcePoolManager`1.html",
    "title": "Class ResourcePoolManager&lt;TResource&gt;\r\n   | DocFX website ",
    "keywords": "Class ResourcePoolManager<TResource> Inheritance Object ResourcePoolManager<TResource> Namespace :Microsoft.DocAsCode.Common Assembly :Microsoft.DocAsCode.Utility.dll Syntax public class ResourcePoolManager<TResource> : IDisposable where TResource : class Constructors ResourcePoolManager(Func<TResource>, Int32) Declaration public ResourcePoolManager(Func<TResource> creator, int maxResourceCount) Parameters Type Name Description System.Func <TResource> creator Int32 maxResourceCount Methods Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Finalize() Declaration protected void Finalize() Rent() Declaration public ResourceLease<TResource> Rent() Returns Type Description ResourceLease <TResource>"
  },
  "api/Microsoft.DocAsCode.Common.ResourcePoolAsyncManager`1.html": {
    "href": "api/Microsoft.DocAsCode.Common.ResourcePoolAsyncManager`1.html",
    "title": "Class ResourcePoolAsyncManager&lt;TResource&gt;\r\n   | DocFX website ",
    "keywords": "Class ResourcePoolAsyncManager<TResource> Inheritance Object ResourcePoolAsyncManager<TResource> Namespace :Microsoft.DocAsCode.Common Assembly :Microsoft.DocAsCode.Utility.dll Syntax public class ResourcePoolAsyncManager<TResource> : IDisposable where TResource : class Constructors ResourcePoolAsyncManager(Func<Task<TResource>>, Int32) Declaration public ResourcePoolAsyncManager(Func<Task<TResource>> creator, int maxResourceCount) Parameters Type Name Description System.Func < System.Threading.Tasks.Task <TResource>> creator Int32 maxResourceCount Methods Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Finalize() Declaration protected void Finalize() RentAsync() Declaration public Task<ResourceLease<TResource>> RentAsync() Returns Type Description System.Threading.Tasks.Task < ResourceLease <TResource>>"
  },
  "api/Microsoft.DocAsCode.Common.ResourcePool.html": {
    "href": "api/Microsoft.DocAsCode.Common.ResourcePool.html",
    "title": "Class ResourcePool\r\n   | DocFX website ",
    "keywords": "Class ResourcePool Inheritance Object ResourcePool Namespace :Microsoft.DocAsCode.Common Assembly :Microsoft.DocAsCode.Utility.dll Syntax public class ResourcePool Methods Create<T>(Func<T>, Int32) Declaration public static ResourcePoolManager<T> Create<T>(Func<T> creator, int maxResourceCount)where T : class Parameters Type Name Description System.Func <T> creator Int32 maxResourceCount Returns Type Description ResourcePoolManager <T> Create<T>(Func<Task<T>>, Int32) Declaration public static ResourcePoolAsyncManager<T> Create<T>(Func<Task<T>> creator, int maxResourceCount)where T : class Parameters Type Name Description System.Func < System.Threading.Tasks.Task <T>> creator Int32 maxResourceCount Returns Type Description ResourcePoolAsyncManager <T>"
  },
  "api/Microsoft.DocAsCode.Common.ResourceLease`1.html": {
    "href": "api/Microsoft.DocAsCode.Common.ResourceLease`1.html",
    "title": "Class ResourceLease&lt;T&gt;\r\n   | DocFX website ",
    "keywords": "Class ResourceLease<T> Inheritance Object ResourceLease<T> Namespace :Microsoft.DocAsCode.Common Assembly :Microsoft.DocAsCode.Utility.dll Syntax public sealed class ResourceLease<T> : IDisposable where T : class Properties Resource Declaration public T Resource { get; } Proverty Value Type Description T Methods Dispose() Declaration public void Dispose()"
  },
  "api/Microsoft.DocAsCode.Common.ReportLogListener.html": {
    "href": "api/Microsoft.DocAsCode.Common.ReportLogListener.html",
    "title": "Class ReportLogListener\r\n   | DocFX website ",
    "keywords": "Class ReportLogListener Inheritance Object ReportLogListener Namespace :Microsoft.DocAsCode.Common Assembly :Microsoft.DocAsCode.Common.dll Syntax public sealed class ReportLogListener : ILoggerListener, IDisposable Constructors ReportLogListener(StreamWriter) Declaration public ReportLogListener(StreamWriter writer) Parameters Type Name Description StreamWriter writer ReportLogListener(String) Declaration public ReportLogListener(string reportPath) Parameters Type Name Description String reportPath Properties LogLevelThreshold Declaration public LogLevel LogLevelThreshold { get; set; } Proverty Value Type Description LogLevel Methods Dispose() Declaration public void Dispose() Flush() Declaration public void Flush() WriteLine(ILogItem) Declaration public void WriteLine(ILogItem item) Parameters Type Name Description ILogItem item"
  },
  "api/Microsoft.DocAsCode.Common.ReportLogListener.ReportItem.html": {
    "href": "api/Microsoft.DocAsCode.Common.ReportLogListener.ReportItem.html",
    "title": "Class ReportLogListener.ReportItem\r\n   | DocFX website ",
    "keywords": "Class ReportLogListener.ReportItem Inheritance Object ReportLogListener.ReportItem Namespace :Microsoft.DocAsCode.Common Assembly :Microsoft.DocAsCode.Common.dll Syntax public class ReportItem Properties DateTime Declaration [JsonProperty(\"date_time\")] public DateTime DateTime { get; set; } Proverty Value Type Description DateTime File Declaration [JsonProperty(\"file\")] public string File { get; set; } Proverty Value Type Description String Line Declaration [JsonProperty(\"line\")] public string Line { get; set; } Proverty Value Type Description String Message Declaration [JsonProperty(\"message\")] public string Message { get; set; } Proverty Value Type Description String Severity Declaration [JsonProperty(\"message_severity\")] public ReportLogListener.MessageSeverity Severity { get; set; } Proverty Value Type Description ReportLogListener.MessageSeverity Source Declaration [JsonProperty(\"source\")] public string Source { get; set; } Proverty Value Type Description String"
  },
  "api/Microsoft.DocAsCode.Common.ReportLogListener.MessageSeverity.html": {
    "href": "api/Microsoft.DocAsCode.Common.ReportLogListener.MessageSeverity.html",
    "title": "Enum ReportLogListener.MessageSeverity\r\n   | DocFX website ",
    "keywords": "Enum ReportLogListener.MessageSeverity Namespace :Microsoft.DocAsCode.Common Assembly :Microsoft.DocAsCode.Common.dll Syntax public enum MessageSeverity Fields Error Declaration Error = 0 Info Declaration Info = 2 Verbose Declaration Verbose = 3 Warning Declaration Warning = 1"
  },
  "api/Microsoft.DocAsCode.Common.ReplayLogListener.html": {
    "href": "api/Microsoft.DocAsCode.Common.ReplayLogListener.html",
    "title": "Class ReplayLogListener\r\n   | DocFX website ",
    "keywords": "Class ReplayLogListener Replay log on flushing. Inheritance Object ReplayLogListener Namespace :Microsoft.DocAsCode.Common Assembly :Microsoft.DocAsCode.Common.dll Syntax public class ReplayLogListener : ILoggerListener, IDisposable Constructors ReplayLogListener(LogLevel) Declaration public ReplayLogListener(LogLevel replayLevel = LogLevel.Warning) Parameters Type Name Description LogLevel replayLevel Properties LogLevelThreshold Declaration public LogLevel LogLevelThreshold { get; set; } Proverty Value Type Description LogLevel Replay Declaration public bool Replay { get; set; } Proverty Value Type Description Boolean Methods AddListener(ILoggerListener) Declaration public void AddListener(ILoggerListener listener) Parameters Type Name Description ILoggerListener listener Dispose() Declaration public void Dispose() Flush() Declaration public void Flush() WriteLine(ILogItem) Declaration public void WriteLine(ILogItem item) Parameters Type Name Description ILogItem item"
  },
  "api/Microsoft.DocAsCode.Common.PerformanceScope.html": {
    "href": "api/Microsoft.DocAsCode.Common.PerformanceScope.html",
    "title": "Class PerformanceScope\r\n   | DocFX website ",
    "keywords": "Class PerformanceScope Inheritance Object PerformanceScope Namespace :Microsoft.DocAsCode.Common Assembly :Microsoft.DocAsCode.Common.dll Syntax public sealed class PerformanceScope : IDisposable Constructors PerformanceScope(Action<TimeSpan>) Declaration public PerformanceScope(Action<TimeSpan> logger = null) Parameters Type Name Description System.Action < System.TimeSpan > logger PerformanceScope(String) Declaration public PerformanceScope(string content) Parameters Type Name Description String content PerformanceScope(String, LogLevel) Declaration public PerformanceScope(string content, LogLevel level) Parameters Type Name Description String content LogLevel level Methods Dispose() Declaration public void Dispose()"
  },
  "api/Microsoft.DocAsCode.Common.LogLevel.html": {
    "href": "api/Microsoft.DocAsCode.Common.LogLevel.html",
    "title": "Enum LogLevel\r\n   | DocFX website ",
    "keywords": "Enum LogLevel Namespace :Microsoft.DocAsCode.Common Assembly :Microsoft.DocAsCode.Common.dll Syntax public enum LogLevel Fields Error Declaration Error = 3 Info Declaration Info = 1 Verbose Declaration Verbose = 0 Warning Declaration Warning = 2"
  },
  "api/Microsoft.DocAsCode.Common.LoggerPhaseScope.html": {
    "href": "api/Microsoft.DocAsCode.Common.LoggerPhaseScope.html",
    "title": "Class LoggerPhaseScope\r\n   | DocFX website ",
    "keywords": "Class LoggerPhaseScope Inheritance Object LoggerPhaseScope Namespace :Microsoft.DocAsCode.Common Assembly :Microsoft.DocAsCode.Common.dll Syntax public sealed class LoggerPhaseScope : IDisposable Constructors LoggerPhaseScope(String) Declaration public LoggerPhaseScope(string phaseName) Parameters Type Name Description String phaseName Methods Dispose() Declaration public void Dispose()"
  },
  "api/Microsoft.DocAsCode.Common.LoggerFileScope.html": {
    "href": "api/Microsoft.DocAsCode.Common.LoggerFileScope.html",
    "title": "Class LoggerFileScope\r\n   | DocFX website ",
    "keywords": "Class LoggerFileScope Inheritance Object LoggerFileScope Namespace :Microsoft.DocAsCode.Common Assembly :Microsoft.DocAsCode.Common.dll Syntax public sealed class LoggerFileScope : IDisposable Constructors LoggerFileScope(String) Declaration public LoggerFileScope(string fileName) Parameters Type Name Description String fileName Methods Dispose() Declaration public void Dispose()"
  },
  "api/Microsoft.DocAsCode.Common.Logger.html": {
    "href": "api/Microsoft.DocAsCode.Common.Logger.html",
    "title": "Class Logger\r\n   | DocFX website ",
    "keywords": "Class Logger Inheritance Object Logger Namespace :Microsoft.DocAsCode.Common Assembly :Microsoft.DocAsCode.Common.dll Syntax public class Logger Fields LogLevelThreshold Declaration public static volatile LogLevel LogLevelThreshold Methods FindListener(Predicate<ILoggerListener>) Declaration public static ILoggerListener FindListener(Predicate<ILoggerListener> predicate) Parameters Type Name Description System.Predicate < ILoggerListener > predicate Returns Type Description ILoggerListener Flush() Declaration public static void Flush() Log(ILogItem) Declaration public static void Log(ILogItem result) Parameters Type Name Description ILogItem result Log(LogLevel, String, String, String, String) Declaration public static void Log(LogLevel level, string message, string phase = null, string file = null, string line = null) Parameters Type Name Description LogLevel level String message String phase String file String line Log(Object) Declaration public static void Log(object result) Parameters Type Name Description Object result LogError(String, String, String, String) Declaration public static void LogError(string message, string phase = null, string file = null, string line = null) Parameters Type Name Description String message String phase String file String line LogInfo(String, String, String, String) Declaration public static void LogInfo(string message, string phase = null, string file = null, string line = null) Parameters Type Name Description String message String phase String file String line LogVerbose(String, String, String, String) Declaration public static void LogVerbose(string message, string phase = null, string file = null, string line = null) Parameters Type Name Description String message String phase String file String line LogWarning(String, String, String, String) Declaration public static void LogWarning(string message, string phase = null, string file = null, string line = null) Parameters Type Name Description String message String phase String file String line RegisterListener(ILoggerListener) Declaration public static void RegisterListener(ILoggerListener listener) Parameters Type Name Description ILoggerListener listener UnregisterAllListeners() Declaration public static void UnregisterAllListeners() UnregisterListener(ILoggerListener) Declaration public static void UnregisterListener(ILoggerListener listener) Parameters Type Name Description ILoggerListener listener"
  },
  "api/Microsoft.DocAsCode.Common.JsonUtility.html": {
    "href": "api/Microsoft.DocAsCode.Common.JsonUtility.html",
    "title": "Class JsonUtility\r\n   | DocFX website ",
    "keywords": "Class JsonUtility Inheritance Object JsonUtility Namespace :Microsoft.DocAsCode.Common Assembly :Microsoft.DocAsCode.Common.dll Syntax public class JsonUtility Methods Deserialize<T>(TextReader, JsonSerializer) Declaration public static T Deserialize<T>(TextReader reader, JsonSerializer serializer = null) Parameters Type Name Description TextReader reader Newtonsoft.Json.JsonSerializer serializer Returns Type Description T Deserialize<T>(String, JsonSerializer) Declaration public static T Deserialize<T>(string path, JsonSerializer serializer = null) Parameters Type Name Description String path Newtonsoft.Json.JsonSerializer serializer Returns Type Description T FromJsonString<T>(String, JsonSerializer) Declaration public static T FromJsonString<T>(string json, JsonSerializer serializer = null) Parameters Type Name Description String json Newtonsoft.Json.JsonSerializer serializer Returns Type Description T Serialize(TextWriter, Object, Formatting, JsonSerializer) Declaration public static void Serialize(TextWriter writer, object graph, Formatting formatting = Formatting.None, JsonSerializer serializer = null) Parameters Type Name Description TextWriter writer Object graph Newtonsoft.Json.Formatting formatting Newtonsoft.Json.JsonSerializer serializer Serialize(Object, Formatting, JsonSerializer) Declaration public static string Serialize(object graph, Formatting formatting = Formatting.None, JsonSerializer serializer = null) Parameters Type Name Description Object graph Newtonsoft.Json.Formatting formatting Newtonsoft.Json.JsonSerializer serializer Returns Type Description String Serialize(String, Object, Formatting, JsonSerializer) Declaration public static void Serialize(string path, object graph, Formatting formatting = Formatting.None, JsonSerializer serializer = null) Parameters Type Name Description String path Object graph Newtonsoft.Json.Formatting formatting Newtonsoft.Json.JsonSerializer serializer ToJsonString(Object, Formatting, JsonSerializer) Declaration public static string ToJsonString(object graph, Formatting formatting = Formatting.None, JsonSerializer serializer = null) Parameters Type Name Description Object graph Newtonsoft.Json.Formatting formatting Newtonsoft.Json.JsonSerializer serializer Returns Type Description String"
  },
  "api/Microsoft.DocAsCode.Common.ILogItem.html": {
    "href": "api/Microsoft.DocAsCode.Common.ILogItem.html",
    "title": "Interface ILogItem\r\n   | DocFX website ",
    "keywords": "Interface ILogItem Namespace :Microsoft.DocAsCode.Common Assembly :Microsoft.DocAsCode.Common.dll Syntax public interface ILogItem Properties File Declaration string File { get; } Proverty Value Type Description String Line Declaration string Line { get; } Proverty Value Type Description String LogLevel Declaration LogLevel LogLevel { get; } Proverty Value Type Description LogLevel Message Declaration string Message { get; } Proverty Value Type Description String Phase Declaration string Phase { get; } Proverty Value Type Description String"
  },
  "api/Microsoft.DocAsCode.Common.ILoggerListener.html": {
    "href": "api/Microsoft.DocAsCode.Common.ILoggerListener.html",
    "title": "Interface ILoggerListener\r\n   | DocFX website ",
    "keywords": "Interface ILoggerListener Namespace :Microsoft.DocAsCode.Common Assembly :Microsoft.DocAsCode.Common.dll Syntax public interface ILoggerListener : IDisposable Properties LogLevelThreshold Declaration LogLevel LogLevelThreshold { get; set; } Proverty Value Type Description LogLevel Methods Flush() Declaration void Flush() WriteLine(ILogItem) Declaration void WriteLine(ILogItem item) Parameters Type Name Description ILogItem item"
  },
  "api/Microsoft.DocAsCode.Common.CrossAppDomainListener.html": {
    "href": "api/Microsoft.DocAsCode.Common.CrossAppDomainListener.html",
    "title": "Class CrossAppDomainListener\r\n   | DocFX website ",
    "keywords": "Class CrossAppDomainListener Inheritance Object MarshalByRefObject CrossAppDomainListener Namespace :Microsoft.DocAsCode.Common Assembly :Microsoft.DocAsCode.Common.dll Syntax public class CrossAppDomainListener : MarshalByRefObject, ILoggerListener, IDisposable Properties LogLevelThreshold Declaration public LogLevel LogLevelThreshold { get; set; } Proverty Value Type Description LogLevel Methods Dispose() Declaration public void Dispose() Flush() Declaration public void Flush() WriteLine(ILogItem) Declaration public void WriteLine(ILogItem item) Parameters Type Name Description ILogItem item"
  },
  "api/Microsoft.DocAsCode.Common.ConsoleUtility.html": {
    "href": "api/Microsoft.DocAsCode.Common.ConsoleUtility.html",
    "title": "Class ConsoleUtility\r\n   | DocFX website ",
    "keywords": "Class ConsoleUtility Inheritance Object ConsoleUtility Namespace :Microsoft.DocAsCode.Common Assembly :Microsoft.DocAsCode.Common.dll Syntax public class ConsoleUtility Methods WriteLine(String, ConsoleColor) Declaration public static void WriteLine(string message, ConsoleColor color) Parameters Type Name Description String message ConsoleColor color"
  },
  "api/Microsoft.DocAsCode.Common.ConsoleLogListener.html": {
    "href": "api/Microsoft.DocAsCode.Common.ConsoleLogListener.html",
    "title": "Class ConsoleLogListener\r\n   | DocFX website ",
    "keywords": "Class ConsoleLogListener Inheritance Object ConsoleLogListener Namespace :Microsoft.DocAsCode.Common Assembly :Microsoft.DocAsCode.Common.dll Syntax public sealed class ConsoleLogListener : ILoggerListener, IDisposable Properties LogLevelThreshold Declaration public LogLevel LogLevelThreshold { get; set; } Proverty Value Type Description LogLevel Methods Dispose() Declaration public void Dispose() Flush() Declaration public void Flush() WriteLine(ILogItem) Declaration public void WriteLine(ILogItem item) Parameters Type Name Description ILogItem item"
  },
  "api/Microsoft.DocAsCode.CascadableOptions.html": {
    "href": "api/Microsoft.DocAsCode.CascadableOptions.html",
    "title": "Class CascadableOptions\r\n   | DocFX website ",
    "keywords": "Class CascadableOptions Inheritance Object CascadableOptions Namespace :Microsoft.DocAsCode Assembly :docfx.dll Syntax public class CascadableOptions Properties ForceRebuild Declaration [Option('f', \"force\")] public bool ForceRebuild { get; set; } Proverty Value Type Description Boolean Log Declaration [Option('l', \"log\", HelpText = \"Specify the file name to save processing log\")] public string Log { get; set; } Proverty Value Type Description String LogLevel Declaration [Option(\"logLevel\", HelpText = \"Specify to which log level will be logged. By default log level >= Info will be logged. The acceptable value could be Verbose, Info, Warning, Error.\")] public LogLevel? LogLevel { get; set; } Proverty Value Type Description System.Nullable < LogLevel > Port Declaration [Option('p', \"port\", HelpText = \"Specify the port of the hosted website\")] public int ? Port { get; set; } Proverty Value Type Description System.Nullable < Int32 > PreserveRawInlineComments Declaration [Option(\"raw\", HelpText = \"Preserve the existing xml comment tags inside 'summary' triple slash comments\")] public bool PreserveRawInlineComments { get; set; } Proverty Value Type Description Boolean RootOutputFolder Declaration [Option('o', \"output\")] public string RootOutputFolder { get; set; } Proverty Value Type Description String Serve Declaration [Option('s', \"serve\", HelpText = \"Host the generated documentation to a website\")] public bool Serve { get; set; } Proverty Value Type Description Boolean Templates Declaration [OptionList('t', \"template\", Separator = ',', HelpText = \"Specifies the template name to apply to. If not specified, output YAML file will not be transformed.\")] public List<string> Templates { get; set; } Proverty Value Type Description System.Collections.Generic.List < String > Themes Declaration [OptionList(\"theme\", Separator = ',', HelpText = \"Specifies which theme to use. By default 'default' theme is offered.\")] public List<string> Themes { get; set; } Proverty Value Type Description System.Collections.Generic.List < String >"
  },
  "api/Microsoft.DocAsCode.BuildJsonConfig.html": {
    "href": "api/Microsoft.DocAsCode.BuildJsonConfig.html",
    "title": "Class BuildJsonConfig\r\n   | DocFX website ",
    "keywords": "Class BuildJsonConfig Inheritance Object BuildJsonConfig Namespace :Microsoft.DocAsCode Assembly :docfx.dll Syntax [Serializable] public class BuildJsonConfig Properties BaseDirectory Declaration [JsonIgnore] public string BaseDirectory { get; set; } Proverty Value Type Description String Content Declaration [JsonProperty(\"content\")] public FileMapping Content { get; set; } Proverty Value Type Description FileMapping Destination Declaration [JsonProperty(\"dest\")] public string Destination { get; set; } Proverty Value Type Description String DryRun Declaration [JsonProperty(\"dryRun\")] public bool ? DryRun { get; set; } Proverty Value Type Description System.Nullable < Boolean > ExportRawModel Declaration [JsonProperty(\"exportRawModel\")] public bool ? ExportRawModel { get; set; } Proverty Value Type Description System.Nullable < Boolean > ExportViewModel Declaration [JsonProperty(\"exportViewModel\")] public bool ? ExportViewModel { get; set; } Proverty Value Type Description System.Nullable < Boolean > ExternalReference Declaration [JsonProperty(\"externalReference\")] public FileMapping ExternalReference { get; set; } Proverty Value Type Description FileMapping FileMetadata Metadata that applies to some specific files. The key is the metadata name. For each item of the value: The key is the glob pattern to match the files. The value is the value of the metadata. Declaration [JsonProperty(\"fileMetadata\")] public Dictionary<string, FileMetadataPairs> FileMetadata { get; set; } Proverty Value Type Description System.Collections.Generic.Dictionary < String , FileMetadataPairs > Force Declaration [JsonProperty(\"force\")] public bool ? Force { get; set; } Proverty Value Type Description System.Nullable < Boolean > GlobalMetadata Declaration [JsonProperty(\"globalMetadata\")] [JsonConverter(typeof (JObjectDictionaryToObjectDictionaryConverter))] public Dictionary<string, object> GlobalMetadata { get; set; } Proverty Value Type Description System.Collections.Generic.Dictionary < String , Object > OutputFolder Declaration [JsonIgnore] public string OutputFolder { get; set; } Proverty Value Type Description String Overwrite Declaration [JsonProperty(\"overwrite\")] public FileMapping Overwrite { get; set; } Proverty Value Type Description FileMapping Port Declaration [JsonProperty(\"port\")] public string Port { get; set; } Proverty Value Type Description String RawModelOutputFolder Declaration [JsonProperty(\"rawModelOutputFolder\")] public string RawModelOutputFolder { get; set; } Proverty Value Type Description String Resource Declaration [JsonProperty(\"resource\")] public FileMapping Resource { get; set; } Proverty Value Type Description FileMapping Serve Declaration [JsonProperty(\"serve\")] public bool ? Serve { get; set; } Proverty Value Type Description System.Nullable < Boolean > Templates Declaration [JsonProperty(\"template\")] public ListWithStringFallback Templates { get; set; } Proverty Value Type Description ListWithStringFallback Themes Declaration [JsonProperty(\"theme\")] public ListWithStringFallback Themes { get; set; } Proverty Value Type Description ListWithStringFallback ViewModelOutputFolder Declaration [JsonProperty(\"viewModelOutputFolder\")] public string ViewModelOutputFolder { get; set; } Proverty Value Type Description String"
  },
  "api/Microsoft.DocAsCode.AzureMarkdownRewriters.html": {
    "href": "api/Microsoft.DocAsCode.AzureMarkdownRewriters.html",
    "title": "Namespace Microsoft.DocAsCode.AzureMarkdownRewriters\r\n   | DocFX website ",
    "keywords": "Namespace Microsoft.DocAsCode.AzureMarkdownRewriters Classes AzureBlockquoteBlockRule AzureBlockquoteBlockToken AzureEngineBuilder AzureFileInfo AzureHtmlMetadataBlockRule AzureHtmlMetadataBlockToken AzureIncludeBasicToken AzureIncludeBlockRule AzureIncludeBlockToken AzureIncludeInlineRule AzureIncludeInlineToken AzureMarkdownRenderer AzureMarked AzureNoteBlockRule AzureNoteBlockToken AzureParagraphBlockRule AzureSelectorBlockRule AzureSelectorBlockToken AzureVideoBlockRule AzureVideoBlockToken AzureVideoInfo"
  },
  "api/Microsoft.DocAsCode.AzureMarkdownRewriters.AzureVideoInfo.html": {
    "href": "api/Microsoft.DocAsCode.AzureMarkdownRewriters.AzureVideoInfo.html",
    "title": "Class AzureVideoInfo\r\n   | DocFX website ",
    "keywords": "Class AzureVideoInfo Inheritance Object AzureVideoInfo Namespace :Microsoft.DocAsCode.AzureMarkdownRewriters Assembly :Microsoft.DocAsCode.AzureMarkdownRewriters.dll Syntax public class AzureVideoInfo Properties Height Indicate the video height Declaration public int Height { get; set; } Proverty Value Type Description Int32 Id Indicate the azure video id Declaration public string Id { get; set; } Proverty Value Type Description String Link Indicate the azure video link Declaration public string Link { get; set; } Proverty Value Type Description String Width Indicate the video width Declaration public int Width { get; set; } Proverty Value Type Description Int32"
  },
  "api/Microsoft.DocAsCode.AzureMarkdownRewriters.AzureVideoBlockToken.html": {
    "href": "api/Microsoft.DocAsCode.AzureMarkdownRewriters.AzureVideoBlockToken.html",
    "title": "Class AzureVideoBlockToken\r\n   | DocFX website ",
    "keywords": "Class AzureVideoBlockToken Inheritance Object AzureVideoBlockToken Namespace :Microsoft.DocAsCode.AzureMarkdownRewriters Assembly :Microsoft.DocAsCode.AzureMarkdownRewriters.dll Syntax public class AzureVideoBlockToken : IMarkdownToken Constructors AzureVideoBlockToken(IMarkdownRule, IMarkdownContext, String, String) Declaration public AzureVideoBlockToken(IMarkdownRule rule, IMarkdownContext context, string videoId, string rawMarkdown) Parameters Type Name Description IMarkdownRule rule IMarkdownContext context String videoId String rawMarkdown Properties Context Declaration public IMarkdownContext Context { get; } Proverty Value Type Description IMarkdownContext RawMarkdown Declaration public string RawMarkdown { get; set; } Proverty Value Type Description String Rule Declaration public IMarkdownRule Rule { get; } Proverty Value Type Description IMarkdownRule VideoId Declaration public string VideoId { get; } Proverty Value Type Description String"
  },
  "api/Microsoft.DocAsCode.AzureMarkdownRewriters.AzureVideoBlockRule.html": {
    "href": "api/Microsoft.DocAsCode.AzureMarkdownRewriters.AzureVideoBlockRule.html",
    "title": "Class AzureVideoBlockRule\r\n   | DocFX website ",
    "keywords": "Class AzureVideoBlockRule Inheritance Object AzureVideoBlockRule Namespace :Microsoft.DocAsCode.AzureMarkdownRewriters Assembly :Microsoft.DocAsCode.AzureMarkdownRewriters.dll Syntax public class AzureVideoBlockRule : IMarkdownRule Properties AzureVideoRegex Declaration public virtual Regex AzureVideoRegex { get; } Proverty Value Type Description Regex Name Declaration public virtual string Name { get; } Proverty Value Type Description String Methods TryMatch(IMarkdownParser, ref String) Declaration public IMarkdownToken TryMatch(IMarkdownParser engine, ref string source) Parameters Type Name Description IMarkdownParser engine String source Returns Type Description IMarkdownToken"
  },
  "api/Microsoft.DocAsCode.AzureMarkdownRewriters.AzureSelectorBlockToken.html": {
    "href": "api/Microsoft.DocAsCode.AzureMarkdownRewriters.AzureSelectorBlockToken.html",
    "title": "Class AzureSelectorBlockToken\r\n   | DocFX website ",
    "keywords": "Class AzureSelectorBlockToken Inheritance Object AzureSelectorBlockToken Namespace :Microsoft.DocAsCode.AzureMarkdownRewriters Assembly :Microsoft.DocAsCode.AzureMarkdownRewriters.dll Syntax public class AzureSelectorBlockToken : IMarkdownToken Constructors AzureSelectorBlockToken(IMarkdownRule, IMarkdownContext, String, String, String) Declaration public AzureSelectorBlockToken(IMarkdownRule rule, IMarkdownContext context, string selectorType, string selectorConditions, string rawMarkdown) Parameters Type Name Description IMarkdownRule rule IMarkdownContext context String selectorType String selectorConditions String rawMarkdown Properties Context Declaration public IMarkdownContext Context { get; } Proverty Value Type Description IMarkdownContext RawMarkdown Declaration public string RawMarkdown { get; set; } Proverty Value Type Description String Rule Declaration public IMarkdownRule Rule { get; } Proverty Value Type Description IMarkdownRule SelectorConditions Declaration public string SelectorConditions { get; } Proverty Value Type Description String SelectorType Declaration public string SelectorType { get; } Proverty Value Type Description String"
  },
  "api/Microsoft.DocAsCode.AzureMarkdownRewriters.AzureSelectorBlockRule.html": {
    "href": "api/Microsoft.DocAsCode.AzureMarkdownRewriters.AzureSelectorBlockRule.html",
    "title": "Class AzureSelectorBlockRule\r\n   | DocFX website ",
    "keywords": "Class AzureSelectorBlockRule Inheritance Object AzureSelectorBlockRule Namespace :Microsoft.DocAsCode.AzureMarkdownRewriters Assembly :Microsoft.DocAsCode.AzureMarkdownRewriters.dll Syntax public class AzureSelectorBlockRule : IMarkdownRule Properties AzureNoteRegex Declaration public virtual Regex AzureNoteRegex { get; } Proverty Value Type Description Regex Name Declaration public virtual string Name { get; } Proverty Value Type Description String Methods TryMatch(IMarkdownParser, ref String) Declaration public virtual IMarkdownToken TryMatch(IMarkdownParser engine, ref string source) Parameters Type Name Description IMarkdownParser engine String source Returns Type Description IMarkdownToken"
  },
  "api/Microsoft.DocAsCode.AzureMarkdownRewriters.AzureParagraphBlockRule.html": {
    "href": "api/Microsoft.DocAsCode.AzureMarkdownRewriters.AzureParagraphBlockRule.html",
    "title": "Class AzureParagraphBlockRule\r\n   | DocFX website ",
    "keywords": "Class AzureParagraphBlockRule Inheritance Object MarkdownParagraphBlockRule GfmParagraphBlockRule AzureParagraphBlockRule Namespace :Microsoft.DocAsCode.AzureMarkdownRewriters Assembly :Microsoft.DocAsCode.AzureMarkdownRewriters.dll Syntax public class AzureParagraphBlockRule : GfmParagraphBlockRule, IMarkdownRule Properties Name Declaration public override string Name { get; } Proverty Value Type Description String Paragraph Declaration public override Regex Paragraph { get; } Proverty Value Type Description Regex"
  },
  "api/Microsoft.DocAsCode.AzureMarkdownRewriters.AzureNoteBlockToken.html": {
    "href": "api/Microsoft.DocAsCode.AzureMarkdownRewriters.AzureNoteBlockToken.html",
    "title": "Class AzureNoteBlockToken\r\n   | DocFX website ",
    "keywords": "Class AzureNoteBlockToken Inheritance Object MarkdownTextToken AzureNoteBlockToken Namespace :Microsoft.DocAsCode.AzureMarkdownRewriters Assembly :Microsoft.DocAsCode.AzureMarkdownRewriters.dll Syntax public class AzureNoteBlockToken : MarkdownTextToken, IMarkdownToken Constructors AzureNoteBlockToken(IMarkdownRule, IMarkdownContext, String, String, String) Declaration public AzureNoteBlockToken(IMarkdownRule rule, IMarkdownContext context, string noteType, string content, string rawMarkdown) Parameters Type Name Description IMarkdownRule rule IMarkdownContext context String noteType String content String rawMarkdown Properties NoteType Declaration public string NoteType { get; } Proverty Value Type Description String"
  },
  "api/Microsoft.DocAsCode.AzureMarkdownRewriters.AzureNoteBlockRule.html": {
    "href": "api/Microsoft.DocAsCode.AzureMarkdownRewriters.AzureNoteBlockRule.html",
    "title": "Class AzureNoteBlockRule\r\n   | DocFX website ",
    "keywords": "Class AzureNoteBlockRule Inheritance Object AzureNoteBlockRule Namespace :Microsoft.DocAsCode.AzureMarkdownRewriters Assembly :Microsoft.DocAsCode.AzureMarkdownRewriters.dll Syntax public class AzureNoteBlockRule : IMarkdownRule Properties AzureNoteRegex Declaration public virtual Regex AzureNoteRegex { get; } Proverty Value Type Description Regex Name Declaration public virtual string Name { get; } Proverty Value Type Description String Methods TryMatch(IMarkdownParser, ref String) Declaration public virtual IMarkdownToken TryMatch(IMarkdownParser engine, ref string source) Parameters Type Name Description IMarkdownParser engine String source Returns Type Description IMarkdownToken"
  },
  "api/Microsoft.DocAsCode.AzureMarkdownRewriters.AzureMarked.html": {
    "href": "api/Microsoft.DocAsCode.AzureMarkdownRewriters.AzureMarked.html",
    "title": "Class AzureMarked\r\n   | DocFX website ",
    "keywords": "Class AzureMarked Inheritance Object AzureMarked Namespace :Microsoft.DocAsCode.AzureMarkdownRewriters Assembly :Microsoft.DocAsCode.AzureMarkdownRewriters.dll Syntax public class AzureMarked Methods Markup(String, String, IReadOnlyDictionary<String, AzureFileInfo>, IReadOnlyDictionary<String, AzureVideoInfo>, IReadOnlyDictionary<String, AzureFileInfo>) Declaration public static string Markup(string src, string path = null, IReadOnlyDictionary<string, AzureFileInfo> azureMarkdownFileInfoMapping = null, IReadOnlyDictionary<string, AzureVideoInfo> azureVideoInfoMapping = null, IReadOnlyDictionary<string, AzureFileInfo> azureResourceFileInfoMapping = null) Parameters Type Name Description String src String path System.Collections.Generic.IReadOnlyDictionary < String , AzureFileInfo > azureMarkdownFileInfoMapping System.Collections.Generic.IReadOnlyDictionary < String , AzureVideoInfo > azureVideoInfoMapping System.Collections.Generic.IReadOnlyDictionary < String , AzureFileInfo > azureResourceFileInfoMapping Returns Type Description String"
  },
  "api/Microsoft.DocAsCode.AzureMarkdownRewriters.AzureMarkdownRenderer.html": {
    "href": "api/Microsoft.DocAsCode.AzureMarkdownRewriters.AzureMarkdownRenderer.html",
    "title": "Class AzureMarkdownRenderer\r\n   | DocFX website ",
    "keywords": "Class AzureMarkdownRenderer Inheritance Object MarkdownRenderer DfmMarkdownRenderer AzureMarkdownRenderer Namespace :Microsoft.DocAsCode.AzureMarkdownRewriters Assembly :Microsoft.DocAsCode.AzureMarkdownRewriters.dll Syntax public class AzureMarkdownRenderer : DfmMarkdownRenderer Methods Render(IMarkdownRenderer, AzureIncludeBlockToken, MarkdownBlockContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer render, AzureIncludeBlockToken token, MarkdownBlockContext context) Parameters Type Name Description IMarkdownRenderer render AzureIncludeBlockToken token MarkdownBlockContext context Returns Type Description StringBuffer Render(IMarkdownRenderer, AzureIncludeInlineToken, MarkdownInlineContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer render, AzureIncludeInlineToken token, MarkdownInlineContext context) Parameters Type Name Description IMarkdownRenderer render AzureIncludeInlineToken token MarkdownInlineContext context Returns Type Description StringBuffer Render(IMarkdownRenderer, AzureVideoBlockToken, MarkdownBlockContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer render, AzureVideoBlockToken token, MarkdownBlockContext context) Parameters Type Name Description IMarkdownRenderer render AzureVideoBlockToken token MarkdownBlockContext context Returns Type Description StringBuffer"
  },
  "api/Microsoft.DocAsCode.AzureMarkdownRewriters.AzureIncludeInlineToken.html": {
    "href": "api/Microsoft.DocAsCode.AzureMarkdownRewriters.AzureIncludeInlineToken.html",
    "title": "Class AzureIncludeInlineToken\r\n   | DocFX website ",
    "keywords": "Class AzureIncludeInlineToken Inheritance Object AzureIncludeBasicToken AzureIncludeInlineToken Namespace :Microsoft.DocAsCode.AzureMarkdownRewriters Assembly :Microsoft.DocAsCode.AzureMarkdownRewriters.dll Syntax public class AzureIncludeInlineToken : AzureIncludeBasicToken, IMarkdownToken, IMarkdownRewritable<AzureIncludeInlineToken> Constructors AzureIncludeInlineToken(IMarkdownRule, IMarkdownContext, String, String, String, ImmutableArray<IMarkdownToken>, String, String) Declaration public AzureIncludeInlineToken(IMarkdownRule rule, IMarkdownContext context, string src, string name, string title, ImmutableArray<IMarkdownToken> tokens, string raw, string rawMarkdown) Parameters Type Name Description IMarkdownRule rule IMarkdownContext context String src String name String title System.Collections.Immutable.ImmutableArray < IMarkdownToken > tokens String raw String rawMarkdown Methods Rewrite(IMarkdownRewriteEngine) Declaration public AzureIncludeInlineToken Rewrite(IMarkdownRewriteEngine rewriteEngine) Parameters Type Name Description IMarkdownRewriteEngine rewriteEngine Returns Type Description AzureIncludeInlineToken"
  },
  "api/Microsoft.DocAsCode.AzureMarkdownRewriters.AzureIncludeInlineRule.html": {
    "href": "api/Microsoft.DocAsCode.AzureMarkdownRewriters.AzureIncludeInlineRule.html",
    "title": "Class AzureIncludeInlineRule\r\n   | DocFX website ",
    "keywords": "Class AzureIncludeInlineRule Inheritance Object AzureIncludeInlineRule Namespace :Microsoft.DocAsCode.AzureMarkdownRewriters Assembly :Microsoft.DocAsCode.AzureMarkdownRewriters.dll Syntax public class AzureIncludeInlineRule : IMarkdownRule Properties AzureIncludeRegex Declaration public virtual Regex AzureIncludeRegex { get; } Proverty Value Type Description Regex Name Declaration public virtual string Name { get; } Proverty Value Type Description String Methods TryMatch(IMarkdownParser, ref String) Declaration public IMarkdownToken TryMatch(IMarkdownParser engine, ref string source) Parameters Type Name Description IMarkdownParser engine String source Returns Type Description IMarkdownToken"
  },
  "api/Microsoft.DocAsCode.AzureMarkdownRewriters.AzureIncludeBlockToken.html": {
    "href": "api/Microsoft.DocAsCode.AzureMarkdownRewriters.AzureIncludeBlockToken.html",
    "title": "Class AzureIncludeBlockToken\r\n   | DocFX website ",
    "keywords": "Class AzureIncludeBlockToken Inheritance Object AzureIncludeBasicToken AzureIncludeBlockToken Namespace :Microsoft.DocAsCode.AzureMarkdownRewriters Assembly :Microsoft.DocAsCode.AzureMarkdownRewriters.dll Syntax public class AzureIncludeBlockToken : AzureIncludeBasicToken, IMarkdownToken, IMarkdownRewritable<AzureIncludeBlockToken> Constructors AzureIncludeBlockToken(IMarkdownRule, IMarkdownContext, String, String, String, ImmutableArray<IMarkdownToken>, String, String) Declaration public AzureIncludeBlockToken(IMarkdownRule rule, IMarkdownContext context, string src, string name, string title, ImmutableArray<IMarkdownToken> tokens, string raw, string rawMarkdown) Parameters Type Name Description IMarkdownRule rule IMarkdownContext context String src String name String title System.Collections.Immutable.ImmutableArray < IMarkdownToken > tokens String raw String rawMarkdown Methods Rewrite(IMarkdownRewriteEngine) Declaration public AzureIncludeBlockToken Rewrite(IMarkdownRewriteEngine rewriteEngine) Parameters Type Name Description IMarkdownRewriteEngine rewriteEngine Returns Type Description AzureIncludeBlockToken"
  },
  "api/Microsoft.DocAsCode.AzureMarkdownRewriters.AzureIncludeBlockRule.html": {
    "href": "api/Microsoft.DocAsCode.AzureMarkdownRewriters.AzureIncludeBlockRule.html",
    "title": "Class AzureIncludeBlockRule\r\n   | DocFX website ",
    "keywords": "Class AzureIncludeBlockRule Inheritance Object AzureIncludeBlockRule Namespace :Microsoft.DocAsCode.AzureMarkdownRewriters Assembly :Microsoft.DocAsCode.AzureMarkdownRewriters.dll Syntax public class AzureIncludeBlockRule : IMarkdownRule Properties AzureIncludeRegex Declaration public virtual Regex AzureIncludeRegex { get; } Proverty Value Type Description Regex Name Declaration public virtual string Name { get; } Proverty Value Type Description String Methods TryMatch(IMarkdownParser, ref String) Declaration public IMarkdownToken TryMatch(IMarkdownParser engine, ref string source) Parameters Type Name Description IMarkdownParser engine String source Returns Type Description IMarkdownToken"
  },
  "api/Microsoft.DocAsCode.AzureMarkdownRewriters.AzureIncludeBasicToken.html": {
    "href": "api/Microsoft.DocAsCode.AzureMarkdownRewriters.AzureIncludeBasicToken.html",
    "title": "Class AzureIncludeBasicToken\r\n   | DocFX website ",
    "keywords": "Class AzureIncludeBasicToken Inheritance Object AzureIncludeBasicToken Namespace :Microsoft.DocAsCode.AzureMarkdownRewriters Assembly :Microsoft.DocAsCode.AzureMarkdownRewriters.dll Syntax public abstract class AzureIncludeBasicToken : IMarkdownToken Constructors AzureIncludeBasicToken(IMarkdownRule, IMarkdownContext, String, String, String, ImmutableArray<IMarkdownToken>, String, String) Declaration protected AzureIncludeBasicToken(IMarkdownRule rule, IMarkdownContext context, string src, string name, string title, ImmutableArray<IMarkdownToken> tokens, string raw, string rawMarkdown) Parameters Type Name Description IMarkdownRule rule IMarkdownContext context String src String name String title System.Collections.Immutable.ImmutableArray < IMarkdownToken > tokens String raw String rawMarkdown Properties Context Declaration public IMarkdownContext Context { get; } Proverty Value Type Description IMarkdownContext Name Declaration public string Name { get; } Proverty Value Type Description String Raw Declaration public string Raw { get; } Proverty Value Type Description String RawMarkdown Declaration public string RawMarkdown { get; set; } Proverty Value Type Description String Rule Declaration public IMarkdownRule Rule { get; } Proverty Value Type Description IMarkdownRule Src Declaration public string Src { get; } Proverty Value Type Description String Title Declaration public string Title { get; } Proverty Value Type Description String Tokens Declaration public ImmutableArray<IMarkdownToken> Tokens { get; } Proverty Value Type Description System.Collections.Immutable.ImmutableArray < IMarkdownToken >"
  },
  "api/Microsoft.DocAsCode.AzureMarkdownRewriters.AzureHtmlMetadataBlockToken.html": {
    "href": "api/Microsoft.DocAsCode.AzureMarkdownRewriters.AzureHtmlMetadataBlockToken.html",
    "title": "Class AzureHtmlMetadataBlockToken\r\n   | DocFX website ",
    "keywords": "Class AzureHtmlMetadataBlockToken Inheritance Object AzureHtmlMetadataBlockToken Namespace :Microsoft.DocAsCode.AzureMarkdownRewriters Assembly :Microsoft.DocAsCode.AzureMarkdownRewriters.dll Syntax public class AzureHtmlMetadataBlockToken : IMarkdownToken Constructors AzureHtmlMetadataBlockToken(IMarkdownRule, IMarkdownContext, IReadOnlyDictionary<String, String>, IReadOnlyDictionary<String, String>, String) Declaration public AzureHtmlMetadataBlockToken(IMarkdownRule rule, IMarkdownContext context, IReadOnlyDictionary<string, string> properties, IReadOnlyDictionary<string, string> tags, string rawMarkdown) Parameters Type Name Description IMarkdownRule rule IMarkdownContext context System.Collections.Generic.IReadOnlyDictionary < String , String > properties System.Collections.Generic.IReadOnlyDictionary < String , String > tags String rawMarkdown Properties Context Declaration public IMarkdownContext Context { get; } Proverty Value Type Description IMarkdownContext Properties Declaration public IReadOnlyDictionary<string, string> Properties { get; set; } Proverty Value Type Description System.Collections.Generic.IReadOnlyDictionary < String , String > RawMarkdown Declaration public string RawMarkdown { get; set; } Proverty Value Type Description String Rule Declaration public IMarkdownRule Rule { get; } Proverty Value Type Description IMarkdownRule Tags Declaration public IReadOnlyDictionary<string, string> Tags { get; set; } Proverty Value Type Description System.Collections.Generic.IReadOnlyDictionary < String , String >"
  },
  "api/Microsoft.DocAsCode.AzureMarkdownRewriters.AzureHtmlMetadataBlockRule.html": {
    "href": "api/Microsoft.DocAsCode.AzureMarkdownRewriters.AzureHtmlMetadataBlockRule.html",
    "title": "Class AzureHtmlMetadataBlockRule\r\n   | DocFX website ",
    "keywords": "Class AzureHtmlMetadataBlockRule Inheritance Object AzureHtmlMetadataBlockRule Namespace :Microsoft.DocAsCode.AzureMarkdownRewriters Assembly :Microsoft.DocAsCode.AzureMarkdownRewriters.dll Syntax public class AzureHtmlMetadataBlockRule : IMarkdownRule Properties AzureHtmlMetadataRegex Declaration public virtual Regex AzureHtmlMetadataRegex { get; } Proverty Value Type Description Regex Name Declaration public virtual string Name { get; } Proverty Value Type Description String Methods TryMatch(IMarkdownParser, ref String) Declaration public virtual IMarkdownToken TryMatch(IMarkdownParser engine, ref string source) Parameters Type Name Description IMarkdownParser engine String source Returns Type Description IMarkdownToken"
  },
  "api/Microsoft.DocAsCode.AzureMarkdownRewriters.AzureFileInfo.html": {
    "href": "api/Microsoft.DocAsCode.AzureMarkdownRewriters.AzureFileInfo.html",
    "title": "Class AzureFileInfo\r\n   | DocFX website ",
    "keywords": "Class AzureFileInfo Inheritance Object AzureFileInfo Namespace :Microsoft.DocAsCode.AzureMarkdownRewriters Assembly :Microsoft.DocAsCode.AzureMarkdownRewriters.dll Syntax public class AzureFileInfo Properties FileName Indicate the azure file name. It's global unique in azure content Declaration public string FileName { get; set; } Proverty Value Type Description String FilePath Indicate currently absolute path of azure file Declaration public string FilePath { get; set; } Proverty Value Type Description String NeedTransformToAzureExternalLink Indicate whether the current relative path need to be changed to external link. If the current file is in docset, then false. Otherwise true. Declaration public bool NeedTransformToAzureExternalLink { get; set; } Proverty Value Type Description Boolean UriPrefix Indicate the uri prefix except the asset id Declaration public string UriPrefix { get; set; } Proverty Value Type Description String"
  },
  "api/Microsoft.DocAsCode.AzureMarkdownRewriters.AzureEngineBuilder.html": {
    "href": "api/Microsoft.DocAsCode.AzureMarkdownRewriters.AzureEngineBuilder.html",
    "title": "Class AzureEngineBuilder\r\n   | DocFX website ",
    "keywords": "Class AzureEngineBuilder Inheritance Object MarkdownEngineBuilder GfmEngineBuilder AzureEngineBuilder Namespace :Microsoft.DocAsCode.AzureMarkdownRewriters Assembly :Microsoft.DocAsCode.AzureMarkdownRewriters.dll Syntax public class AzureEngineBuilder : GfmEngineBuilder Constructors AzureEngineBuilder(Options) Declaration public AzureEngineBuilder(Options options) Parameters Type Name Description Options options Methods BuildBlockRules() Declaration protected override void BuildBlockRules() BuildInlineRules() Declaration protected override void BuildInlineRules() BuildRules() Declaration protected override void BuildRules() CreateEngine(Object) Declaration public override IMarkdownEngine CreateEngine(object renderer) Parameters Type Name Description Object renderer Returns Type Description IMarkdownEngine CreateRewriters() Declaration protected void CreateRewriters()"
  },
  "api/Microsoft.DocAsCode.AzureMarkdownRewriters.AzureBlockquoteBlockToken.html": {
    "href": "api/Microsoft.DocAsCode.AzureMarkdownRewriters.AzureBlockquoteBlockToken.html",
    "title": "Class AzureBlockquoteBlockToken\r\n   | DocFX website ",
    "keywords": "Class AzureBlockquoteBlockToken Inheritance Object MarkdownBlockquoteBlockToken AzureBlockquoteBlockToken Namespace :Microsoft.DocAsCode.AzureMarkdownRewriters Assembly :Microsoft.DocAsCode.AzureMarkdownRewriters.dll Syntax public class AzureBlockquoteBlockToken : MarkdownBlockquoteBlockToken, IMarkdownToken, IMarkdownRewritable<MarkdownBlockquoteBlockToken> Constructors AzureBlockquoteBlockToken(IMarkdownRule, IMarkdownContext, ImmutableArray<IMarkdownToken>, String) Declaration public AzureBlockquoteBlockToken(IMarkdownRule rule, IMarkdownContext context, ImmutableArray<IMarkdownToken> tokens, string rawMarkdown) Parameters Type Name Description IMarkdownRule rule IMarkdownContext context System.Collections.Immutable.ImmutableArray < IMarkdownToken > tokens String rawMarkdown"
  },
  "api/Microsoft.DocAsCode.AzureMarkdownRewriters.AzureBlockquoteBlockRule.html": {
    "href": "api/Microsoft.DocAsCode.AzureMarkdownRewriters.AzureBlockquoteBlockRule.html",
    "title": "Class AzureBlockquoteBlockRule\r\n   | DocFX website ",
    "keywords": "Class AzureBlockquoteBlockRule Inheritance Object MarkdownBlockquoteBlockRule AzureBlockquoteBlockRule Namespace :Microsoft.DocAsCode.AzureMarkdownRewriters Assembly :Microsoft.DocAsCode.AzureMarkdownRewriters.dll Syntax public class AzureBlockquoteBlockRule : MarkdownBlockquoteBlockRule, IMarkdownRule Properties Name Declaration public override string Name { get; } Proverty Value Type Description String Methods TryMatch(IMarkdownParser, ref String) Declaration public override IMarkdownToken TryMatch(IMarkdownParser engine, ref string source) Parameters Type Name Description IMarkdownParser engine String source Returns Type Description IMarkdownToken"
  },
  "api/Microsoft.DocAsCode.AssemblyUsageAttribute.html": {
    "href": "api/Microsoft.DocAsCode.AssemblyUsageAttribute.html",
    "title": "Class AssemblyUsageAttribute\r\n   | DocFX website ",
    "keywords": "Class AssemblyUsageAttribute Inheritance Object Attribute CustomAssemblyTextAttribute AssemblyUsageAttribute Namespace :Microsoft.DocAsCode Assembly :docfx.dll Syntax public class AssemblyUsageAttribute : CustomAssemblyTextAttribute, _Attribute Constructors AssemblyUsageAttribute(String[]) Declaration public AssemblyUsageAttribute(params string[] lines) Parameters Type Name Description String [] lines"
  },
  "api/Microsoft.DocAsCode.AssemblyLicenseAttribute.html": {
    "href": "api/Microsoft.DocAsCode.AssemblyLicenseAttribute.html",
    "title": "Class AssemblyLicenseAttribute\r\n   | DocFX website ",
    "keywords": "Class AssemblyLicenseAttribute Inheritance Object Attribute CustomAssemblyTextAttribute AssemblyLicenseAttribute Namespace :Microsoft.DocAsCode Assembly :docfx.dll Syntax public class AssemblyLicenseAttribute : CustomAssemblyTextAttribute, _Attribute Constructors AssemblyLicenseAttribute(String[]) Declaration public AssemblyLicenseAttribute(params string[] lines) Parameters Type Name Description String [] lines"
  },
  "api/Microsoft.CodeAnalysis.Workspaces.Dnx.html": {
    "href": "api/Microsoft.CodeAnalysis.Workspaces.Dnx.html",
    "title": "Namespace Microsoft.CodeAnalysis.Workspaces.Dnx\r\n   | DocFX website ",
    "keywords": "Namespace Microsoft.CodeAnalysis.Workspaces.Dnx Classes ProjectJsonWorkspace"
  },
  "api/Microsoft.CodeAnalysis.Workspaces.Dnx.ProjectJsonWorkspace.html": {
    "href": "api/Microsoft.CodeAnalysis.Workspaces.Dnx.ProjectJsonWorkspace.html",
    "title": "Class ProjectJsonWorkspace\r\n   | DocFX website ",
    "keywords": "Class ProjectJsonWorkspace Inheritance Object Microsoft.CodeAnalysis.Workspace ProjectJsonWorkspace Namespace :Microsoft.CodeAnalysis.Workspaces.Dnx Assembly :Microsoft.CodeAnalysis.Workspaces.Dnx.dll Syntax public class ProjectJsonWorkspace : Workspace, IDisposable Constructors ProjectJsonWorkspace(String) Declaration public ProjectJsonWorkspace(string projectPath) Parameters Type Name Description String projectPath ProjectJsonWorkspace(String[]) Declaration public ProjectJsonWorkspace(string[] projectPaths) Parameters Type Name Description String [] projectPaths"
  },
  "tutorial/walkthrough_overview.html": {
    "href": "tutorial/walkthrough_overview.html",
    "title": "Walkthrough Overview | DocFX website ",
    "keywords": "Improve this Doc Walkthrough Overview By completing these walkthroughs, you'll create a static website, containing both Conceptual Documentation which comes from .md files and API Documentation which comes from .NET source code. You'll also be able to customize your website with your own styles and even template! List of Articles Walkthrough Part I: Generate a Simple Documentation Website Walkthrough Part II: Adding API Documentation to the Website Walkthrough Advanced: Customize Your Website"
  },
  "tutorial/walkthrough_create_a_docfx_project_2.html": {
    "href": "tutorial/walkthrough_create_a_docfx_project_2.html",
    "title": "Walkthrough Part II: Adding API Documentation to the Website | DocFX website ",
    "keywords": "Improve this Doc Walkthrough Part II: Adding API Documentation to the Website After completing Walkthrough Part I: Generate a Simple Documentation Website , we build a website from a set of .md files. We call it Conceptual Documentation . In this walkthrough, we will learn to build website from .NET source code, which is called API Documentation . We will also integrate Conceptual Documentation and API Documentation into one website, so that we can navigate from Conceptual to API , or API to Conceptual seamlessly. Download the files used in this walkthrough here . After completing walkthourgh part I, our D:\\docfx_walkthrough\\docfx_project folder is in the following structure: |- index.md |- toc.yml |- articles | |- intro.md | |- details1.md | |- details2.md | |- details3.md | |- toc.yml |- images |- details1_image.png |- api |- index.md |- toc.yml Step1. Add a C# project Create a subfolder src under D:\\docfx_walkthrough\\docfx_project . Open Visual Studio Community 2015 or above and create a C# Class Library HelloDocfx under folder src . In the Class1.cs , add some comments and methods to this class, as similar to: namespace HelloDocfx { /// <summary> /// Hello this is **Class1** from *HelloDocfx* /// </summary> public class Class1 { private InnerClass _class; public int Value { get; } /// <summary> /// This is a ctor /// </summary> /// <param name=\"value\">The value of the class</param> public Class1(int value) { Value = value; } public double ConvertToDouble() { return Value; } /// <summary> /// A method referencing a inner class /// </summary> /// <param name=\"name\">The name</param> /// <param name=\"inner\">A inner class with type <seealso cref=\"InnerClass\"/></param> public void SetInnerClass(string name, InnerClass inner) { inner.Name = name; _class = inner; } public class InnerClass { public string Name { get; set; } } } } Step2. Generate metadata for the C# project Call docfx metadata under D:\\docfx_walkthrough\\docfx_project . docfx metadata is a sub-command registered in docfx , it reads configuration in the metadata section from docfx.json . [ \"src/**.csproj\" ] in metadata/src/files tells docfx to search all the csproj from src subfolder to generate metadata. \"metadata\": [ { \"src\": [ { \"files\": [ \"src/**.csproj\" ], \"exclude\": [ \"**/bin/**\", \"**/obj/**\", \"_site/**\" ] } ], \"dest\": \"api\" } ] Several YAML files will be generated into api folder. The YAML file contains the data model extracted from C# source code file. YAML is the metadata format used in docfx . General Metadata Spec defines the general schema and .NET Metadata Spec defines the metadata schema for .NET languages that docfx can consume. |- HelloDocfx.Class1.InnerClass.yml |- HelloDocfx.Class1.yml |- HelloDocfx.yml |- toc.yml Step3. Build and preview our website Run command docfx . docfx reads docfx.json and execute subcommands defined in the config file one by one. Our docfx.json defines metadata and build , so by running docfx , we are actually excuting docfx metadata and docfx build , and thus generate the website. Run docfx serve _site , and the website is now: . Conclusion In this walkthrough, we build a website containing both Conceptual Documentation and API Documentation . And the upcoming series of advanced walkthroughs, we will learn advanced concepts in docfx , such as cross reference between articles, external reference to other documentations, etc. We will also learn to customize our websites, from theme to layout to metadata extraction. Read more Walkthrough Part I: Generate a Simple Documentation Website Walkthrough Advanced: Customize Your Website"
  },
  "tutorial/walkthrough_create_a_docfx_project.html": {
    "href": "tutorial/walkthrough_create_a_docfx_project.html",
    "title": "Walkthrough Part I: Generate a Simple Documentation Website | DocFX website ",
    "keywords": "Improve this Doc Walkthrough Part I: Generate a Simple Documentation Website By completing this walkthrough, you'll become familiar with the workflow of docfx and the general principle of organizing documents inside docfx . You will finish this walkthrough with a static website that can be published to any host service. Download the files used in this walkthrough here . Step1. Setup docfx Download docfx from http://dotnet.github.io/docfx/ . Getting Started with docfx describes 3 ways to install docfx . This walkthrough uses the first one: use docfx.exe directly. Download docfx.zip and unzip it to D:\\docfx\\ Add D:\\docfx\\ to PATH so that command docfx and be directly called from everywhere for convenience. E.g. for Windows, setx PATH \"%PATH%;D:\\docfx\\\" Step2. Init a docfx project Create a new folder D:\\docfx_walkthrough Start Command Line under D:\\docfx_walkthrough Call docfx init -q . This command generates a docfx_project folder with the default docfx.json file under it. docfx.json is the configuration file docfx uses to generate documentation. -q option means generating the project quitely using default value, you can also try docfx init and follow the instructions to provide your own settings. Step3. Build our website Run command docfx docfx_project/docfx.json . Note that a new subfolder _site is generated under that folder. This is where the static website is generated. Step4. Preview our website The generated static website can be published to github pages, azure websites, or your own hosting service without any further changes. You can also run command docfx serve docfx_project/_site to preview the website locally. If port 8080 is not in use, docfx will host _site under http://localhost:8080 . If 8080 is in use, you can use docfx serve _site -p <port> to change the port to be used by docfx . Congrats! You can now see a simple website similar to: Step5. Add a set of articles to the website Place more .md files to articles , e.g. details1.md , details2.md , details3.md . If the file references to any resources, put the resources into images folder. In order to organize these articles, we add these files into toc.yml under articles subfolder. The content of toc.yml is as below: - name: Introduction href: intro.md - name: Details 1 href: details1.md - name: Details 2 href: details2.md - name: Details 3 href: details3.md So now our folder layout is: |- index.md |- toc.yml |- articles | |- intro.md | |- details1.md | |- details2.md | |- details3.md | |- toc.yml |- images |- details1_image.png Run Step3 and Step4 again, and the website is now: . Noticed that more items are added to the sidebar for Articles nav page. The title inside the sidebar is exactly what we set in the toc.yml inside articles subfolder. Conclusion In this walkthrough, we build a website from a set of .md files. We call these .md files Conceptual Documentation . In walkthrough part 2, we will learn to add API Documentation to our website. The API Documentation is extracted directly from .NET source code. And in series of advanced walkthroughs, we will learn advanced concepts in docfx , such as cross reference between articles, external reference to other documentations, etc. We will also learn to customize our websites, from theme to layout to metadata extraction. Read more Walkthrough Part II: Adding API Documentation to the Website Walkthrough Advanced: Customize Your Website"
  },
  "tutorial/howto_create_custom_template.html": {
    "href": "tutorial/howto_create_custom_template.html",
    "title": "How-to: Create Custom Templates | DocFX website ",
    "keywords": "Improve this Doc How-to: Create Custom Templates Custom Templates are organized to be a zip package or a folder. The name of the zip package or the folder is considered as the template name. Currently docfx supports Mustache syntax as the templating language. Template files end with .tmpl extension, and multiple template files are allowed. Partial templates are also supported, and partial templates MUST end with .tmpl.partial . The default template file is named to default[.<extension>].tmpl , [.<extension>] defines the extension of the transformed file, and could be omitted if the transformed file has no extension. The naming convention of the template file is <type>[.<extension>].tmpl , <type> defines the Type of the model the template file is defined to transform. If no matching Type is found, docfx fallbacks to use the default[.<extension>].tmpl. If none of the files exists, docfx` will not do the transformation. By default, docfx uses the template file and applies model to generate output files. Model can also be preprocessed before applying template as described in detail in Section 3. 1. What is the model used for the template? The model used for the template is exactly the one defined in YAML file generated by docfx . Some prevserved properties are also provided as described in the following table: Name Description _pageTitle The title of current page _title The title of the whole document _locales Array in JSON format. The list of locales supported for current page. _ext The extension of the generated page _lang The programming language of the page _name The name of the page _description The description of the page _rel The relative path of the folder of the generated page to the root folder of the generated document _navPath The relative path of the root TOC file, if exists _navRel The relative path of the folder of the root TOC file to the root folder of the generated document, if exists _tocPath The relative path of the TOC file, if exists _tocRel The relative path of the folder of the TOC file to the root folder of the generated document, if exists 2. What is the extension of the output file? The extension of the output file is defined by the naming of the template file <type>[.<extension>].tmpl . For example, with a template naming markdown.md.tmpl , the extension will be .md ; with a template naming markdown.tmpl , the extension will be ``. 3. How to transform the model before applying it to the template? If a default.js file exists in the same folder as the template file, this javascript file will be evalated. docfx tries to evaluate the javascript file and call transform function afterwards. docfx considers transform function to be in the following syntax: function transform(model, _attrs) {} model is the JSON format model as extracted from YAML file, and _attrs is the JSON format model for the preserved attributes as defined in Section 1. 4. How to include resource files in the template? Resource files can be included in the template with the following syntax: {{!include('<file name>')}} docfx will copy these dependencies to output folder preserving its relative path to the template file. 5. TOBEADDED: HOW TO USE the DEFAULT template?"
  },
  "tutorial/docfx_getting_started.html": {
    "href": "tutorial/docfx_getting_started.html",
    "title": "Getting Started with DocFX | DocFX website ",
    "keywords": "Improve this Doc Getting Started with DocFX 1. What is DocFX DocFX is an API documentation generator for .NET, currently it supports C# and VB. It has the ability to generate API reference documentation from triple slash comments of your source code. What's more, it allows you to use markdown files to create additional topics like tutorials, how-tos, or even customize the generated reference documentation. DocFX builds a static HTML web site from your source code and markdown files, which can be easily hosted on any web servers, for example, github.io . DocFX also provides you the flexibility to customize the layout and style of your web site through templates. If you are interested in creating your own web site with your own styles, you can follow how to create custom template to create custom templates. DocFX also has the following cool features: Integrated with your source code. You can click \"View Source\" on an API to navigate to the source code in GitHub (your source code must be pushed to GitHub). Cross platform. We have both exe version that runs under Windows and a DNX version that runs cross platform. Integrated with Visual Studio. DocFX can be used within Visual Studio seamlessly. Markdown extensions. DocFX Flavored Markdown(DFM) is introduced to help you write API documentation. DFM is 100% compatible with Github Flavored Markdown(GFM) with some useful extensions, like file inclusion , code snippet , cross reference , and yaml header . For detailed description about DFM, please refer to DFM . 2. Use DocFX as a command-line tool Step1. Download and unzip docfx.zip from https://github.com/dotnet/docfx/releases and extract to a local folder, add it to PATH so you can run it anywhere. Step2. Create a sample project docfx init -q A default project named docfx_project will be generated. Step3. Build the web site docfx docfx_project\\docfx.json --serve Now you can view the generated web site on http://localhost:8080 . 3. Use DocFX in Visual Studio As a prerequisite, you will need Visual Studio 2015 to use DocFX in IDE. Step1. Open Visual Studio and create a C# project as your documentation project. You can use the ASP.NET Web Application as it has built-in preview feature which can be used to preview the generated web site easily. Step2. Install Nuget Package docfx.msbuild within Package Manager Console : Install-Package docfx.msbuild Step3. Right click on the website project, and click View -> View in Browser , navigate to /_site sub url to view your web site! 4. Use DocFX under DNX As a prerequisite, you will need to install DNVM and DNX . Step1. SET DNX_FEED=https://www.myget.org/F/aspnetrelease/api/v2/ as we depends on the release version of aspnet 1.0.0-rc1. Step2. dnvm upgrade to get the latest dnvm. Step3. Add feed https://www.myget.org/F/aspnetrelease/api/v2/ to Nuget.config. For Windows, the nuget config file is %AppData%\\NuGet\\NuGet.config . For Linux/OSX, the nuget config file is ~/.config/NuGet/NuGet.config . Sample nuget.config <?xml version=\"1.0\" encoding=\"utf-8\"?> <configuration> <packageSources> <add key=\"myget.release\" value=\"https://www.myget.org/F/aspnetrelease/api/v2/\" /> <add key=\"nuget.org\" value=\"https://www.nuget.org/api/v2/\" /> </packageSources> <disabledPackageSources /> <activePackageSource> <add key=\"nuget.org\" value=\"https://www.nuget.org/api/v2/\" /> </activePackageSource> </configuration> Step4. dnu commands install docfx to install DocFX as a command. Step5. docfx init -q to generate a sample project. Step6. docfx docfx_project\\docfx.json --serve to build your project and preview your site at http://localhost:8080 . Please refer to DocFX User Manual for detailed description of docfx.json . 5. Build from source code Step1. git clone https://github.com/dotnet/docfx.git to get the latest code. Step2. Run build.cmd under root folder. Step3. Add artifacts folder to nuget source by in IDE: Tools > Nuget Package Manager > Package Manager Settings > Package Sources Step4. Follow steps in #2, #3, #4 to use DocFX in command-line, IDE or DNX. 6. A seed project to play with DocFX Here is a seed project https://github.com/docascode/docfx-seed . It contains A basic C# project under src . Several conceptual files under articles . An overwrite file to add extra content to API under specs . toc.yml under root folder. It will be rendered as the navbar of the website. docfx.json under root folder. It is the configuration file that docfx depends on. Tips It is a good practice to seperate files with different type into different folders. 7. Q&A Q: How to quickly reference APIs from other APIs or conceptual files? A: Use @uid syntax. Q: What is uid and where to find uid ? A: Refer to Cross Reference section in DFM . Q: How to quickly find uid in web site? A: In the generated web site, F12 to view source, look at the title of an API, you can uid in data-uid attribute."
  },
  "tutorial/docfx.exe_user_manual.html": {
    "href": "tutorial/docfx.exe_user_manual.html",
    "title": "docfx.exe User Manual | DocFX website ",
    "keywords": "Improve this Doc Doc-as-code: docfx.exe User Manual 0. Introduction docfx.exe is used to generate documentation for programs. It has the ability to: Extract language metadata for programing languages as defined in Metadata Format Specification . Currently language VB and CSharp are supported. The language metadata will be saved with YAML format as described in YAML 1.2 . Look for available conceptual files as provided and link it with existing programs with syntax described in Section 3. Work with Metadata in Markdown . Supported conceptual files are plain text files, html files, and markdown files. Generate documentation to a. Visualize language metadata, with extra content provided by linked conceptual files using syntax described in Section 3. Work with Metadata in Markdown . b. Organize and render available conceptual files. It can be easily cross-referenced with language metadata pages. We support Docfx Flavored Markdown(DFM) for writing conceptual files. DFM is 100% compatible with Github Flavored Markdown(GFM) and add several new features including file inclusion , cross reference , and yaml header . For detailed description about DFM, please refer to DFM . Currently generating documentations to a client only website is supported. The generated website can be easily published to whatever platform such as Github Pages and Azure Website with no extra effort. Offline documentations such as pdf are planned to be supported in the future. 1. Syntax docfx <command> [<args>] 2. Commands 2.0 Init command docfx init docfx init helps generate an docfx.json file. 2.1 Help command docfx help docfx help -a list available subcommands. docfx help <command> to read about a specific subcommand 2.2 Extract language metadata command docfx metadata Syntax docfx metadata [<projects>] [-o:<output_path>] Layout |-- <output_path> |-- api | |-- <namespace>.yml | |-- <class>.yml |-- toc.yml |-- index.yml 2.2.1 Optional <projects> argument <projects> specifies the projects to have metadata extracted. There are several approaches to extract language metadata. From a supported project file or project file list Supported project file extensions include .csproj , .vbproj , .sln , and project.json . Note project.json ( DNX project file) is only supported in DNX version of DocFX . Please refer to Getting Started for how to use DocFX in DNX . Files can be combined using , as seperator, e.g. docfx metadata a.csproj,b.sln . From a supported source code file or source code file list Supported source code file extensions include .cs and .vb . Files can be combined using , as seperator and search pattern . From docfx.json file, as described in Section3 . If the argument is not specified, docfx.exe will try reading docfx.json under current directory. 2.2.2 Optional <output_path> argument The default output folder is _site/ folder 2.3 Generate documentation command docfx build Syntax docfx build [-o:<output_path>] [-t:<template folder>] docfx build generates documentation for current folder. If toc.yml or toc.md is found in current folder, it will be rendered as the top level TABLE-OF-CONTENT. As in website, it will be rendered as the top navigation bar. NOTE that homepage is not supported in toc.md . And if href is referencing to a folder , it must end with / . toc.yml syntax toc.yml is an array of items. Each item can have following properties: Property Description name Requried . The title of the navigation page. href Required . Can be a folder or a file UNDER current folder. Folder must be end with / . If is a folder, TOC.md inside the folder will be rendered as second level TABLE-OF-CONTENT. As in website, it will be rendered as sidebar. homepage OPTIONAL . The default content shown when no article is selected. TOC.yml Sample - name: Home href: articles/Home.md - name: Roslyn Wiki href: roslyn_wiki/ - name: Roslyn API href: api_roslyn/ homepage: homepages/roslyn_language_features.md TOC.md Sample ## [Home](articles/Home.md) ## [Roslyn Wiki](roslyn_wiki/) ## [Roslyn API](api_roslyn/) 2.3.1 Optional <output_path> argument The default output folder is _site/ folder 2.3.2 Optional <template folder> argument If specified, use the template from template folder Template Folder Structure |-- <template folder> |-- index.html |-- styles | |-- docascode.css | |-- docascode.js |-- template | |-- toc.html | |-- navbar.html | |-- yamlContent.html |-- favicon.ico |-- logo.ico 3. docfx.json Format Top level docfx.json structure is key-value pair. key is the name of the subcommand, current supported subcommands are metadata and build . 3.1 Properties for metadata Metadata section defines an array of source projects and their output folder. Each item has src and dest property. src defines the source projects to have metadata generated, which is in File Mapping Format . Detailed syntax is described in 4. Supported name-files File Mapping Format below. dest defines the output folder of the generated metadata files. Sample { \"metadata\": [ { \"src\": [ { \"files\": [\"**/*.csproj\"], \"exclude\": [ \"**/bin/**\", \"**/obj/**\" ], \"cwd\": \"../src\" } ], \"dest\": \"obj/docfx/api/dotnet\" }, { \"src\": [ { \"files\": [\"**/*.js\"], \"cwd\": \"../src\" } ], \"dest\": \"obj/docfx/api/js\" } ] } 3.2 Properties for build Key Description content OPTIONAL . Contains all the files to generate documentation, including metadata yml files and conceptual md files. name-files file mapping with several ways to define it, as to be described in Section4 . The files contains all the project files to have API generated. resource OPTIONAL . Contains all the resource files that conceptual and metadata files dependent on, e.g. image files. name-files file mapping with several ways to define it, as to be described in Section4 . overwrite OPTIONAL . Contains all the conceputal files which contains yaml header with uid and is intended to override the existing metadata yml files. name-files file mapping with several ways to define it, as to be described in Section4 . externalReferences OPTIONAL . Contains rpk files that defineds the external references. name-files file mapping with several ways to define it, as to be described in Section4 . globalMetadata OPTIONAL . Contains metadata that will be applied to every file, in key-value pair format. For example, you can define \"_appTitle\": \"This is the title\" in this section, and when applying template default , it will be part of the page title as defined in the template. template OPTIONAL . The templates applied to each file in the documentation. It can be a string or an array. The latter ones will override the former ones if the name of the file inside the template collides. If ommited, embedded default template will be used. theme OPTIONAL . The themes applied to the documentation. Theme is used to customize the styles generated by template . It can be a string or an array. The latter ones will override the former ones if the name of the file inside the template collides. If ommited, no theme will be applied, the default theme inside the template will be used. 3.2.1 Template s and Theme s Template s are used to transform YAML files generated by docfx to human-readable page s. A page can be a markdown file, a html file or even a plain text file. Each YAML file will be transformed to ONE page and be exported to the output folder preserving its relative path to cwd . For example, if page s are in HTML format, a static website will be generated in the output folder. Theme is to provide general styles for all the generated page s. Files inside a theme will be generally COPIED to the output folder. A typical usage is, after YAML files are transformed to HTML pages, well-designed CSS style files in a Theme can then overwrite the default styles defined in template , e.g. main.css . There are two ways to use custom templates and themes. To use a custom template, one way is to specify template path with --template (or -t ) command option, multiple templates must be seperated by , with no spaces. The other way is to set key-value mapping in docfx.json : { ... { \"build\" : { ... \"template\": \"custom\", ... } ... } { ... { \"build\" : { ... \"template\": [\"default\", \"X:/template/custom\"], ... } ... } The template path could either be a zip file called <template>.zip or a folder called <template> . To custom theme, one way is to specify theme name with --theme command option, multiple themes must be seperated by , with no spaces. The other way is to set key-value mapping in docfx.json as similar to defining template. Also, both .zip file and folder are supported. Please refer to How to Create Custom Templates to create custom templates. Sample { \"build\": { \"content\": [ { \"files\": [\"**/*.yml\"], \"cwd\": \"obj/docfx\" }, { \"files\": [\"tutorial/**/*.md\", \"spec/**/*.md\", \"spec/**/toc.yml\"] }, { \"files\": [\"toc.yml\"] } ], \"resource\": [ { \"files\": [\"spec/images/**\"] } ], \"overwrite\": \"apispec/*.md\", \"externalReference\": [ ], \"globalMetadata\": { \"_appTitle\": \"docfx website\" }, \"dest\": \"_site\", \"template\": \"default\" } } 4. Supported name-files File Mapping Format There are several ways to define name-files file mapping. NOTE All the formats support name and files properties, while Array Format supports a few additional properties: exclude Defines the files to be excuded from files 4.1 Object Format This format supports multiple name-files file mappings, with the property name as the name, and the value as the files. \"key\": { \"name1\": [\"file1\", \"file2\"], \"name2\": \"file3\" } 4.2 Array Format This form supports multiple name-files file mappings, and also allows additional properties per mapping. Supported properties: Property Name Description files REQUIRED . The file or file array, glob pattern is supported. name OPTIONAL . The folder name for the generated files. exclude OPTIONAL . The files to be excluded, glob pattern is supported. cwd OPTIONAL . Specifies the working directory. If omitted, the directory of the config file will be used. Use this option when you want to refer to files in relative folders while want to keep folder structure. e.g. set cwd to .. . caseSensitive TOBEIMPLEMENTED OPTIONAL . Default value is false . If set to true , the glob pattern is case sensitive. e.g. *.txt will not match 1.TXT . For OS Windows, file path is case insensitive while for Linux/Unix, file path is case sensitive. This option offers user the flexibility to determine how to search files. supportBackslash TOBEIMPLEMENTED OPTIONAL . Default value is true . If set to true , \\ will be considered as file path seperator. Otherwise, \\ will be considered as normal character if escape is set to true and as escape character if escape is set to false . If escape is set to true , \\\\ should be used to represent file path seperator. escape TOBEIMPLEMENTED OPTIONAL . Default value is false . If set to true , \\ character is used as escape character, e.g. \\{\\}.txt will match {}.txt . \"key\": [ {name: \"name1\", files: [\"file1\", \"file2\"]}, {name: \"name2\", files: \"file3\"}, {files: [\"file4\", \"file5\"], exclude: [\"file5\"], cwd: \"folder1\"} ] 4.3 Compact Format \"key\": [\"file1\", \"file2\"] 4.4 Glob Pattern xdoc uses Glob to support glob pattern in file path. It offers several options to determine how to parse the Glob pattern: caseSensitive : Default value is false . If set to true , the glob pattern is case sensitive. e.g. *.txt will not match 1.TXT . For OS Windows, file path is case insensitive while for Linux/Unix, file path is case sensitive. This option offers user the flexibility to determine how to search files. supportBackslash : Default value is true . If set to true , \\ will be considered as file path seperator. Otherwise, \\ will be considered as normal character if escape is set to true and as escape character if escape is set to false . If escape is set to true , \\\\ should be used to represent file path seperator. escape : Default value is false . If set to true , \\ character is used as escape character, e.g. \\{\\}.txt will match {}.txt . In general, the glob pattern contains the following rules: * matches any number of characters, but not / ? matches a single character, but not / ** matches any number of characters, including / , as long as it's the only thing in a path part {} allows for a comma-separated list of OR expressions SAMPLES 4. Q & A Do we support files outside current project folder(the folder when docfx.json exists)? A: YES. DO specify cwd and files outside of current folder will be copied to output folder keeping the same relative path to cwd . Do we support output folder outside current project folder(the folder when docfx.json exists)? A: YES. Do we support referencing files outside of current project folder(the folder when docfx.json exists)? A: NO."
  },
  "tutorial/Build your own type of documentation with custom plug-in.html": {
    "href": "tutorial/Build your own type of documentation with custom plug-in.html",
    "title": "How-to: Build your own type of documentation with custom plug-in | DocFX website ",
    "keywords": "Improve this Doc How-to: Build your own type of documentation with custom plug-in In this topic, we will create a plug-in to build some simple rich text format files to html documents. Goal and limitation In scope: Our input will be a set of rtf files, with .rtf extension file name. The rtf files will be built as html document. Out of scope: Picture or other object in rtf files. Hyperlink in rtf files. (in advanced tutorial , we will describe how to support hyperlinks in custom plugin.) Metadata and title. Preparation Create a new C# class library project in Visual Studio . Add nuget packages: System.Collections.Immutable with version 1.1.37 System.Composition with version 1.0.27 Add Microsoft.DocAsCode.Plugins If build DocFX from source code, add reference to the project. Otherwise, add nuget package Microsoft.DocAsCode.Plugins with the same version of DocFX. Add framework assembly reference: PresentationCore , PresentationFramework , WindowsBase Add project for convert rtf to html: Clone project MarkupConverter , and reference it. Copy code file StaTaskScheduler.cs from ParExtSamples Create a document processor The responsibility of document processor Declare which file can handle. Load from file to object model. Provide build steps. Report document type, file links and xref links in document. Update references. Create our RtfDocumentProcessor Create a new class (RtfDocumentProcessor.cs) with following code: [Export(typeof(IDocumentProcessor))] public class RtfDocumentProcessor : IDocumentProcessor { // todo : implements IDocumentProcessor. } Declare we can handle .rtf file: // Copyright (c) Microsoft. All rights reserved. // Licensed under the MIT license. See LICENSE file in the project root for full license information. namespace RtfDocumentProcessors { using System; using System.Collections.Generic; using System.Collections.Immutable; using System.Composition; using System.IO; using Microsoft.DocAsCode.Plugins; using Microsoft.DocAsCode.Utility; [Export(typeof(IDocumentProcessor))] public class RtfDocumentProcessor : IDocumentProcessor { #region BuildSteps [ImportMany(nameof(RtfDocumentProcessor))] public IEnumerable<IDocumentBuildStep> BuildSteps { get; set; } #endregion #region Name public string Name => nameof(RtfDocumentProcessor); #endregion #region GetProcessingPriority public ProcessingPriority GetProcessingPriority(FileAndType file) { if (file.Type == DocumentType.Article && \".rtf\".Equals(Path.GetExtension(file.File), StringComparison.OrdinalIgnoreCase)) { return ProcessingPriority.Normal; } return ProcessingPriority.NotSupported; } #endregion #region Load public FileModel Load(FileAndType file, ImmutableDictionary<string, object> metadata) { var content = new Dictionary<string, object> { [\"conceptual\"] = File.ReadAllText(Path.Combine(file.BaseDir, file.File)), [\"type\"] = \"Conceptual\", [\"path\"] = file.File, }; return new FileModel(file, content); } #endregion #region Save public SaveResult Save(FileModel model) { return new SaveResult { DocumentType = \"Conceptual\", ModelFile = model.File, LinkToFiles = linkToFiles.ToImmutableArray(), }; } #endregion #region UpdateHref public void UpdateHref(FileModel model, IDocumentBuildContext context) { } #endregion } } Here we declare this processor can handle any .rtf file in article category with normal priority. When two or more processors declare for same file, DocFX will give it to the higher priority one. Unexpected : two or more processor declare for the same file with same priority. Load our rtf file by read all text: // Copyright (c) Microsoft. All rights reserved. // Licensed under the MIT license. See LICENSE file in the project root for full license information. namespace RtfDocumentProcessors { using System; using System.Collections.Generic; using System.Collections.Immutable; using System.Composition; using System.IO; using Microsoft.DocAsCode.Plugins; using Microsoft.DocAsCode.Utility; [Export(typeof(IDocumentProcessor))] public class RtfDocumentProcessor : IDocumentProcessor { #region BuildSteps [ImportMany(nameof(RtfDocumentProcessor))] public IEnumerable<IDocumentBuildStep> BuildSteps { get; set; } #endregion #region Name public string Name => nameof(RtfDocumentProcessor); #endregion #region GetProcessingPriority public ProcessingPriority GetProcessingPriority(FileAndType file) { if (file.Type == DocumentType.Article && \".rtf\".Equals(Path.GetExtension(file.File), StringComparison.OrdinalIgnoreCase)) { return ProcessingPriority.Normal; } return ProcessingPriority.NotSupported; } #endregion #region Load public FileModel Load(FileAndType file, ImmutableDictionary<string, object> metadata) { var content = new Dictionary<string, object> { [\"conceptual\"] = File.ReadAllText(Path.Combine(file.BaseDir, file.File)), [\"type\"] = \"Conceptual\", [\"path\"] = file.File, }; return new FileModel(file, content); } #endregion #region Save public SaveResult Save(FileModel model) { return new SaveResult { DocumentType = \"Conceptual\", ModelFile = model.File, LinkToFiles = linkToFiles.ToImmutableArray(), }; } #endregion #region UpdateHref public void UpdateHref(FileModel model, IDocumentBuildContext context) { } #endregion } } we use Dictionary<string, object> as the data model, as similar to how ConceptualDocumentProcessor store the content of markdown files. Implements Save method as following: // Copyright (c) Microsoft. All rights reserved. // Licensed under the MIT license. See LICENSE file in the project root for full license information. namespace RtfDocumentProcessors { using System; using System.Collections.Generic; using System.Collections.Immutable; using System.Composition; using System.IO; using Microsoft.DocAsCode.Plugins; using Microsoft.DocAsCode.Utility; [Export(typeof(IDocumentProcessor))] public class RtfDocumentProcessor : IDocumentProcessor { #region BuildSteps [ImportMany(nameof(RtfDocumentProcessor))] public IEnumerable<IDocumentBuildStep> BuildSteps { get; set; } #endregion #region Name public string Name => nameof(RtfDocumentProcessor); #endregion #region GetProcessingPriority public ProcessingPriority GetProcessingPriority(FileAndType file) { if (file.Type == DocumentType.Article && \".rtf\".Equals(Path.GetExtension(file.File), StringComparison.OrdinalIgnoreCase)) { return ProcessingPriority.Normal; } return ProcessingPriority.NotSupported; } #endregion #region Load public FileModel Load(FileAndType file, ImmutableDictionary<string, object> metadata) { var content = new Dictionary<string, object> { [\"conceptual\"] = File.ReadAllText(Path.Combine(file.BaseDir, file.File)), [\"type\"] = \"Conceptual\", [\"path\"] = file.File, }; return new FileModel(file, content); } #endregion #region Save public SaveResult Save(FileModel model) { return new SaveResult { DocumentType = \"Conceptual\", ModelFile = model.File, LinkToFiles = linkToFiles.ToImmutableArray(), }; } #endregion #region UpdateHref public void UpdateHref(FileModel model, IDocumentBuildContext context) { } #endregion } } BuildSteps property can give severial build steps for model, we suggest implement as following: // Copyright (c) Microsoft. All rights reserved. // Licensed under the MIT license. See LICENSE file in the project root for full license information. namespace RtfDocumentProcessors { using System; using System.Collections.Generic; using System.Collections.Immutable; using System.Composition; using System.IO; using Microsoft.DocAsCode.Plugins; using Microsoft.DocAsCode.Utility; [Export(typeof(IDocumentProcessor))] public class RtfDocumentProcessor : IDocumentProcessor { #region BuildSteps [ImportMany(nameof(RtfDocumentProcessor))] public IEnumerable<IDocumentBuildStep> BuildSteps { get; set; } #endregion #region Name public string Name => nameof(RtfDocumentProcessor); #endregion #region GetProcessingPriority public ProcessingPriority GetProcessingPriority(FileAndType file) { if (file.Type == DocumentType.Article && \".rtf\".Equals(Path.GetExtension(file.File), StringComparison.OrdinalIgnoreCase)) { return ProcessingPriority.Normal; } return ProcessingPriority.NotSupported; } #endregion #region Load public FileModel Load(FileAndType file, ImmutableDictionary<string, object> metadata) { var content = new Dictionary<string, object> { [\"conceptual\"] = File.ReadAllText(Path.Combine(file.BaseDir, file.File)), [\"type\"] = \"Conceptual\", [\"path\"] = file.File, }; return new FileModel(file, content); } #endregion #region Save public SaveResult Save(FileModel model) { return new SaveResult { DocumentType = \"Conceptual\", ModelFile = model.File, LinkToFiles = linkToFiles.ToImmutableArray(), }; } #endregion #region UpdateHref public void UpdateHref(FileModel model, IDocumentBuildContext context) { } #endregion } } Name property is used to display in log, so give any constant string as you like. e.g.: // Copyright (c) Microsoft. All rights reserved. // Licensed under the MIT license. See LICENSE file in the project root for full license information. namespace RtfDocumentProcessors { using System; using System.Collections.Generic; using System.Collections.Immutable; using System.Composition; using System.IO; using Microsoft.DocAsCode.Plugins; using Microsoft.DocAsCode.Utility; [Export(typeof(IDocumentProcessor))] public class RtfDocumentProcessor : IDocumentProcessor { #region BuildSteps [ImportMany(nameof(RtfDocumentProcessor))] public IEnumerable<IDocumentBuildStep> BuildSteps { get; set; } #endregion #region Name public string Name => nameof(RtfDocumentProcessor); #endregion #region GetProcessingPriority public ProcessingPriority GetProcessingPriority(FileAndType file) { if (file.Type == DocumentType.Article && \".rtf\".Equals(Path.GetExtension(file.File), StringComparison.OrdinalIgnoreCase)) { return ProcessingPriority.Normal; } return ProcessingPriority.NotSupported; } #endregion #region Load public FileModel Load(FileAndType file, ImmutableDictionary<string, object> metadata) { var content = new Dictionary<string, object> { [\"conceptual\"] = File.ReadAllText(Path.Combine(file.BaseDir, file.File)), [\"type\"] = \"Conceptual\", [\"path\"] = file.File, }; return new FileModel(file, content); } #endregion #region Save public SaveResult Save(FileModel model) { return new SaveResult { DocumentType = \"Conceptual\", ModelFile = model.File, LinkToFiles = linkToFiles.ToImmutableArray(), }; } #endregion #region UpdateHref public void UpdateHref(FileModel model, IDocumentBuildContext context) { } #endregion } } Since we don't support hyperlink, keep UpdateHref method empty. // Copyright (c) Microsoft. All rights reserved. // Licensed under the MIT license. See LICENSE file in the project root for full license information. namespace RtfDocumentProcessors { using System; using System.Collections.Generic; using System.Collections.Immutable; using System.Composition; using System.IO; using Microsoft.DocAsCode.Plugins; using Microsoft.DocAsCode.Utility; [Export(typeof(IDocumentProcessor))] public class RtfDocumentProcessor : IDocumentProcessor { #region BuildSteps [ImportMany(nameof(RtfDocumentProcessor))] public IEnumerable<IDocumentBuildStep> BuildSteps { get; set; } #endregion #region Name public string Name => nameof(RtfDocumentProcessor); #endregion #region GetProcessingPriority public ProcessingPriority GetProcessingPriority(FileAndType file) { if (file.Type == DocumentType.Article && \".rtf\".Equals(Path.GetExtension(file.File), StringComparison.OrdinalIgnoreCase)) { return ProcessingPriority.Normal; } return ProcessingPriority.NotSupported; } #endregion #region Load public FileModel Load(FileAndType file, ImmutableDictionary<string, object> metadata) { var content = new Dictionary<string, object> { [\"conceptual\"] = File.ReadAllText(Path.Combine(file.BaseDir, file.File)), [\"type\"] = \"Conceptual\", [\"path\"] = file.File, }; return new FileModel(file, content); } #endregion #region Save public SaveResult Save(FileModel model) { return new SaveResult { DocumentType = \"Conceptual\", ModelFile = model.File, LinkToFiles = linkToFiles.ToImmutableArray(), }; } #endregion #region UpdateHref public void UpdateHref(FileModel model, IDocumentBuildContext context) { } #endregion } } View final RtfDocumentProcessor.cs Create a document build step The responsibility of build step Reconstruct documents via Prebuild method, e.g.: remove some document by certain rule. Transform document content via Build method, e.g.: transform rtf content to html content. Transform more content which require all document done via PostBuild method, e.g.: extract link text from the title of another document. About build order: For all documents in one processor always Prebuild -> Build -> Postbuild . For all documents in one processor always invoke Prebuild by BuildOrder . For each document in one processor always invoke Build by BuildOrder . For all documents in one processor always invoke Postbuild by BuildOrder . e.g.: document processor X have two step: A (with BuildOrder=1), B (with BuildOrder=2), when X handling documents [D1, D2, D3], the invoke order is following: A.Prebuild([D1, D2, D3]) returns [D1, D2, D3] B.Prebuild([D1, D2, D3]) returns [D1, D2, D3] Parallel( A.Build(D1) -> B.Build(D1), A.Build(D2) -> B.Build(D2), A.Build(D3) -> B.Build(D3) ) A.Postbuild([D1, D2, D3]) B.Postbuild([D1, D2, D3]) Create our RtfBuildStep: Create a new class (RtfBuildStep.cs), and declare it is a build step for RtfDocumentProcessor : [Export(nameof(RtfDocumentProcessor), typeof(IDocumentBuildStep))] public class RtfBuildStep : IDocumentBuildStep { // todo : implements IDocumentBuildStep. } In Build method, convert rtf to html: // Copyright (c) Microsoft. All rights reserved. // Licensed under the MIT license. See LICENSE file in the project root for full license information. namespace RtfDocumentProcessors { using System; using System.Collections.Generic; using System.Collections.Immutable; using System.Composition; using System.Threading.Tasks; using System.Threading.Tasks.Schedulers; using MarkupConverter; using Microsoft.DocAsCode.Plugins; [Export(nameof(RtfDocumentProcessor), typeof(IDocumentBuildStep))] public class RtfBuildStep : IDocumentBuildStep { #region Build private readonly TaskFactory _taskFactory = new TaskFactory(new StaTaskScheduler(1)); public void Build(FileModel model, IHostService host) { string content = (string)((Dictionary<string, object>)model.Content)[\"conceptual\"]; content = _taskFactory.StartNew(() => RtfToHtmlConverter.ConvertRtfToHtml(content)).Result; ((Dictionary<string, object>)model.Content)[\"conceptual\"] = content; } #endregion #region Others public int BuildOrder => 0; public string Name => nameof(RtfBuildStep); public void Postbuild(ImmutableList<FileModel> models, IHostService host) { } public IEnumerable<FileModel> Prebuild(ImmutableList<FileModel> models, IHostService host) { return models; } #endregion } } Implements other methods: // Copyright (c) Microsoft. All rights reserved. // Licensed under the MIT license. See LICENSE file in the project root for full license information. namespace RtfDocumentProcessors { using System; using System.Collections.Generic; using System.Collections.Immutable; using System.Composition; using System.Threading.Tasks; using System.Threading.Tasks.Schedulers; using MarkupConverter; using Microsoft.DocAsCode.Plugins; [Export(nameof(RtfDocumentProcessor), typeof(IDocumentBuildStep))] public class RtfBuildStep : IDocumentBuildStep { #region Build private readonly TaskFactory _taskFactory = new TaskFactory(new StaTaskScheduler(1)); public void Build(FileModel model, IHostService host) { string content = (string)((Dictionary<string, object>)model.Content)[\"conceptual\"]; content = _taskFactory.StartNew(() => RtfToHtmlConverter.ConvertRtfToHtml(content)).Result; ((Dictionary<string, object>)model.Content)[\"conceptual\"] = content; } #endregion #region Others public int BuildOrder => 0; public string Name => nameof(RtfBuildStep); public void Postbuild(ImmutableList<FileModel> models, IHostService host) { } public IEnumerable<FileModel> Prebuild(ImmutableList<FileModel> models, IHostService host) { return models; } #endregion } } View final RtfBuildStep.cs Enable plug-in Build our project. Copy the output dll files to: Global: the folder with name Plugins under DocFX.exe Non-global: the folder with name Plugins under a template folder, then run DocFX build command with parameter -t {template} . Hint : DocFX can merge templates, that means create a template only contains Plugins folder, then run command DocFX build with parameter -t {templateForRender},{templateForPlugins} . Build document Run command DocFX init , set source article with **.rtf . Run command DocFX build ."
  },
  "tutorial/advanced_walkthrough.html": {
    "href": "tutorial/advanced_walkthrough.html",
    "title": "&#128295; Walkthrough Advanced: Customize Your Website | DocFX website ",
    "keywords": "Improve this Doc 🔧 Walkthrough Advanced: Customize Your Website Note This topic hasn’t been written yet! You can track the status of this issue through our public GitHub issue tracker. Learn how you can contribute on GitHub. Add more details to an API using a markdown file Add cross reference Apply your own styles to the website Write your own plugins and your own template"
  },
  "tutorial/advanced_support_hyperlink.html": {
    "href": "tutorial/advanced_support_hyperlink.html",
    "title": "&#128295; Advanced: Support Hyperlink | DocFX website ",
    "keywords": "Improve this Doc 🔧 Advanced: Support Hyperlink In this topic, we will support hyperlink in rtf files. Create hyperlink in rtf file: Open foo.rtf by Word . Add a hyperlink in content Set the link target to an existed bar.rtf Save the document. About link For document, writer can write any valid hyperlink, and DocFX build need to update file links. What is file link: The hyperlink must be relative path and not rooted. valid: foo\\bar.rtf , ../foobar.rtf invalid: /foo.rtf , c:\\foo\\bar.rtf , http://foo.bar/ , mailto:foo@bar.foobar File must exist. Why update file link: The story is: In foo.rtf , has a file link to bar.rtf . In document build, bar.rtf generate a file with name bar.html . But in foo.rtf , the link target is still bar.rtf , and in output folder we cannot find this file, we will get a broken link. To resolve the broken link, we need to update the link target from bar.rtf to bar.html . File link is relative path, but we cannot track relative path easily. So we track normalized file path instead. What is normalized file path : Always from working folder (the folder contains docfx.json ), and we write it as ~/ . No ../ or ./ or // Replace \\ to / . No url encoding, must be same as it in file system. No anchor. Finally, a valid normalized file path looks like: ~/foo/bar.rtf . Pros Same form in different documents when target is same file. When file structure is: z:\\a\\b\\foo.rtf z:\\a\\b\\c\\bar.rtf z:\\a\\b\\c\\foobar.rtf Link target c/foobar.rtf in foo.rtf and link target foobar.rtf in bar.rtf is the same file. When working folder is z:\\a\\ , link target is always ~/b/c/foobar.rtf . Avoid difference writing for same file. For example, following hyperlinks target a same file: a/foo.rtf , ./a/foo.rtf , a/b/../foo.rtf , a//foo.rtf , a\\foo.rtf Cons folder with name ~ is not supported. Prepare Open the rtf plug-in library project in Visual Studio . Add nuget packages: for plug-in: Microsoft.DocAsCode.Utility Add framework assembly reference: System.Core , System.Web , System.Xml.Linq Update rtf document processor Following rules for hyperlink, add FixLink help method: // Copyright (c) Microsoft. All rights reserved. // Licensed under the MIT license. See LICENSE file in the project root for full license information. namespace RtfDocumentProcessors { using System; using System.Collections.Generic; using System.Collections.Immutable; using System.Composition; using System.IO; using System.Linq; using System.Web; using System.Xml.Linq; using Microsoft.DocAsCode.Plugins; using Microsoft.DocAsCode.Utility; [Export(typeof(IDocumentProcessor))] public class RtfDocumentProcessor : IDocumentProcessor { [ImportMany(nameof(RtfDocumentProcessor))] public IEnumerable<IDocumentBuildStep> BuildSteps { get; set; } public string Name => nameof(RtfDocumentProcessor); public ProcessingPriority GetProcessingPriority(FileAndType file) { if (file.Type == DocumentType.Article && \".rtf\".Equals(Path.GetExtension(file.File), StringComparison.OrdinalIgnoreCase)) { return ProcessingPriority.Normal; } return ProcessingPriority.NotSupported; } public FileModel Load(FileAndType file, ImmutableDictionary<string, object> metadata) { var content = new Dictionary<string, object> { [\"conceptual\"] = File.ReadAllText(Path.Combine(file.BaseDir, file.File)), [\"type\"] = \"Conceptual\", [\"path\"] = file.File, }; return new FileModel(file, content); } #region Save public SaveResult Save(FileModel model) { HashSet<string> linkToFiles = CollectLinksAndFixDocument(model); return new SaveResult { DocumentType = \"Conceptual\", ModelFile = model.File, LinkToFiles = linkToFiles.ToImmutableArray(), }; } #endregion #region CollectLinksAndFixDocument private static HashSet<string> CollectLinksAndFixDocument(FileModel model) { string content = (string)((Dictionary<string, object>)model.Content)[\"conceptual\"]; var doc = XDocument.Parse(content); var links = from attr in doc.Descendants().Attributes() where \"href\".Equals(attr.Name.LocalName, StringComparison.OrdinalIgnoreCase) || \"src\".Equals(attr.Name.LocalName, StringComparison.OrdinalIgnoreCase) select attr; var path = (RelativePath)model.File; var linkToFiles = new HashSet<string>(); foreach (var link in links) { FixLink(link, path, linkToFiles); } using (var sw = new StringWriter()) { doc.Save(sw); ((Dictionary<string, object>)model.Content)[\"conceptual\"] = sw.ToString(); } return linkToFiles; } #endregion #region FixLink private static void FixLink(XAttribute link, RelativePath filePath, HashSet<string> linkToFiles) { string linkFile; string anchor = null; if (PathUtility.IsRelativePath(link.Value)) { var index = link.Value.IndexOf('#'); if (index == -1) { linkFile = link.Value; } else if (index == 0) { return; } else { linkFile = link.Value.Remove(index); anchor = link.Value.Substring(index); } var path = filePath + (RelativePath)linkFile; var file = (string)path.GetPathFromWorkingFolder(); link.Value = file + anchor; linkToFiles.Add(HttpUtility.UrlDecode(file)); } } #endregion public void UpdateHref(FileModel model, IDocumentBuildContext context) { } } } RelativePath help us generate links correctly. Then add CollectLinksAndFixDocument method: // Copyright (c) Microsoft. All rights reserved. // Licensed under the MIT license. See LICENSE file in the project root for full license information. namespace RtfDocumentProcessors { using System; using System.Collections.Generic; using System.Collections.Immutable; using System.Composition; using System.IO; using System.Linq; using System.Web; using System.Xml.Linq; using Microsoft.DocAsCode.Plugins; using Microsoft.DocAsCode.Utility; [Export(typeof(IDocumentProcessor))] public class RtfDocumentProcessor : IDocumentProcessor { [ImportMany(nameof(RtfDocumentProcessor))] public IEnumerable<IDocumentBuildStep> BuildSteps { get; set; } public string Name => nameof(RtfDocumentProcessor); public ProcessingPriority GetProcessingPriority(FileAndType file) { if (file.Type == DocumentType.Article && \".rtf\".Equals(Path.GetExtension(file.File), StringComparison.OrdinalIgnoreCase)) { return ProcessingPriority.Normal; } return ProcessingPriority.NotSupported; } public FileModel Load(FileAndType file, ImmutableDictionary<string, object> metadata) { var content = new Dictionary<string, object> { [\"conceptual\"] = File.ReadAllText(Path.Combine(file.BaseDir, file.File)), [\"type\"] = \"Conceptual\", [\"path\"] = file.File, }; return new FileModel(file, content); } #region Save public SaveResult Save(FileModel model) { HashSet<string> linkToFiles = CollectLinksAndFixDocument(model); return new SaveResult { DocumentType = \"Conceptual\", ModelFile = model.File, LinkToFiles = linkToFiles.ToImmutableArray(), }; } #endregion #region CollectLinksAndFixDocument private static HashSet<string> CollectLinksAndFixDocument(FileModel model) { string content = (string)((Dictionary<string, object>)model.Content)[\"conceptual\"]; var doc = XDocument.Parse(content); var links = from attr in doc.Descendants().Attributes() where \"href\".Equals(attr.Name.LocalName, StringComparison.OrdinalIgnoreCase) || \"src\".Equals(attr.Name.LocalName, StringComparison.OrdinalIgnoreCase) select attr; var path = (RelativePath)model.File; var linkToFiles = new HashSet<string>(); foreach (var link in links) { FixLink(link, path, linkToFiles); } using (var sw = new StringWriter()) { doc.Save(sw); ((Dictionary<string, object>)model.Content)[\"conceptual\"] = sw.ToString(); } return linkToFiles; } #endregion #region FixLink private static void FixLink(XAttribute link, RelativePath filePath, HashSet<string> linkToFiles) { string linkFile; string anchor = null; if (PathUtility.IsRelativePath(link.Value)) { var index = link.Value.IndexOf('#'); if (index == -1) { linkFile = link.Value; } else if (index == 0) { return; } else { linkFile = link.Value.Remove(index); anchor = link.Value.Substring(index); } var path = filePath + (RelativePath)linkFile; var file = (string)path.GetPathFromWorkingFolder(); link.Value = file + anchor; linkToFiles.Add(HttpUtility.UrlDecode(file)); } } #endregion public void UpdateHref(FileModel model, IDocumentBuildContext context) { } } } Modify Save method with report links: // Copyright (c) Microsoft. All rights reserved. // Licensed under the MIT license. See LICENSE file in the project root for full license information. namespace RtfDocumentProcessors { using System; using System.Collections.Generic; using System.Collections.Immutable; using System.Composition; using System.IO; using System.Linq; using System.Web; using System.Xml.Linq; using Microsoft.DocAsCode.Plugins; using Microsoft.DocAsCode.Utility; [Export(typeof(IDocumentProcessor))] public class RtfDocumentProcessor : IDocumentProcessor { [ImportMany(nameof(RtfDocumentProcessor))] public IEnumerable<IDocumentBuildStep> BuildSteps { get; set; } public string Name => nameof(RtfDocumentProcessor); public ProcessingPriority GetProcessingPriority(FileAndType file) { if (file.Type == DocumentType.Article && \".rtf\".Equals(Path.GetExtension(file.File), StringComparison.OrdinalIgnoreCase)) { return ProcessingPriority.Normal; } return ProcessingPriority.NotSupported; } public FileModel Load(FileAndType file, ImmutableDictionary<string, object> metadata) { var content = new Dictionary<string, object> { [\"conceptual\"] = File.ReadAllText(Path.Combine(file.BaseDir, file.File)), [\"type\"] = \"Conceptual\", [\"path\"] = file.File, }; return new FileModel(file, content); } #region Save public SaveResult Save(FileModel model) { HashSet<string> linkToFiles = CollectLinksAndFixDocument(model); return new SaveResult { DocumentType = \"Conceptual\", ModelFile = model.File, LinkToFiles = linkToFiles.ToImmutableArray(), }; } #endregion #region CollectLinksAndFixDocument private static HashSet<string> CollectLinksAndFixDocument(FileModel model) { string content = (string)((Dictionary<string, object>)model.Content)[\"conceptual\"]; var doc = XDocument.Parse(content); var links = from attr in doc.Descendants().Attributes() where \"href\".Equals(attr.Name.LocalName, StringComparison.OrdinalIgnoreCase) || \"src\".Equals(attr.Name.LocalName, StringComparison.OrdinalIgnoreCase) select attr; var path = (RelativePath)model.File; var linkToFiles = new HashSet<string>(); foreach (var link in links) { FixLink(link, path, linkToFiles); } using (var sw = new StringWriter()) { doc.Save(sw); ((Dictionary<string, object>)model.Content)[\"conceptual\"] = sw.ToString(); } return linkToFiles; } #endregion #region FixLink private static void FixLink(XAttribute link, RelativePath filePath, HashSet<string> linkToFiles) { string linkFile; string anchor = null; if (PathUtility.IsRelativePath(link.Value)) { var index = link.Value.IndexOf('#'); if (index == -1) { linkFile = link.Value; } else if (index == 0) { return; } else { linkFile = link.Value.Remove(index); anchor = link.Value.Substring(index); } var path = filePath + (RelativePath)linkFile; var file = (string)path.GetPathFromWorkingFolder(); link.Value = file + anchor; linkToFiles.Add(HttpUtility.UrlDecode(file)); } } #endregion public void UpdateHref(FileModel model, IDocumentBuildContext context) { } } } <!-- todo : `Update Reference` is preserved for next version of plugin. --> View final RtfDocumentProcessor.cs Test and verify Build project. Copy dll to Plugins folder. Modify rtf file, create hyperlink, link to another rtf file, and save. Build with command DocFX build . Verify output html file."
  },
  "spec/metadata_format_spec.html": {
    "href": "spec/metadata_format_spec.html",
    "title": "Doc-as-Code: Metadata Format Specification | DocFX website ",
    "keywords": "Improve this Doc Doc-as-Code: Metadata Format Specification 0. Introduction 0.1 Goals and Non-goals The goal of this document is to define a general format to describe language metadata for programming languages. The language metadata is designed to be language agnostic and support multiple programming language in a single metadata file. The main user scenario for language metadata is to generate reference documentation, so this document will discuss how to optimize metadata format for documentation rendering. This document does NOT discuss details of metadata format implementation of a specific programming language. 0.2 Terminology The key words MUST , MUST NOT , REQUIRED , SHALL , SHALL NOT , SHOULD , SHOULD NOT , RECOMMENDED , MAY , and OPTIONAL in this document are to be interpreted as described in RFC 2119 . Words in italic imply they are terms defined in an earlier section of this document. 1. Items and Identifiers 1.1 Items Item is the basic unit of metadata format. From documentation perspective, each item represents a \"section\" in the reference documentation. This \"section\" is the minimum unit that you can cross reference to, or customize its layout and content. When implementing the metadata format for your own language, you can decide which elements are items. For example, usually namespaces, classes, methods are items. But you can also make smaller elements like parameters to be item if you want them to be referencable and customizable. Items can be hierarchical. One item can have other items as children. For example, in C#, namespaces and classes can have classes and/or methods as children. 1.2 Identifiers Each item has an identifier (ID) which is unique under it's parent. As we're targeting to support multiple languages, there is no restrictions of which characters are not allowed in identifiers. But to make identifier easier to be recognized and resolved in markdown, it's not RECOMMENDED to have whitespaces in identifiers. Markdown processor MAY implement some algorithm to tolerate whitespaces in handwritten markdown. (Leading and trailing spaces MUST be removed from identifier.) Identifier MUST be treated as case-sensitive when comparing equality. Each item has a unique identifier (UID) which is globally unique. A UID is defined as follows: If an item does not have parent, its UID is its ID. Otherwise its UID is the combination of the UID of its parent, a separator and the ID of the item itself. Valid separators are . , : , / and \\ . For example, for a class String under namespace System , its ID is String and UID is System.String . Given the above definition, an item 's UID MUST starts with the UID of its parent (and any of its ancestor) and ends with the ID of itself. This is useful to quickly determine whether an item is under another item . 1.3 Alias Identifier could be very long, which makes it difficult to write by hand in markdown. For example, it's easy to create a long ID in C# like this: Format(System.IFormatProvider,System.String,System.Object,System.Object) We can create short alias for items so that they can be referenced easily. Alias is same as ID , except: It doesn't have to be unique. One item can have multiple aliases. It's not RECOMMENDED to create alias that has nothing to do with item's ID . Usually an item 's alias is part of its ID so it's easy to recognize and memorize. For example, for the case above, we usually create an alias Format() . We can easily get a \"global\" alias for an item by replacing the ID part of its UID with its alias. 2. File Structure 2.1 File Format You can use any file format that can represent structural data to store metadata. But we recommend to use YAML or JSON . In this document, we use YAML in examples, but all YAML can be converted to JSON easily. 2.2 File Layout A metadata file consists of two parts, an \"item\" section and a \"reference\" section. Each section is a list of objects and each object is a key-value pair (hereafter referred to as \"property\") list that represents an item . 2.3 Item Section Though items can be hierarchical, they are flat in item section. Instead, each item has an \"children\" property indicates its children and a \"parent\" property indicates its parent. An item object has some basic properties: Property Description uid REQUIRED . The unique identifier of the item . children OPTIONAL . A list of UIDs of the item 's children. Can be omitted if there is no children. parent OPTIONAL . The UID of the item 's parent. If omitted, metadata parser will try to figure out its parent from the children information of other items within the same file. Here is an example of a YAML format metadata file for C# Object class: items: - uid: System.Object parent: System children: - System.Object.Object() - System.Object.Equals(System.Object) - System.Object.Equals(System.Object,System.Object) - System.Object.Finalize() - System.Object.GetHashCode() - System.Object.GetType() - System.Object.MemberwiseClone() - System.Object.ReferenceEquals() - System.Object.ToString() - uid: System.Object.Object() parent: System.Object - uid: System.Object.Equals(System.Object) parent: System.Object - uid: System.Object.Equals(System.Object,System.Object) parent: System.Object - uid: System.Object.Finalize() parent: System.Object - uid: System.Object.GetHashCode() parent: System.Object - uid: System.Object.GetType() parent: System.Object - uid: System.Object.MemberwiseClone() parent: System.Object - uid: System.Object.ReferenceEquals() parent: System.Object - uid: System.Object.ToString() parent: System.Object references: ... Items SHOULD be organized based on how they will be displayed in documentation. For example, if you want all members of a class be displayed in a single page, put all members in a single metadata file. 2.3 Item Object In additional to the properties listed in last section, item object also has some OPTIONAL properties : Property Description id The identifier of the item . alias A list of aliases of the item . name The display name of the item . fullName The full display name of the item . In programming languages, it's usually the full qualified name. type The type of the item , like class, method, etc. url If it's a relative url, it's another metadata file that defines the item . If it's an absolute url, it means the item is coming from an external library, and the url is the documentation page of this item . If omitted, the url is the location of the current file. source The source code information of the item . It's an object that contains following properties : 1. repo: the remote git repository of the source code. 2. branch: the branch of the source code. 3. revision: the git revision of the source code. 4. path: the path to the source code file where the item is defined. 5. startLine: the start line of the item definition. 6. endLine: the end line of the item definition. Here is an example of a C# Dictionary class: - uid: System.Collections.Generic.Dictionary`2 id: Dictionary`2 alias: - Dictionary parent: System.Collections.Generic name: Dictionary<TKey, TValue> fullName: System.Collections.Generic.Dictionary<TKey, TValue> type: class url: System.Collections.Generic.Dictionary`2.yml source: repo: https://github.com/dotnet/netfx.git branch: master revision: 5ed47001acfb284a301260271f7d36d2bb014432 path: src/system/collections/generic/dictionary.cs startLine: 1 endLine: 100 2.4 Custom Properties Besides the predefined properties , item can have its own properties . One restriction is property name MUST NOT contains dots, as dot in property name will have special meaning (described in later section). 2.5 Reference Section Reference section also contains a list of items , these items serve as the references by items in item section and won't show up in documentation. Also reference item doesn't need to have full properties , it just contains necessary information needed by its referrer, for example, name or url. In metadata file, all items MUST be referenced by UID . It's RECOMMENDED to include all referenced items in reference section. This makes the file self contained and easy to render at runtime. Many programming languages has the concept of \"template instantiation\". For example, in C#, you can create a new type List<int> from List<T> with argument int . You can create a reference for \"template instances\". For example, for a class inherited from List<int> : items: - uid: NumberList inherits: - System.Collections.Generic.List<System.Int32> references: - uid: System.Collections.Generic.List`1<System.Int32> link: @\"System.Collections.Generic.List`1\"<@\"System.Int32\"> - uid: System.Collections.Generic.List`1 name: List url: system.collections.generic.list`1.yml - uid: System.Int32 name: int url: system.int32.yml 2.6 Multiple Language Support There may be a need that an item supports multiple languages. For example, in .NET, a class can be used in C#, VB, managed C++ and F#. Different languages may have differences in properties . For example, a list of string is displayed as List<string> in C#, while List(Of string) in VB. To support this scenario, we introduce a concept of language context to allow define different property values in different languages. If a property name is in the form of property_name.language_name , it defines the value of property_name under language_name . For example: - uid: System.Collections.Generic.Dictionary`2 name.csharp: Dictionary<TKey, TValue> name.vb: Dictionary(Of TKey, TValue) This means the name of dictionary is Dictionary<TKey, TValue> in C# and Dictionary(Of TKey, TValue) in VB. The following properties SHALL NOT be overridden in language context: uid, id, alias, children, parent. 3. Work with Metadata in Markdown 3.1 YAML Metadata Section In markdown file, you can also define items using the same metadata syntax. The metadata definition MUST be in YAML format and enclosed by triple-dash lines ( --- ). Here is an example: --- uid: System.String summary: String class --- This is a **string** class. You can multiple YAML sections inside a single markdown file, but in a single YAML section, there MUST be only one item . The YAML metadata section does not have to contain all properties . The only property that MUST appear is \"uid\", which is used to match the same item in metadata file. The most common scenario for using YAML section is to specify which item the markdown doc belongs to. But you can also overwrite item property by defining one with the same name in YAML section. In the above example, the property \"summary\" will overwrite the same one in metadata. Same as language context, the following properties SHALL NOT be overridden: uid, id, alias, children, parent. You SHALL NOT define new item in markdown. 3.2 Reference Items in Markdown To cross reference an item , you can use URI with xref scheme. You can either use standard link or automatic link with the above URI. For example, to cross reference System.String : [System.String](xref:System.String) <xref:System.String> Since item reference is a URI, special characters (like # , ? ) MUST be encoded . We also introduce a shorthand markdown syntax to cross reference easily: If a string starts with @ , and followed by a string enclosed by quotes ' or double quotes \" , it will be treated as an item reference. The string inside \"\" or '' is the UID of the item . Here is one example: @\"System.String\" Markdown processor MAY implement some algorithm to allow omit curly braces if ID is simple enough. For example, For reference like @\"int\" , we may also want to allow @int . When rendering reference in markdown, they will be expanded into a link with the item 's name as link title. You can also customize the link title using the standard syntax of markdown: [Dictionary](xref:System.Collections.Generic.Dictionary`2)<[String](xref:System.String), [String](xref:System.String)> Will be rendered to: [Dictionary](xref:System.Collections.Generic.Dictionary`2)< String , String > Besides UID , we also allow reference item using ID and alias , in markdown processor, the following algorithm SHOULD be implemented to resolve references: Check whether the reference matches any identifier of current item 's children. Check whether the reference matches any alias of current item 's children. Check whether the reference matches any identifier of current item 's silbings. Check whether the reference matches any alias of current item 's silbings. Check whether the reference matches a UID . Check whether the reference matches a global alias ."
  },
  "spec/metadata_dotnet_spec.html": {
    "href": "spec/metadata_dotnet_spec.html",
    "title": "Doc-as-Code: Metadata Format for .NET Languages | DocFX website ",
    "keywords": "Improve this Doc Doc-as-Code: Metadata Format for .NET Languages 0. Introduction 0.1 Goal and Non-goals 0.2 Terminology 1. Items The following .NET elements are defined as items in metadata: Namespaces Types, including class, struct, interface, enum, delegate Type members, including field, property, method, event Other elements like parameters, generic parameters are not standalone items , they're part of other items . 2. Identifiers 2.1 Unique Identifiers For any item in .NET languages, its UID is defined by concatenating its parent's UID and its own ID by dot. The ID for each kind of item is defined in following sections. The basic prinicple here is to make ID format close to source code and easy for human reading. UID is similar with document comment id, document comment id is started with type prefix, e.g. T: , or M: , but UID do not. There MUST NOT be any whitespace between method name, parentheses, parameters, and commas. 2.2 Spec Identifiers Spec identifier is another form of UID . It can spec a generic type with type arguments, e.g. for parameters, return types or inheritances, and these UID s are unique in one yaml file. It is a simple modified Unique Identifiers, when it contains generic type arguments, it will use {Name} instead `N . For type parameter, it will be {Name} . And it also supports array and pointer. Example 2.2 Spec Identifier C#: namespace Foo { public class Bar { public unsafe List<String> FooBar<TArg>(int[] arg1, byte* arg2, TArg arg3, List<TArg[]> arg4) { return null; } } } YAML: references: - uid: System.Collections.Generic.List{System.String} - uid: System.Int32[] - uid: System.Byte* - uid: {TArg} - uid: System.Collections.Generic.List{{TArg}[]} 3. Namespaces For all namespaces, they are flat, e.i. namespaces do not have the parent namespace. So for any namespace, ID is always same with its UID . Example 3 Namespace C#: namespace System.IO { } YAML: uid: System.IO id: System.IO name: System.IO fullName: System.IO The children of namespace are all the visible types in the namespace. 4. Types Types include classes, structs, interfaces, enums, and delegates. They have following properties: summary, remarks, syntax, namespace, assemblies, inheritance. The parent of types are namespaces. The children of types are members. ID ID for a type is also its name . Example 4 Type C#: namespace System { public class String {} public struct Boolean {} public interface IComparable {} public enum ConsoleColor {} public delegate void Action(); } YAML: - uid: System.String id: String name.csharp: String fullName.csharp: System.String - uid: System.Boolean id: Boolean name.csharp: Boolean fullName.csharp: System.String - uid: System.IComparable id: IComparable name.csharp: IComparable fullName.csharp: System.IComparable - uid: System.ConsoleColor id: ConsoleColor name.csharp: ConsoleColor fullName.csharp: System.ConsoleColor - uid: System.Action id: Action name.csharp: Action fullName.csharp: System.Action 4.1 ID for Nested Types For nested types, ID is defined by concatenating the ID of all its containing types and the ID of itself, separated by dot. The parent type of a nested type is its containing namespace, rather than its containing type. Example 4.1 Nested type C#: namespace System { public class Environment { public enum SpecialFolder {} } } YAML: uid: System.Environment.SpecialFolder id: Environment.SpecialFolder name.csharp: Environment.SpecialFolder fullName.csharp: System.Environment.SpecialFolder 4.2 Inheritance Only class contains inheritance, the inheritance is a list of spec id. Example 4.2 Inheritance C#: namespace System.Collections.Generic { public class KeyedByTypeCollection<TItem> : KeyedCollection<Type, TItem> { } } YAML: uid : System.Collections.Generic.KeyedByTypeCollection`1 inheritance: - System.Collections.ObjectModel.KeyedCollection{System.Type,{TItem}} - System.Collections.ObjectModel.Collection{{TItem}} - System.Object 4.3 Syntax The syntax part for type contains special languages declaration, and descriptions of type parameters . For delegate, it also contains descriptions of paramters and return type. 5. Members Members include fields, properties, methods, events. They have following properties: summary, remarks, exceptions, syntax. The parent of memebers are types. All members do not have any children. All parameter types or return types are spec id. 5.1 Constructors The ID of a constructor is defined by #ctor , followed by the list of the UIDs of its parameter types: When a constructor does not have parameter, its ID MUST NOT end with parentheses. The syntax part for constructors contains special languages declaration, and descriptions of paramters. Example 5.1 Constructor C#: namespace System { public sealed class String { public String(); public String(char[] chars); } } YAML: - uid: System.String.#ctor id: #ctor name.csharp: String() fullName.csharp: System.String.String() - uid: System.String.#ctor(System.Char[]) id: #ctor(System.Char[]) name.csharp: String(Char[]) fullName.csharp: System.String.String(System.Char[]) 5.2 Methods The ID of a method are defined by its name, followed by the list of the UIDs of its parameter types: method_name(param1,param2,...) When a method does not have parameter, its ID MUST end with parentheses. The syntax part for method contains special languages declaration, and descriptions of type parameters for generic method, descriptions of paramters and return type. Example 5.2 Method C#: namespace System { public sealed class String { public String ToString(); public String ToString(IFormatProvider provider); } } YAML: - uid: System.String.ToString id: ToString name.csharp: ToString() fullName.csharp: System.String.ToString() - uid: System.String.ToString(System.IFormatProvider) id: ToString(System.IFormatProvider) name.csharp: ToString(IFormatProvider) fullName.csharp: System.String.ToString(System.IFormatProvider) 5.2.1 Explicit Interface Implementation The ID of an explicit interface implementation (EII) member MUST be prefixed by the UID of the interface it implements and replace . to # . Example 2.6 Explicit interface implementation (EII) C#: namespace System { using System.Collections; public sealed class String : IEnumerable { IEnumerator IEnumerable.GetEnumerator(); } } YAML: - uid: \"System.String.System#Collections#IEnumerable#GetEnumerator\" id: \"System#Collections#IEnumerable#GetEnumerator\" name.csharp: IEnumerable.GetEnumerator() fullName.csharp: System.String.System.Collections.IEnumerable.GetEnumerator() 5.4 Operator Overloads The ids of operator overloads are same with the metadata name, e.g. op_Equality . The names of operator overloads are similar to msdn, just remove op_ from the metadata name of the method. For instance, the name of the equals ( == ) operator is Equality . Type conversion operator can be considered as a special operator whose name is the UID of the target type, with one parameter of the source type. For example, an operator that converts from string to int should be Explicit(System.String to System.Int32) . The syntax part for methods contains special languages declaration, descriptions of paramters and return type. Example 5.4 Operator overload namespace System { public struct Decimal { public static implicit operator Decimal(Char value); } public sealed class String { public static bool operator ==(String a, String b); } } YAML: - uid: System.Decimal.op_Implicit(System.Char to System.Decimal) id: op_Implicit(System.Char to System.Decimal) name.csharp: Implicit(Char to Decimal) fullName.csharp: System.Decimal.Implicit(System.Char to System.Decimal) - uid: System.String.op_Equality(System.String,System.String) id: op_Equality(System.String,System.String) name.csharp: Equality(String,String) fullName.csharp: System.String.Equality(System.String,System.String) Please check overloadable operators for all overloadable operators. 5.5 Field, Property or Event The ID of field, property or event is its name. The syntax part for field contains special languages declaration, descriptions of field type. For property, it contains special languages declaration, descriptions of paramters and return type. For event, it contains special languages declaration, descriptions of event handler type. Example 5.5 Field, Property and Event C#: namespace System { public sealed class String { public static readonly String Empty; public int Length { get; } } public static class Console { public static event ConsoleCancelEventHandler CancelKeyPress; } } YAML: - uid: System.String.Empty id: Empty name.csharp: Empty fullName.csharp: System.String.Empty - uid: System.String.Length id: Length name.csharp: Length fullName.csharp: System.String.Length - uid: System.Console.CancelKeyPress id: CancelKeyPress name.csharp: CancelKeyPress fullName.csharp: System.Console.CancelKeyPress 5.6 Indexer Indexer operator's name is metadata name, by default, it is Item , with brackets and parameters. Example 5.6 Indexer namespace System.Collections { public interface IList { object this[int index] { get; set; } } } YAML: - uid: \"System.Collections.IList.Item[System.Int32]\" id: \"Item[System.Int32]\" name.csharp: Item[Int32] fullName.csharp: System.Collections.IList.Item[System.Int32] 6. Generics The ID of a generic type is its name with followed by `n , n the count of generic type count, same as the rule for document comment id. For example, Dictionary`2 . The ID of a generic method uses postfix ``n , n is the count of in method parameters, for example, System.Tuple.Create``1(``0) . Example 2.7 Generic namespace System { public static class Tuple { public static Tuple<T1> Create<T1>(T1 item1); public static Tuple<T1, T2> Create<T1, T2>(T1 item1, T2 item2); } } YAML: - uid: System.Tuple.Create``1(``0) id: Create``1(``0) name.csharp: Create<T1>(T1) fullName.csharp: System.Tuple.Create<T1>(T1) - uid: System.Tuple.Create``2(``0,``1) id: Create``2(``0,``1) name.csharp: Create<T1,T2>(T1,T2) fullName.csharp: System.Tuple.Create<T1,T2>(T1,T2) 7. Reference The reference contains following member: name, fullName, summary, isExternal, href, and more. The UID in reference can be a Spec Id , then it contains one more member: spec. The spec in reference is very like a list of lightweight references, it describes how to compose the gerenic type in some special language. Example 7 spec for references YAML: references: - uid: System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Int32}} name.csharp: Dictionary<String, List<Int32>> fullName.csharp: System.Collections.Generic.Dictionary<System.String, System.Collections.Generic.List<System.Int32>> spec.csharp: - uid: System.Collections.Generic.Dictionary`2 name: Dictionary fullName: System.Collections.Generic.Dictionary isExternal: true - name: < fullName: < - uid: System.String name: String fullName: System.String isExternal: true - name: ', ' fullName: ', ' - uid: System.Collections.Generic.List`1 name: List fullName: System.Collections.Generic.List isExternal: true - name: < fullName: < - uid: System.Int32 name: Int32 fullName: System.Int32 isExternal: true - name: '>' fullName: '>' - name: '>' fullName: '>'"
  },
  "spec/docfx_incremental.html": {
    "href": "spec/docfx_incremental.html",
    "title": "Doc-as-code: DocFx.exe Incremental Build Specification | DocFX website ",
    "keywords": "Improve this Doc Doc-as-code: DocFx.exe Incremental Build Specification This documentation describes the implementation of incrementally extracting metadata from source. Currently we are using Roslyn to compile and analyse source code on the fly. When input sources are large, it may take minutes to load and process the files. To speed up the extraction, previous extracted details are saved to cache for further reference. There are two level caches in current implementation. First one is called Application Level cache, and the other one is Project level cache. Application level cache is saved in file %LocalAppData%/xdoc/cache . For Project level cache, a. If input sources are supported project files, e.g. .csproj or .vbproj files, Project level cache is located in file obj/xdoc/.cache under the same folder of the project file. b. If input sources are supported source code files, e.g. .cs or .vb files, Project level cache is located in file obj/xdoc/.cache under the same folder of the alphabetically first source code file. The cache file contains key-value pairs saved in JSON format. The key is the normalized input source code files, and the data structure for the value is as below: Property Description TriggeredUTCTime The UTC time when the action is triggered CompletedUTCTime The UTC time when the action is completed OutputFolder The output folder for the extracted result RelativeOutputFiles The paths of the extracted results related to the OutputFolder CheckSum The MD5 checksum calculated for all the extracted results Detailed Steps are described below: For each input solution/project/source files, get most latest LastModifiedTime . a. For solution, get LastModifiedTime for the solution file, and containing projects b. For project, get LastModifiedTime for the project file, project references, assembly references and containing documents. c. For source files, get LastModifiedTime for the files Normalize project list, check if Application level cache for these project list exists. Compare TriggeredUTCTime with the LastModifiedTime fetched in #1, and check if checksum remains unchanged for output files. If is, copy result files to output folder. Otherwise, continue to #3. For each supported solution/project/source code files, Step 1 . Check if Project level cache exists. If not, go to Step 4 . Step 2 . Compare TriggeredUTCTime with the LastModifiedTime fetched in #1, and check if checksum remains unchanged for output files. If not, go to Step 3 . Step 3 . Generate YAML metadata for current project and save to Project level cache. Read YAML metadata for each project, and merge with others following rules below: Rule 1 . For namespace , if uid equals, append . Rule 2 . For other type, if uid equals, override . Save result, and update *Application level cache."
  },
  "spec/docfx_flavored_markdown.html": {
    "href": "spec/docfx_flavored_markdown.html",
    "title": "Docfx Flavored Markdown | DocFX website ",
    "keywords": "Improve this Doc Docfx Flavored Markdown Docfx supports \"Docfx Flavored Markdown,\" or DFM. It is 100% compatiable with Github Flavored Markdown , and adds some additional functionality, including cross reference and file inclusion. Yaml Header Yaml header in DFM is considered as the metadata for the markdown file. It will be transformed to yamlheader tag when processed. Yaml header MUST be the first thing in the file and MUST take the form of valid YAML set between triple-dashed lines. Here is a basic example: --- uid: A.md title: A --- Cross Reference Cross reference means referencing to other files, including Conceptual Documentation and API Documentation , using uid value for the file. What is uid value for a file? For Conceptual Documentation Add a yaml header to the Conceptual Documentation to specify its uid value. ```md --- uid: uidForTheFile --- This is a conceptual file with `uid` specified. ``` For API Documentation Generally the value of uid can be found in the YAML file generated by running docfx metadata . For API in DOTNET world, 2.Identifiers in Metadata Dotnet Spec describes the way to generate id for API in dotnet language. Syntax for cross reference Link style: [name](xref:uid \"title\") If there is a dfm.md file with uid as dfm : ```md --- uid: dfm --- # DocfxFlavoredMarkdown This is dfm.md ``` We can quickly reference to this file `dfm.md` in another markdown file using: ```md [DFM](xref:dfm \"This is a dfm\") ``` It will be transformed to `<a href=\"dfm.md\" title=\"This is a dfm\">DFM</a>` in the final html file. If `name` empty, `docfx` uses the title of `dfm.md` as the default name, e.g. `[](xref:dfm)` will be transformed to `<a href=\"dfm.md\">DocfxFlavoredMarkdown</a>`. Autolink style: <xref:uid> Still take dfm.md as an example, <xref:dfm> will be transformed to <a href=\"dfm.md\">DocfxFlavoredMarkdown</a> . The title of dfm.md is taken as the display name. Shortcut: @uid Syntax for @uid is as below: If content after @ is wrapped by ' or \" , it contains any character including white space If content after @ is not wrapped by ' or \" , it must start with word character a-z or A-Z , and it ends when: line ends meets whitespaces line ends with . , , , ; , : , ! , ? and ~ meets 2 times or more . , , , ; , : , ! , ? and ~ So @dfm will also be transformed to <a href=\"dfm.md\">DocfxFlavoredMarkdown</a> . The title of dfm.md is taken as the display name. File Inclusion DFM adds syntax to include other file parts into current file, the included file will also be considered as in DFM syntax. NOTE that YAML header is NOT supported when the file is an inclusion. There are two types of file inclusion: inline one and block one, as similar to inline code span and block code. Inline Inline file inclusion is in the following syntax, in which <title> stands for the title of the included file, and <filepath> stands for the file path of the included file, file path can be either absolute file path or relative file path. <filepath> can be wrapped by ' or \" . NOTE that for inline file inclusion, the file included will be considered as containing only inline tags, e.g. ###header inside the file will not be transformed as <h3> is a block tag, while [a](b) will be transformed to <a href='b'>a</a> as <a> is an inline tag. ...Other inline contents... [!include[<title>](<filepath>)] Block Block file inclusion must be in a single line and with no prefix characters before the start [ . Content inside the included file will be transformed using DFM syntax. [!include[<title>](<filepath>)] Section definition User may need to define section. Mostly used for code table. Give an example below. > [!div class=\"tabbedCodeSnippets\" data-resources=\"OutlookServices.Calendar\"] > ```cs > <cs code text> > ``` > ```javascript > <js code text> > ``` The above blockquote markdown text will transfromed to section html such as following shows: <div class=\"tabbedCodeSnippets\" data-resources=\"OutlookServices.Calendar\"> <pre><code>cs code text</code></pre> <pre><code>js code text</code></pre> </div> CODE SNIPPET Allow you to insert code with code language specified. The content of specified code path will be expanded. [!code-<language>[<name>](<codepath><queryoption><queryoptionvalue> \"<title>\")] <language> can be made up of any number of character and '-'. However, the recommend value should follow Highlight.js language names and aliases . <codepath> is the relative path in file system which indicates the code snippet file that you want to expand. <queryoption> and <queryoptionvalue> are used together to retrieve part of the code snippet file in the line range or tag name way. We have 2 query string options to represent these 2 ways: # : #L{startlinenumber}-L{endlinenumber} (line range) or #L{tagname} (tag name) ? : ?start={startlinenumber}&end={endlinenumber} (line range) or ?{name}={tagname} (tag name) <title> can be omitted. Code Snippet Sample [!code-csharp[Main](Program.cs)] [!code[Main](Program.cs#L12-L16 \"This is source file\")] [!code-vb[Main](../Application/Program.vb#testsnippet \"This is source file\")] [!code[Main](index.xml?start=5&end=9)] [!code-javascript[Main](../jquery.js?name=testsnippet)] Tag Name Representation in Code Snippet Source File DFM currently only supports following <language> values to be able to retrieve by tag name: C#: cs, csharp VB: vb, vbnet C++: cpp, c++ F#: fsharp XML: xml Html: html SQL: sql Javascript: javascript Note(Warning/Tip/Important) Using specific syntax inside block quote to indicate the following content is Note. > [!NOTE] > <note content> > [!WARNING] > <warning content> The above content will be transformed to the following html. <div class=\"NOTE\"> <h5>NOTE</h5> <p>note content</p> </div> <div class=\"WARNING\"> <h5>WARNING</h5> <p>WARNING content</p> </div>"
  },
  "spec/docfx_design_spec.html": {
    "href": "spec/docfx_design_spec.html",
    "title": "docfx Design Spec | DocFX website ",
    "keywords": "Improve this Doc docfx Design Spec 0. Terms Term Description DFM Docfx Flavored Markdown API The api generated from source code Overwrite Files The files with YAML header used to override YAML files when uid matches 1. Scenarios docfx should support the following scenarios: Source Code => Website Conceputal => Website YAML files => Website 2. Architecture 3. Feature List Support Docfx Flavored Markdown able to parse TOC.json/TOC.yml/TOC.md Custom template naming: {type}.{extension}.tmpl under folder {templateName} 4. Open Issues should we support other conceptual file format, e.g. RST? ==> How to parse? How to you know what link to replace to html, what not? ==>"
  },
  "guideline/engineering_guidelines.html": {
    "href": "guideline/engineering_guidelines.html",
    "title": "Engineering Guidelines | DocFX website ",
    "keywords": "Improve this Doc Engineering Guidelines Basics Copyright header and license notice All source code files require the following exact header according to its language (please do not make any changes to it). extension: .cs // Copyright (c) Microsoft. All rights reserved. // Licensed under the MIT license. See LICENSE file in the project root for full license information. extension: .js // Copyright (c) Microsoft. All rights reserved. Licensed under the MIT license. See LICENSE file in the project root for full license information. extension: .css /* Copyright (c) Microsoft Corporation. All Rights Reserved. Licensed under the MIT License. See License.txt in the project root for license information. */ extension: .tmpl , .tmpl.partial {{!Copyright (c) Microsoft. All rights reserved. Licensed under the MIT license. See LICENSE file in the project root for full license information.}} External dependencies This refers to dependencies on projects (i.e. NuGet packages) outside of the docfx repo, and especially outside of Microsoft. Adding new dependencies require additional approval. Current approved dependencies are: Newtonsoft.Json Jint HtmlAgilityPack Nustache YamlDotNet Code reviews and checkins To help ensure that only the highest quality code makes its way into the project, please submit all your code changes to GitHub as PRs. This includes runtime code changes, unit test updates, and deployment scripts. For example, sending a PR for just an update to a unit test might seem like a waste of time but the unit tests are just as important as the product code and as such, reviewing changes to them is also just as important. The advantages are numerous: improving code quality, more visibility on changes and their potential impact, avoiding duplication of effort, and creating general awareness of progress being made in various areas. In general a PR should be signed off(using the :+1: emoticon) by the Owner of that code. To commit the PR to the repo do not use the Big Green Button . Instead, do a typical push that you would use with Git (e.g. local pull, rebase, merge, push). Source Code Management Branch strategy In general: master has the code for the latest release on NuGet.org. (e.g. 1.0.0 , 1.1.0 ) dev has the code that is being worked on but not yet released. This is the branch into which devs normally submit pull requests and merge changes into. We run daily CI towards dev branch and generate pre-release nuget package, e.g. 1.0.1-alpha-9-abcdefsd . Solution and project folder structure and naming Solution files go in the repo root. The default entry point is All.sln . Every project also needs a project.json and a matching .xproj file. This project.json is the source of truth for a project's dependencies and configuration options. Solution need to contain solution folders that match the physical folder ( src , test , tools , etc.). Assembly naming pattern The general naming pattern is Microsoft.DocAsCode.<area>.<subarea> . Unit tests We use xUnit.net for all unit testing. Coding Standards Please refer to C# Coding standards for detailed guideline for C# coding standards. TODO Template Coding standards TODO Template Preprocess JS Coding standards"
  },
  "guideline/csharp_coding_standards.html": {
    "href": "guideline/csharp_coding_standards.html",
    "title": "C# Coding Standards | DocFX website ",
    "keywords": "Improve this Doc C# Coding Standards Introduction The coding standard will be used in conjunction with customized version of StyleCop and FxCop [ TODO ] during both development and build process. This will help ensure that the standard is followed by all developers on the team in a consistent manner. \"Any fool can write code that a computer can understand. Good programmers write code that humans understand\". Martin Fowler. Refactoring: Improving the design of existing code. Purpose The aim of this section is to define a set of C# coding standards to be used by DocFX team to guarantee maximum legibility, reliability, re-usability and homogeneity of our code. Each section is marked Mandatory or Recommended . Mandatory sections, will be enforced during code reviews as well as tools like StyleCop and FxCop , and code will not be considered complete until it is compliant. Scope This section contains general C# coding standards which can be applied to any type of application developed in C#, based on Framework Design Guidelines . It does not pretend to be a tutorial on C#. It only includes a set of limitations and recommendations focused on clarifying the development. Tools Resharper is a great 3rd party code cleanup and style tool. StyleCop analyzes C# srouce code to enforce a set of style and consistency rules and has been integrated into many 3rd party development tools such as Resharper. FxCop is an application that analyzes managed code assemblies (code that targets the .NET Framework common language runtime) and reports information about the assemblies, such as possible design, localization, performance, and security improvements. Highlights of Coding Standards This section is not intended to give a summary of all the coding standards that enabled by our customized StyleCop, but to give a highlight of some rules one will possibly meet in daily coding life. It also provides some recommended however not mandatory(which means not enabled in StyleCop) coding standards. File Layout (Recommended) Only one public class is allowed per file. The file name is derived from the class name. Class : Observer Filename: Observer.cs Class Definition Order (Mandatory) The class definition contains class members in the following order, from less restricted scope (public) to more restrictive (private): ~ Nested types, e.g. classes, enum, struct, etc. ~ Non-private nested types are not allowed. Field members, e.g. member variables, const, etc. Member functions Constructors Finalizer (Do not use unless absolutely necessary) Methods (Properties, Events, Operations, Overridables, Static) Private nested types Naming (Mandatory) DO use plural form for namespaces DO use PascalCasing for all public member, type, and namespace names consisting of multiple words. PropertyDescriptor HtmlTag IOStream NOTE : A special case is made for two-letter acronyms in which both letters are capitalized, e.g. IOStream DO use camelCasing for parameter names. propertyDescriptor htmlTag ioStream DO start with underscore for private fields private readonly Guid _userId = Guid.NewGuid(); DO start static readonly fields, constants with capitalized case private static readonly IEntityAccessor EntityAccessor = null; private const string MetadataName = \"MetadataName\"; DO NOT capitalize each word in so-called closed-form compound words . DO have \"Async\" explicitly in the Async method name to notice people how to use it properly Formatting (Mandatory) DO use spaces over tabs, and always show all spaces/tabs in IDE Tips Visual Studio > TOOLS > Options > Text Editor > C# > Tabs > Insert spaces (Tab size: 4) Visual Studio > Edit > Advanced > View White Space DO add using inside namespace declaration namespace Microsoft.Content.Build.BuildWorker.UnitTest { using System; } DO add a space when: for (var i = 0; i < 1; i++) if (a == b) Performace Consideration DO use sealed for private classes if it is not to be inherited. DO add readonly to fields if they are not tend to be changed. DO use static methods if it is not instance relavant. DO use RegexOptions.Compiled for readonly Regex . Cross-platform coding Our code should supports multiple operating systems. Don't assume we only run (and develop) on Windows. Code should be sensitvie to the differences between OS's. Here are some specifics to consider. DO use Enviroment.NewLine instead of hard-coding the line break instead of \\r\\n , as Windows uses \\r\\n and OSX/Linux uses \\n . Note Be aware that thes line-endings may cause problems in code when using @\"\" text blocks with line breaks. DO Use Path.Combine() or Path.DirectorySeparatorChar to separate directories. If this is not possible (such as in scripting), use a forward slash / . Windows is more forgiving than Linux in this regard. Unit tests and functional tests Assembly naming The unit tests for the Microsoft.Foo assembly live in the Microsoft.Foo.Tests assembly. The functional tests for the Microsoft.Foo assmebly live in the Microsoft.Foo.FunctionalTests assmebly. In general there should be exactly one unit test assebmly for each product runtime assembly. In general there should be one functional test assembly per repo. Exceptions can be made for both. Unit test class naming Test class names end with Test and live in the same namespace as the class being tested. For example, the unit tests for the Microsoft.Foo.Boo class would be in a Microsoft.Foo.Boo class in the test assembly. Unit test method naming Unit test method names must be descriptive about what is being tested, under what conditions, and what the expectations are . Pascal casing and underscores can be used to improve readability. The following test names are correct: PublicApiArgumentsShouldHaveNotNullAnnotation Public_api_arguments_should_have_not_null_annotation The following test names are incorrect: Test1 Constructor FormatString GetData Unit test structure The contents of every unit test should be split into three distinct stages, optionally separated by these comments: // Arrange // Act // Assert The crucial thing here is the Act stage is exactly one statement. That one statement is nothing more than a call to the one method that you are trying to test. keeping that one statement as simple as possible is also very important. For example, this is not ideal: int result = myObj.CallSomeMethod(GetComplexParam1(), GetComplexParam2(), GetComplexParam3()); This style is not recomended because way too many things can go wrong in this one statement. All the GetComplexParamN() calls can throw for a variety of reasons unrelated to the test itself. It is thus unclear to someone running into a problem why the failure occured. The ideal pattern is to move the complex parameter building into the `Arrange section: // Arrange P1 p1 = GetComplexParam1(); P2 p2 = GetComplexParam2(); P3 p3 = GetComplexParam3(); // Act int result = myObj.CallSomeMethod(p1, p2, p3); // Assert Assert.AreEqual(1234, result); Now the only reason the line with CallSomeMethod() can fail is if the method itself blew up. Testing exception messages In general testing the specific exception message in a unit test is important. This ensures that the exact desired exception is what is being tested rather than a different exception of the same type. In order to verify the exact exception it is important to verify the message. var ex = Assert.Throws<InvalidOperationException>( () => fruitBasket.GetBananaById(1234)); Assert.Equal( \"1234\", ex.Message); Use xUnit.net's plethora of built-in assertions xUnit.net includes many kinds of assertions – please use the most appropriate one for your test. This will make the tests a lot more readable and also allow the test runner report the best possible errors (whether it's local or the CI machine). For example, these are bad: Assert.Equal(true, someBool); Assert.True(\"abc123\" == someString); Assert.True(list1.Length == list2.Length); for (int i = 0; i < list1.Length; i++) { Assert.True( String.Equals list1[i], list2[i], StringComparison.OrdinalIgnoreCase)); } These are good: Assert.True(someBool); Assert.Equal(\"abc123\", someString); // built-in collection assertions! Assert.Equal(list1, list2, StringComparer.OrdinalIgnoreCase); Parallel tests By default all unit test assemblies should run in parallel mode, which is the default. Unit tests shouldn't depend on any shared state, and so should generally be runnable in parallel. If the tests fail in parallel, the first thing to do is to figure out why; do not just disable parallel tests! For functional tests it is reasonable to disable parallel tests."
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome to DocFX website! | DocFX website ",
    "keywords": ""
  },
  "RELEASENOTE.html": {
    "href": "RELEASENOTE.html",
    "title": "Version Notes (Current Version: v1.6.1) | DocFX website ",
    "keywords": "Improve this Doc Version Notes (Current Version: v1.6.1) v1.6.1 Fix bug: \"Improve this doc\" button disppears in method level v1.6 Add attribute in c# and vb syntax. Support full text search, with pure client side implementation: The feature is disabled by default. You can enable it by adding \"_enableSearch\": true to the globalMetadata property of docfx.json . The search engine is powered by lunr.js v1.5 Add 3 options to build subcommand: --rawModelOutputFolder : to specify the output folder for raw model if --exportRawModel . If the value is not set, raw model will be in the same folder as the output documenation. --viewModelOutputFolder : to specify the output folder for view model if --exportViewModel . If the value is not set, view model will be in the same folder as the output documenation. --dryRun : if this option is set, docfx will go through all the build processes for all the documents, however, no documentation will generated. Improve markdown: Allow paired parentheses in link target, e.g. [text](paired(parentheses(are)supported)now \"title\") . Improve performance for document build. Breaking changes: modify interface IDocumentBuildStep . v1.4.2 Fix bug for encoded link file. Fix bug for directory not found. v1.4.1 Remove newFileRepository from output metadata v1.4 Cross-reference related: Make @uid rule more strict: if @ is not followed by ' or \" , it must be followed by word character ( [a-zA-Z] ) Introduce new syntax for cross-reference: similar to autolink: <xref:uid> similar to link: [title](xref:uid) or [title](@uid) support uid in toc.yml : - uid: getting-started - uid: manual support cross reference in toc.md # <xref:getting-started> # [Override title](@getting-started) Update yaml serializion: Add ExtensibleMemberAttribute Improve docfx init , now with docfx init , a docfx_project seed project will will generated. Several improvements for default template: Provide properties to customize layout: _disableNavbar , _disableBreadcrumb , _disableToc , _disableAffix , _disableContribution , _disableFooter Include empty main.css and main.js to head.tmpl.partial partial template so that there is no need to customize head.tmpl.partial when you want to customize website style. v1.3.8 Fix no link and ref link cannot work issue in table v1.3.7 Fix no link and ref link cannot work issue in markdownlite. Fix link issue (allow space in link) in markdownlite. Fix para for list in markdownlite. Fix tokenize bug in dfm. Add markdown token validator in dfm. v1.3.6 Fix cross domain issue: timeout exception throws when document build takes longer than 15 minutes Fix docfx IOException when calling docfx -l report.txt v1.3.5 FIX Github pages compatibility issue( Github pages now disallow iframe , however the default template of docfx uses iframe to load side toc): Update default template to use AJAX to load side toc, the original one is renamed to iframe.html . So now we have 2 embedded template, one is default and another is iframe.html . v1.3 docfx improvements Add subcommand docfx template . You can now docfx template list and docfx template export -A to list and export all the embeded templates! Add subcommand docfx merge . You can use this subcommand to merge platform from multiple APIs with the same uid Add two options to build subcommand, --exportRawModel and --exportViewModel . --exportRawModel exports the data model to apply templates, --exportViewModel exports the view model after running template's pre-process scripts. Add --globalMetadata , and --globalMetadataFile options to build subcommand. These options allow globalMetadata to be loaded from command line in json format or from a JSON file. Add --fileMetadataFile option to build subcommand. This option allows fileMeatdata to be read from an external JSON file. Support plugins. You can create your own template with a plugins folder, inside which, you create your own build steps. Refer to BaseDocumentBuildStep for a sample plugin implementation. DFM syntax improvements Support note&div syntax Support query format in code snippet [!code-<language>[<name>](<codepath><queryoption><queryoptionvalue> \"<title>\")] Change xref logic: If content after @ is wrapped by ' or \" , it contains any character including white space If content after @ is not wrapped by ' or \" , it ends when: line ends meets whitespaces line ends with . , , , ; , : , ! , ? and ~ meets 2 times or more . , , , ; , : , ! , ? and ~ Code improvements Add Microsoft.DocAsCode.YamlSerialization This project is based on YamlDotNet . It overrides classes like type converters to improve performance and fix bug existed in YamlDotNet Refactor markdown engine Microsoft.DocAsCode.MarkdownLite Add IMarkdownRewritable<T> . It provides a way to operate markdown tokens. Other improvements Add a new property _path into _attrs , it stands for the relative path from docfx.json to current file Improve missing xref warning message to include containing files. Add data-uid as attribute to generated html from default template, so that you can now find uid for API much more easily. v1.2 Support Liquid template, templates ending with .liquid are considered as using liquid templating language. Liquid contains include tag to support partials, we follow the ruby partials naming convention to have _<partialName>.liquid as partial template. A custom tag ref , e.g. {% ref file1 %} is introduced to specify the resource files that current template depends on. DFM include syntax is updated to use [!include[<title>](<filepath>)] syntax Disable glob pattern in docfx metadata command line option as it is to some extent confusing, consider using a -g option later to re-enable it. v1.1 Rewrite Glob The syntax of glob is: ** is called globstar, it matches any number of characters, including / , as long as it's the only thing in a path part. If ** is right behind / , it is a shortcut for **/* . * matches any number of characters, but not / ? matches 1 characters, but not / {} allows for a comma-separated list of \"or\" expressions, e.g. {a,b} => a and b ! at the beginning of a pattern will negate the match [...] matches a range of characters, similar to a RegExp range / is considered as path separator, while \\ is considered as escape character Support fileMetadata . You can specify different metadata value using glob pattern Improve overwrite functionality. Now you can overwrite not only summary/remarks, but also descriptions for parameters. You can even add exceptions. Now the latest project.json projects are also supported in DNX version. Simple code snippet is now supported, syntax is [!code-REST-i[title](path \"optionalTitle\")] Url is now encoded in markdown link. v1.0 Add section syntax in DFM Fix several bugs in DFM Update default template: rename css/js file Fix several display issue in default template v0.3 Support Static Website Templates Schema change to docfx.json"
  },
  "toc.html": {
    "href": "toc.html",
    "title": "Table of Content ",
    "keywords": ""
  },
  "tutorial/toc.html": {
    "href": "tutorial/toc.html",
    "title": "Table of Content ",
    "keywords": ""
  },
  "spec/toc.html": {
    "href": "spec/toc.html",
    "title": "Table of Content ",
    "keywords": ""
  },
  "guideline/toc.html": {
    "href": "guideline/toc.html",
    "title": "Table of Content ",
    "keywords": ""
  },
  "api/toc.html": {
    "href": "api/toc.html",
    "title": "Table of Content ",
    "keywords": ""
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownNoLinkInlineRule.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownNoLinkInlineRule.html",
    "title": "Class MarkdownNoLinkInlineRule\r\n   | DocFX website ",
    "keywords": "Class MarkdownNoLinkInlineRule Inheritance Object MarkdownLinkBaseInlineRule MarkdownNoLinkInlineRule Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownNoLinkInlineRule : MarkdownLinkBaseInlineRule, IMarkdownRule Properties Name Declaration public override string Name { get; } Proverty Value Type Description String NoLink Declaration public virtual Regex NoLink { get; } Proverty Value Type Description Regex Methods TryMatch(IMarkdownParser, ref String) Declaration public override IMarkdownToken TryMatch(IMarkdownParser engine, ref string source) Parameters Type Name Description IMarkdownParser engine String source Returns Type Description IMarkdownToken"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownNewLineBlockToken.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownNewLineBlockToken.html",
    "title": "Class MarkdownNewLineBlockToken\r\n   | DocFX website ",
    "keywords": "Class MarkdownNewLineBlockToken Inheritance Object MarkdownNewLineBlockToken Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownNewLineBlockToken : IMarkdownToken Constructors MarkdownNewLineBlockToken(IMarkdownRule, IMarkdownContext, String) Declaration public MarkdownNewLineBlockToken(IMarkdownRule rule, IMarkdownContext context, string rawMarkdown) Parameters Type Name Description IMarkdownRule rule IMarkdownContext context String rawMarkdown Properties Context Declaration public IMarkdownContext Context { get; } Proverty Value Type Description IMarkdownContext RawMarkdown Declaration public string RawMarkdown { get; set; } Proverty Value Type Description String Rule Declaration public IMarkdownRule Rule { get; } Proverty Value Type Description IMarkdownRule"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownNewLineBlockRule.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownNewLineBlockRule.html",
    "title": "Class MarkdownNewLineBlockRule\r\n   | DocFX website ",
    "keywords": "Class MarkdownNewLineBlockRule Inheritance Object MarkdownNewLineBlockRule Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownNewLineBlockRule : IMarkdownRule Properties Name Declaration public string Name { get; } Proverty Value Type Description String Newline Declaration public virtual Regex Newline { get; } Proverty Value Type Description Regex Methods TryMatch(IMarkdownParser, ref String) Declaration public virtual IMarkdownToken TryMatch(IMarkdownParser engine, ref string source) Parameters Type Name Description IMarkdownParser engine String source Returns Type Description IMarkdownToken"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownListItemBlockToken.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownListItemBlockToken.html",
    "title": "Class MarkdownListItemBlockToken\r\n   | DocFX website ",
    "keywords": "Class MarkdownListItemBlockToken Inheritance Object MarkdownListItemBlockToken Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownListItemBlockToken : IMarkdownToken, IMarkdownRewritable<MarkdownListItemBlockToken> Constructors MarkdownListItemBlockToken(IMarkdownRule, IMarkdownContext, ImmutableArray<IMarkdownToken>, Boolean, String) Declaration public MarkdownListItemBlockToken(IMarkdownRule rule, IMarkdownContext context, ImmutableArray<IMarkdownToken> tokens, bool loose, string rawMarkdown) Parameters Type Name Description IMarkdownRule rule IMarkdownContext context System.Collections.Immutable.ImmutableArray < IMarkdownToken > tokens Boolean loose String rawMarkdown Properties Context Declaration public IMarkdownContext Context { get; } Proverty Value Type Description IMarkdownContext Loose Declaration public bool Loose { get; } Proverty Value Type Description Boolean RawMarkdown Declaration public string RawMarkdown { get; set; } Proverty Value Type Description String Rule Declaration public IMarkdownRule Rule { get; } Proverty Value Type Description IMarkdownRule Tokens Declaration public ImmutableArray<IMarkdownToken> Tokens { get; } Proverty Value Type Description System.Collections.Immutable.ImmutableArray < IMarkdownToken > Methods Rewrite(IMarkdownRewriteEngine) Declaration public MarkdownListItemBlockToken Rewrite(IMarkdownRewriteEngine rewriterEngine) Parameters Type Name Description IMarkdownRewriteEngine rewriterEngine Returns Type Description MarkdownListItemBlockToken"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownListBlockToken.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownListBlockToken.html",
    "title": "Class MarkdownListBlockToken\r\n   | DocFX website ",
    "keywords": "Class MarkdownListBlockToken Inheritance Object MarkdownListBlockToken Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownListBlockToken : IMarkdownToken, IMarkdownRewritable<MarkdownListBlockToken> Constructors MarkdownListBlockToken(IMarkdownRule, IMarkdownContext, ImmutableArray<IMarkdownToken>, Boolean, String) Declaration public MarkdownListBlockToken(IMarkdownRule rule, IMarkdownContext context, ImmutableArray<IMarkdownToken> tokens, bool ordered, string rawMarkdown) Parameters Type Name Description IMarkdownRule rule IMarkdownContext context System.Collections.Immutable.ImmutableArray < IMarkdownToken > tokens Boolean ordered String rawMarkdown Properties Context Declaration public IMarkdownContext Context { get; } Proverty Value Type Description IMarkdownContext Ordered Declaration public bool Ordered { get; } Proverty Value Type Description Boolean RawMarkdown Declaration public string RawMarkdown { get; set; } Proverty Value Type Description String Rule Declaration public IMarkdownRule Rule { get; } Proverty Value Type Description IMarkdownRule Tokens Declaration public ImmutableArray<IMarkdownToken> Tokens { get; } Proverty Value Type Description System.Collections.Immutable.ImmutableArray < IMarkdownToken > Methods Rewrite(IMarkdownRewriteEngine) Declaration public MarkdownListBlockToken Rewrite(IMarkdownRewriteEngine rewriterEngine) Parameters Type Name Description IMarkdownRewriteEngine rewriterEngine Returns Type Description MarkdownListBlockToken"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownListBlockRule.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownListBlockRule.html",
    "title": "Class MarkdownListBlockRule\r\n   | DocFX website ",
    "keywords": "Class MarkdownListBlockRule Inheritance Object MarkdownListBlockRule Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownListBlockRule : IMarkdownRule Properties Bullet Declaration public virtual Regex Bullet { get; } Proverty Value Type Description Regex Item Declaration public virtual Regex Item { get; } Proverty Value Type Description Regex List Declaration public virtual Regex List { get; } Proverty Value Type Description Regex Name Declaration public string Name { get; } Proverty Value Type Description String Methods TryMatch(IMarkdownParser, ref String) Declaration public virtual IMarkdownToken TryMatch(IMarkdownParser parser, ref string source) Parameters Type Name Description IMarkdownParser parser String source Returns Type Description IMarkdownToken"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownLinkInlineToken.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownLinkInlineToken.html",
    "title": "Class MarkdownLinkInlineToken\r\n   | DocFX website ",
    "keywords": "Class MarkdownLinkInlineToken Inheritance Object MarkdownLinkInlineToken Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownLinkInlineToken : IMarkdownToken, IMarkdownRewritable<MarkdownLinkInlineToken> Constructors MarkdownLinkInlineToken(IMarkdownRule, IMarkdownContext, String, String, ImmutableArray<IMarkdownToken>, String) Declaration public MarkdownLinkInlineToken(IMarkdownRule rule, IMarkdownContext context, string href, string title, ImmutableArray<IMarkdownToken> content, string rawMarkdown) Parameters Type Name Description IMarkdownRule rule IMarkdownContext context String href String title System.Collections.Immutable.ImmutableArray < IMarkdownToken > content String rawMarkdown Properties Content Declaration public ImmutableArray<IMarkdownToken> Content { get; } Proverty Value Type Description System.Collections.Immutable.ImmutableArray < IMarkdownToken > Context Declaration public IMarkdownContext Context { get; } Proverty Value Type Description IMarkdownContext Href Declaration public string Href { get; } Proverty Value Type Description String RawMarkdown Declaration public string RawMarkdown { get; set; } Proverty Value Type Description String Rule Declaration public IMarkdownRule Rule { get; } Proverty Value Type Description IMarkdownRule Title Declaration public string Title { get; } Proverty Value Type Description String Methods Rewrite(IMarkdownRewriteEngine) Declaration public MarkdownLinkInlineToken Rewrite(IMarkdownRewriteEngine rewriterEngine) Parameters Type Name Description IMarkdownRewriteEngine rewriterEngine Returns Type Description MarkdownLinkInlineToken"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownLinkInlineRule.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownLinkInlineRule.html",
    "title": "Class MarkdownLinkInlineRule\r\n   | DocFX website ",
    "keywords": "Class MarkdownLinkInlineRule Inheritance Object MarkdownLinkBaseInlineRule MarkdownLinkInlineRule Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownLinkInlineRule : MarkdownLinkBaseInlineRule, IMarkdownRule Properties Link Declaration public virtual Regex Link { get; } Proverty Value Type Description Regex Name Declaration public override string Name { get; } Proverty Value Type Description String Methods TryMatch(IMarkdownParser, ref String) Declaration public override IMarkdownToken TryMatch(IMarkdownParser engine, ref string source) Parameters Type Name Description IMarkdownParser engine String source Returns Type Description IMarkdownToken"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownLinkBaseInlineRule.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownLinkBaseInlineRule.html",
    "title": "Class MarkdownLinkBaseInlineRule\r\n   | DocFX website ",
    "keywords": "Class MarkdownLinkBaseInlineRule Inheritance Object MarkdownLinkBaseInlineRule Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public abstract class MarkdownLinkBaseInlineRule : IMarkdownRule Properties Name Declaration public abstract string Name { get; } Proverty Value Type Description String Methods GenerateToken(IMarkdownParser, String, String, String, Boolean, String) Declaration protected virtual IMarkdownToken GenerateToken(IMarkdownParser engine, string href, string title, string text, bool isImage, string rawMarkdown) Parameters Type Name Description IMarkdownParser engine String href String title String text Boolean isImage String rawMarkdown Returns Type Description IMarkdownToken TryMatch(IMarkdownParser, ref String) Declaration public abstract IMarkdownToken TryMatch(IMarkdownParser engine, ref string source) Parameters Type Name Description IMarkdownParser engine String source Returns Type Description IMarkdownToken"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownLHeadingBlockRule.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownLHeadingBlockRule.html",
    "title": "Class MarkdownLHeadingBlockRule\r\n   | DocFX website ",
    "keywords": "Class MarkdownLHeadingBlockRule Inheritance Object MarkdownLHeadingBlockRule Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownLHeadingBlockRule : IMarkdownRule Properties LHeading Declaration public virtual Regex LHeading { get; } Proverty Value Type Description Regex Name Declaration public string Name { get; } Proverty Value Type Description String Methods TryMatch(IMarkdownParser, ref String) Declaration public virtual IMarkdownToken TryMatch(IMarkdownParser engine, ref string source) Parameters Type Name Description IMarkdownParser engine String source Returns Type Description IMarkdownToken"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownInlineContext.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownInlineContext.html",
    "title": "Class MarkdownInlineContext\r\n   | DocFX website ",
    "keywords": "Class MarkdownInlineContext Inheritance Object MarkdownInlineContext Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownInlineContext : IMarkdownContext Constructors MarkdownInlineContext(ImmutableList<IMarkdownRule>) Declaration public MarkdownInlineContext(ImmutableList<IMarkdownRule> rules) Parameters Type Name Description System.Collections.Immutable.ImmutableList < IMarkdownRule > rules MarkdownInlineContext(ImmutableList<IMarkdownRule>, ImmutableDictionary<String, Object>) Declaration protected MarkdownInlineContext(ImmutableList<IMarkdownRule> rules, ImmutableDictionary<string, object> variables) Parameters Type Name Description System.Collections.Immutable.ImmutableList < IMarkdownRule > rules System.Collections.Immutable.ImmutableDictionary < String , Object > variables Fields IsInLink Declaration public const string IsInLink Properties Rules Declaration public ImmutableList<IMarkdownRule> Rules { get; } Proverty Value Type Description System.Collections.Immutable.ImmutableList < IMarkdownRule > Variables Declaration public ImmutableDictionary<string, object> Variables { get; } Proverty Value Type Description System.Collections.Immutable.ImmutableDictionary < String , Object > Methods CreateContext(ImmutableDictionary<String, Object>) Declaration public virtual IMarkdownContext CreateContext(ImmutableDictionary<string, object> variables) Parameters Type Name Description System.Collections.Immutable.ImmutableDictionary < String , Object > variables Returns Type Description IMarkdownContext"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownImageInlineToken.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownImageInlineToken.html",
    "title": "Class MarkdownImageInlineToken\r\n   | DocFX website ",
    "keywords": "Class MarkdownImageInlineToken Inheritance Object MarkdownImageInlineToken Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownImageInlineToken : IMarkdownToken Constructors MarkdownImageInlineToken(IMarkdownRule, IMarkdownContext, String, String, String, String) Declaration public MarkdownImageInlineToken(IMarkdownRule rule, IMarkdownContext context, string href, string title, string text, string rawMarkdown) Parameters Type Name Description IMarkdownRule rule IMarkdownContext context String href String title String text String rawMarkdown Properties Context Declaration public IMarkdownContext Context { get; } Proverty Value Type Description IMarkdownContext Href Declaration public string Href { get; } Proverty Value Type Description String RawMarkdown Declaration public string RawMarkdown { get; set; } Proverty Value Type Description String Rule Declaration public IMarkdownRule Rule { get; } Proverty Value Type Description IMarkdownRule Text Declaration public string Text { get; } Proverty Value Type Description String Title Declaration public string Title { get; } Proverty Value Type Description String"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownIgnoreToken.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownIgnoreToken.html",
    "title": "Class MarkdownIgnoreToken\r\n   | DocFX website ",
    "keywords": "Class MarkdownIgnoreToken Inheritance Object MarkdownIgnoreToken Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public sealed class MarkdownIgnoreToken : IMarkdownToken Constructors MarkdownIgnoreToken(IMarkdownRule, IMarkdownContext, String) Declaration public MarkdownIgnoreToken(IMarkdownRule rule, IMarkdownContext context, string rawMarkdown) Parameters Type Name Description IMarkdownRule rule IMarkdownContext context String rawMarkdown Properties Context Declaration public IMarkdownContext Context { get; } Proverty Value Type Description IMarkdownContext RawMarkdown Declaration public string RawMarkdown { get; set; } Proverty Value Type Description String Rule Declaration public IMarkdownRule Rule { get; } Proverty Value Type Description IMarkdownRule"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownHtmlBlockToken.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownHtmlBlockToken.html",
    "title": "Class MarkdownHtmlBlockToken\r\n   | DocFX website ",
    "keywords": "Class MarkdownHtmlBlockToken Inheritance Object MarkdownHtmlBlockToken Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownHtmlBlockToken : IMarkdownToken, IMarkdownRewritable<MarkdownHtmlBlockToken> Constructors MarkdownHtmlBlockToken(IMarkdownRule, IMarkdownContext, InlineContent, String) Declaration public MarkdownHtmlBlockToken(IMarkdownRule rule, IMarkdownContext context, InlineContent content, string rawMarkdown) Parameters Type Name Description IMarkdownRule rule IMarkdownContext context InlineContent content String rawMarkdown Properties Content Declaration public InlineContent Content { get; } Proverty Value Type Description InlineContent Context Declaration public IMarkdownContext Context { get; } Proverty Value Type Description IMarkdownContext RawMarkdown Declaration public string RawMarkdown { get; set; } Proverty Value Type Description String Rule Declaration public IMarkdownRule Rule { get; } Proverty Value Type Description IMarkdownRule Methods Rewrite(IMarkdownRewriteEngine) Declaration public MarkdownHtmlBlockToken Rewrite(IMarkdownRewriteEngine rewriterEngine) Parameters Type Name Description IMarkdownRewriteEngine rewriterEngine Returns Type Description MarkdownHtmlBlockToken"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownHtmlBlockRule.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownHtmlBlockRule.html",
    "title": "Class MarkdownHtmlBlockRule\r\n   | DocFX website ",
    "keywords": "Class MarkdownHtmlBlockRule Inheritance Object MarkdownHtmlBlockRule Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownHtmlBlockRule : IMarkdownRule Properties Html Declaration public virtual Regex Html { get; } Proverty Value Type Description Regex Name Declaration public virtual string Name { get; } Proverty Value Type Description String Methods TryMatch(IMarkdownParser, ref String) Declaration public virtual IMarkdownToken TryMatch(IMarkdownParser engine, ref string source) Parameters Type Name Description IMarkdownParser engine String source Returns Type Description IMarkdownToken"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownHrBlockToken.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownHrBlockToken.html",
    "title": "Class MarkdownHrBlockToken\r\n   | DocFX website ",
    "keywords": "Class MarkdownHrBlockToken Inheritance Object MarkdownHrBlockToken Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownHrBlockToken : IMarkdownToken Constructors MarkdownHrBlockToken(IMarkdownRule, IMarkdownContext, String) Declaration public MarkdownHrBlockToken(IMarkdownRule rule, IMarkdownContext context, string rawMarkdown) Parameters Type Name Description IMarkdownRule rule IMarkdownContext context String rawMarkdown Properties Context Declaration public IMarkdownContext Context { get; } Proverty Value Type Description IMarkdownContext RawMarkdown Declaration public string RawMarkdown { get; set; } Proverty Value Type Description String Rule Declaration public IMarkdownRule Rule { get; } Proverty Value Type Description IMarkdownRule"
  },
  "api/Microsoft.DocAsCode.Exceptions.ExtractMetadataException.html": {
    "href": "api/Microsoft.DocAsCode.Exceptions.ExtractMetadataException.html",
    "title": "Class ExtractMetadataException\r\n   | DocFX website ",
    "keywords": "Class ExtractMetadataException Inheritance Object Exception DocfxException ExtractMetadataException Namespace :Microsoft.DocAsCode.Exceptions Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Serializable] public class ExtractMetadataException : DocfxException, ISerializable, _Exception Constructors ExtractMetadataException() Declaration public ExtractMetadataException() ExtractMetadataException(SerializationInfo, StreamingContext) Declaration protected ExtractMetadataException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context ExtractMetadataException(String) Declaration public ExtractMetadataException(string message) Parameters Type Name Description String message ExtractMetadataException(String, Exception) Declaration public ExtractMetadataException(string message, Exception innerException) Parameters Type Name Description String message Exception innerException"
  },
  "api/Microsoft.DocAsCode.Exceptions.DocfxMetadataException.html": {
    "href": "api/Microsoft.DocAsCode.Exceptions.DocfxMetadataException.html",
    "title": "Class DocfxMetadataException\r\n   | DocFX website ",
    "keywords": "Class DocfxMetadataException Inheritance Object Exception DocfxMetadataException Namespace :Microsoft.DocAsCode.Exceptions Assembly :docfx.dll Syntax public class DocfxMetadataException : Exception, ISerializable, _Exception Constructors DocfxMetadataException() Declaration public DocfxMetadataException() DocfxMetadataException(SerializationInfo, StreamingContext) Declaration protected DocfxMetadataException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context DocfxMetadataException(String) Declaration public DocfxMetadataException(string message) Parameters Type Name Description String message DocfxMetadataException(String, Exception) Declaration public DocfxMetadataException(string message, Exception innerException) Parameters Type Name Description String message Exception innerException"
  },
  "api/Microsoft.DocAsCode.Exceptions.DocfxInitException.html": {
    "href": "api/Microsoft.DocAsCode.Exceptions.DocfxInitException.html",
    "title": "Class DocfxInitException\r\n   | DocFX website ",
    "keywords": "Class DocfxInitException Inheritance Object Exception DocfxInitException Namespace :Microsoft.DocAsCode.Exceptions Assembly :docfx.dll Syntax public class DocfxInitException : Exception, ISerializable, _Exception Constructors DocfxInitException() Declaration public DocfxInitException() DocfxInitException(SerializationInfo, StreamingContext) Declaration protected DocfxInitException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context DocfxInitException(String) Declaration public DocfxInitException(string message) Parameters Type Name Description String message DocfxInitException(String, Exception) Declaration public DocfxInitException(string message, Exception innerException) Parameters Type Name Description String message Exception innerException"
  },
  "api/Microsoft.DocAsCode.Exceptions.DocfxException.html": {
    "href": "api/Microsoft.DocAsCode.Exceptions.DocfxException.html",
    "title": "Class DocfxException\r\n   | DocFX website ",
    "keywords": "Class DocfxException Inheritance Object Exception DocfxException Namespace :Microsoft.DocAsCode.Exceptions Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Serializable] public class DocfxException : Exception, ISerializable, _Exception Constructors DocfxException() Declaration public DocfxException() DocfxException(SerializationInfo, StreamingContext) Declaration protected DocfxException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context DocfxException(String) Declaration public DocfxException(string message) Parameters Type Name Description String message DocfxException(String, Exception) Declaration public DocfxException(string message, Exception innerException) Parameters Type Name Description String message Exception innerException"
  },
  "api/Microsoft.DocAsCode.Exceptions.CrossReferenceNotResolvedException.html": {
    "href": "api/Microsoft.DocAsCode.Exceptions.CrossReferenceNotResolvedException.html",
    "title": "Class CrossReferenceNotResolvedException\r\n   | DocFX website ",
    "keywords": "Class CrossReferenceNotResolvedException Inheritance Object Exception DocumentException CrossReferenceNotResolvedException Namespace :Microsoft.DocAsCode.Exceptions Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Serializable] public class CrossReferenceNotResolvedException : DocumentException, ISerializable, _Exception Constructors CrossReferenceNotResolvedException(SerializationInfo, StreamingContext) Declaration protected CrossReferenceNotResolvedException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context CrossReferenceNotResolvedException(String, String, String) Declaration public CrossReferenceNotResolvedException(string uid, string uidRawText, string file) Parameters Type Name Description String uid String uidRawText String file Properties Uid Declaration public string Uid { get; } Proverty Value Type Description String UidRawText Declaration public string UidRawText { get; } Proverty Value Type Description String Methods GetObjectData(SerializationInfo, StreamingContext) Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context"
  },
  "api/Microsoft.DocAsCode.EntityModel.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.html",
    "title": "Namespace Microsoft.DocAsCode.EntityModel\r\n   | DocFX website ",
    "keywords": "Namespace Microsoft.DocAsCode.EntityModel Classes ApiIndexItemModel ApiParameter ApiReferenceModel ApiReferenceViewModel ApplicationLevelCache ApplyTemplateSettings ArchiveResourceCollection BuildInfo BuildMembers BuildToc CacheBase CompositeResourceCollectionWithOverridden CompositeYamlModelGenerator Constants Constants.PropertyName TODO: add other property name const CrefInfo CSharpNameVisitorCreator CSReferenceItemVisitor CSYamlModelGenerator ExportSettings ExternalReferenceConverter ExternalReferencePackageCollection ExternalReferencePackageReader ExternalReferencePackageWriter ExtractMetadataInputModel ExtractMetadataWorker FileMetadata FileMetadataItem FileResourceCollection JintProcessorHelper LayoutCheckAndCleanup LinkItem MatchDetail MetadataItem MetadataModel MetadataModelUtility NameVisitor NameVisitorCreator NormalizeSyntax OverwriteDocumentModel ProjectLevelCache ReferenceItem ReferenceItemVisitor ResolverContext ResolveReference ResourceCollection ResourceFinder Section SetParent SimpleYamlModelGenerator SourceDetail SymbolVisitorAdapter SyntaxDetail Template TemplateCollection TemplateManager TemplateManifestItem TemplateProcessor TemplateResourceInfo TreeIterator TripleSlashCommentModel TripleSlashCommentParserContext VBNameVisitorCreator VBReferenceItemVisitor VBYamlModelGenerator VisitorHelper YamlHeaderParser Match yaml header from markdown files. YAML HEADER Syntax Started with a new line Followed by three dashes --- as a line, spaces are allowed before Followed by and must followed by uid: Followed by other properties in YAML format Ended with three dashes --- as a line, spaces are allowed before YamlMetadataResolver YamlModelGenerator YamlViewModelExtensions Structs Coordinate Location Interfaces IResolverPipeline ITripleSlashCommentParserContext Enums ApplyTemplateOptions LayoutItem Defines the layout for an API page MemberType NameOptions SyntaxLanguage"
  },
  "api/Microsoft.DocAsCode.EntityModel.YamlViewModelExtensions.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.YamlViewModelExtensions.html",
    "title": "Class YamlViewModelExtensions\r\n   | DocFX website ",
    "keywords": "Class YamlViewModelExtensions Inheritance Object YamlViewModelExtensions Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class YamlViewModelExtensions Methods AllowMultipleItems(MemberType) Allow multiple items in one yml file Declaration public static bool AllowMultipleItems(MemberType type) Parameters Type Name Description MemberType type Returns Type Description Boolean IsPageLevel(MemberType) Declaration public static bool IsPageLevel(MemberType type) Parameters Type Name Description MemberType type Returns Type Description Boolean ShrinkToSimpleToc(MetadataItem) Declaration public static MetadataItem ShrinkToSimpleToc(MetadataItem item) Parameters Type Name Description MetadataItem item Returns Type Description MetadataItem ShrinkToSimpleTocWithNamespaceNotEmpty(MetadataItem) Only when Namespace is not empty, return it Declaration public static MetadataItem ShrinkToSimpleTocWithNamespaceNotEmpty(MetadataItem item) Parameters Type Name Description MetadataItem item Returns Type Description MetadataItem"
  },
  "api/Microsoft.DocAsCode.EntityModel.YamlModelGenerator.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.YamlModelGenerator.html",
    "title": "Class YamlModelGenerator\r\n   | DocFX website ",
    "keywords": "Class YamlModelGenerator Inheritance Object YamlModelGenerator Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public abstract class YamlModelGenerator Methods DefaultVisit(ISymbol, MetadataItem, SymbolVisitorAdapter) Declaration public virtual void DefaultVisit(ISymbol symbol, MetadataItem item, SymbolVisitorAdapter adapter) Parameters Type Name Description Microsoft.CodeAnalysis.ISymbol symbol MetadataItem item SymbolVisitorAdapter adapter GenerateEvent(IEventSymbol, MetadataItem, SymbolVisitorAdapter) Declaration public virtual void GenerateEvent(IEventSymbol symbol, MetadataItem item, SymbolVisitorAdapter adapter) Parameters Type Name Description Microsoft.CodeAnalysis.IEventSymbol symbol MetadataItem item SymbolVisitorAdapter adapter GenerateField(IFieldSymbol, MetadataItem, SymbolVisitorAdapter) Declaration public virtual void GenerateField(IFieldSymbol symbol, MetadataItem item, SymbolVisitorAdapter adapter) Parameters Type Name Description Microsoft.CodeAnalysis.IFieldSymbol symbol MetadataItem item SymbolVisitorAdapter adapter GenerateMethod(IMethodSymbol, MetadataItem, SymbolVisitorAdapter) Declaration public virtual void GenerateMethod(IMethodSymbol symbol, MetadataItem item, SymbolVisitorAdapter adapter) Parameters Type Name Description Microsoft.CodeAnalysis.IMethodSymbol symbol MetadataItem item SymbolVisitorAdapter adapter GenerateNamedType(INamedTypeSymbol, MetadataItem, SymbolVisitorAdapter) Declaration public virtual void GenerateNamedType(INamedTypeSymbol symbol, MetadataItem item, SymbolVisitorAdapter adapter) Parameters Type Name Description Microsoft.CodeAnalysis.INamedTypeSymbol symbol MetadataItem item SymbolVisitorAdapter adapter GenerateProperty(IPropertySymbol, MetadataItem, SymbolVisitorAdapter) Declaration public virtual void GenerateProperty(IPropertySymbol symbol, MetadataItem item, SymbolVisitorAdapter adapter) Parameters Type Name Description Microsoft.CodeAnalysis.IPropertySymbol symbol MetadataItem item SymbolVisitorAdapter adapter"
  },
  "api/Microsoft.DocAsCode.EntityModel.YamlMetadataResolver.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.YamlMetadataResolver.html",
    "title": "Class YamlMetadataResolver\r\n   | DocFX website ",
    "keywords": "Class YamlMetadataResolver Inheritance Object YamlMetadataResolver Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class YamlMetadataResolver Methods ExecutePipeline(MetadataModel, ResolverContext) Declaration public static void ExecutePipeline(MetadataModel yaml, ResolverContext context) Parameters Type Name Description MetadataModel yaml ResolverContext context ResolveMetadata(Dictionary<String, MetadataItem>, Dictionary<String, ReferenceItem>, String, Boolean, IEnumerable<String>) TODO: input Namespace list instead; TODO: Save to ...yml.map Declaration public static MetadataModel ResolveMetadata(Dictionary<string, MetadataItem> allMembers, Dictionary<string, ReferenceItem> allReferences, string apiFolder, bool preserveRawInlineComments, IEnumerable<string> externalReferencePackages) Parameters Type Name Description System.Collections.Generic.Dictionary < String , MetadataItem > allMembers System.Collections.Generic.Dictionary < String , ReferenceItem > allReferences String apiFolder Boolean preserveRawInlineComments System.Collections.Generic.IEnumerable < String > externalReferencePackages Returns Type Description MetadataModel"
  },
  "api/Microsoft.DocAsCode.EntityModel.YamlHeaderParser.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.YamlHeaderParser.html",
    "title": "Class YamlHeaderParser\r\n   | DocFX website ",
    "keywords": "Class YamlHeaderParser Match yaml header from markdown files. YAML HEADER Syntax Started with a new line Followed by three dashes --- as a line, spaces are allowed before Followed by and must followed by uid: Followed by other properties in YAML format Ended with three dashes --- as a line, spaces are allowed before Inheritance Object YamlHeaderParser Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class YamlHeaderParser Fields YamlHeaderRegex Declaration public static readonly Regex YamlHeaderRegex Methods Select(String) Declaration public static IList<MatchDetail> Select(string input) Parameters Type Name Description String input Returns Type Description System.Collections.Generic.IList < MatchDetail >"
  },
  "api/Microsoft.DocAsCode.EntityModel.VisitorHelper.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.VisitorHelper.html",
    "title": "Class VisitorHelper\r\n   | DocFX website ",
    "keywords": "Class VisitorHelper Inheritance Object VisitorHelper Namespace :Microsoft.DocAsCode.EntityModel Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class VisitorHelper Methods CanVisit(ISymbol, Boolean) Declaration public static bool CanVisit(ISymbol symbol, bool wantProtectedMember = true) Parameters Type Name Description Microsoft.CodeAnalysis.ISymbol symbol Boolean wantProtectedMember Returns Type Description Boolean FeedComments(MetadataItem, ITripleSlashCommentParserContext) Declaration public static void FeedComments(MetadataItem item, ITripleSlashCommentParserContext context) Parameters Type Name Description MetadataItem item ITripleSlashCommentParserContext context GetId(ISymbol) Declaration public static string GetId(ISymbol symbol) Parameters Type Name Description Microsoft.CodeAnalysis.ISymbol symbol Returns Type Description String GetMemberTypeFromTypeKind(TypeKind) Declaration public static MemberType GetMemberTypeFromTypeKind(TypeKind typeKind) Parameters Type Name Description Microsoft.CodeAnalysis.TypeKind typeKind Returns Type Description MemberType GetParameterDescription(ISymbol, MetadataItem, String, Boolean, ITripleSlashCommentParserContext) Declaration public static ApiParameter GetParameterDescription(ISymbol symbol, MetadataItem item, string id, bool isReturn, ITripleSlashCommentParserContext context) Parameters Type Name Description Microsoft.CodeAnalysis.ISymbol symbol MetadataItem item String id Boolean isReturn ITripleSlashCommentParserContext context Returns Type Description ApiParameter GetSourceDetail(ISymbol) Declaration public static SourceDetail GetSourceDetail(ISymbol symbol) Parameters Type Name Description Microsoft.CodeAnalysis.ISymbol symbol Returns Type Description SourceDetail GetTypeParameterDescription(ITypeParameterSymbol, MetadataItem, ITripleSlashCommentParserContext) Declaration public static ApiParameter GetTypeParameterDescription(ITypeParameterSymbol symbol, MetadataItem item, ITripleSlashCommentParserContext context) Parameters Type Name Description Microsoft.CodeAnalysis.ITypeParameterSymbol symbol MetadataItem item ITripleSlashCommentParserContext context Returns Type Description ApiParameter"
  },
  "api/Microsoft.DocAsCode.EntityModel.ViewModels.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.ViewModels.html",
    "title": "Namespace Microsoft.DocAsCode.EntityModel.ViewModels\r\n   | DocFX website ",
    "keywords": "Namespace Microsoft.DocAsCode.EntityModel.ViewModels Classes ItemViewModel PageViewModel ReferenceViewModel RestApiItemViewModel RestApiParameterViewModel RestApiResponseExampleViewModel RestApiResponseViewModel SpecViewModel SyntaxDetailViewModel TocItemViewModel TocViewModel ViewModelUtility Interfaces IOverwriteDocumentViewModel"
  },
  "api/Microsoft.DocAsCode.EntityModel.ViewModels.ViewModelUtility.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.ViewModels.ViewModelUtility.html",
    "title": "Class ViewModelUtility\r\n   | DocFX website ",
    "keywords": "Class ViewModelUtility Inheritance Object ViewModelUtility Namespace :Microsoft.DocAsCode.EntityModel.ViewModels Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax public class ViewModelUtility Methods GetLanguageProperty<TValue>(SortedList<SyntaxLanguage, TValue>, SyntaxLanguage, TValue) Declaration public static TValue GetLanguageProperty<TValue>(SortedList<SyntaxLanguage, TValue> dict, SyntaxLanguage language, TValue defaultValue = null)where TValue : class Parameters Type Name Description System.Collections.Generic.SortedList < SyntaxLanguage , TValue> dict SyntaxLanguage language TValue defaultValue Returns Type Description TValue"
  },
  "api/Microsoft.DocAsCode.EntityModel.ViewModels.TocViewModel.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.ViewModels.TocViewModel.html",
    "title": "Class TocViewModel\r\n   | DocFX website ",
    "keywords": "Class TocViewModel Inheritance Object System.Collections.Generic.List < TocItemViewModel > TocViewModel Namespace :Microsoft.DocAsCode.EntityModel.ViewModels Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Serializable] public class TocViewModel : List<TocItemViewModel>, IList<TocItemViewModel>, ICollection<TocItemViewModel>, IList, ICollection, IReadOnlyList<TocItemViewModel>, IReadOnlyCollection<TocItemViewModel>, IEnumerable<TocItemViewModel>, IEnumerable Constructors TocViewModel() Declaration public TocViewModel() TocViewModel(IEnumerable<TocItemViewModel>) Declaration public TocViewModel(IEnumerable<TocItemViewModel> items) Parameters Type Name Description System.Collections.Generic.IEnumerable < TocItemViewModel > items Methods FromModel(MetadataItem) Declaration public static TocViewModel FromModel(MetadataItem item) Parameters Type Name Description MetadataItem item Returns Type Description TocViewModel"
  },
  "api/Microsoft.DocAsCode.EntityModel.ViewModels.TocItemViewModel.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.ViewModels.TocItemViewModel.html",
    "title": "Class TocItemViewModel\r\n   | DocFX website ",
    "keywords": "Class TocItemViewModel Inheritance Object TocItemViewModel Namespace :Microsoft.DocAsCode.EntityModel.ViewModels Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Serializable] public class TocItemViewModel Properties Additional Declaration [ExtensibleMember] [JsonIgnore] public Dictionary<string, object> Additional { get; set; } Proverty Value Type Description System.Collections.Generic.Dictionary < String , Object > AdditionalJson Declaration [EditorBrowsable(EditorBrowsableState.Never)] [YamlIgnore] [JsonExtensionData(ReadData = false, WriteData = true)] public Dictionary<string, object> AdditionalJson { get; set; } Proverty Value Type Description System.Collections.Generic.Dictionary < String , Object > Homepage Declaration [YamlMember(Alias = \"homepage\")] [JsonProperty(\"homepage\")] public string Homepage { get; set; } Proverty Value Type Description String HomepageUid Declaration [YamlMember(Alias = \"homepageUid\")] [JsonProperty(\"homepageUid\")] public string HomepageUid { get; set; } Proverty Value Type Description String Href Declaration [YamlMember(Alias = \"href\")] [JsonProperty(\"href\")] public string Href { get; set; } Proverty Value Type Description String Items Declaration [YamlMember(Alias = \"items\")] [JsonProperty(\"items\")] public TocViewModel Items { get; set; } Proverty Value Type Description TocViewModel Name Declaration [YamlMember(Alias = \"name\")] [JsonProperty(\"name\")] public string Name { get; set; } Proverty Value Type Description String NameForCSharp Declaration [YamlIgnore] [JsonIgnore] public string NameForCSharp { get; set; } Proverty Value Type Description String NameForVB Declaration [YamlIgnore] [JsonIgnore] public string NameForVB { get; set; } Proverty Value Type Description String NameInDevLangs Declaration [ExtensibleMember(\"name.\")] [JsonIgnore] public SortedList<string, string> NameInDevLangs { get; } Proverty Value Type Description System.Collections.Generic.SortedList < String , String > OriginalHref Declaration [YamlMember(Alias = \"originalHref\")] [JsonProperty(\"originalHref\")] public string OriginalHref { get; set; } Proverty Value Type Description String Uid Declaration [YamlMember(Alias = \"uid\")] [JsonProperty(\"uid\")] public string Uid { get; set; } Proverty Value Type Description String Methods FromModel(MetadataItem) Declaration public static TocItemViewModel FromModel(MetadataItem item) Parameters Type Name Description MetadataItem item Returns Type Description TocItemViewModel"
  },
  "api/Microsoft.DocAsCode.EntityModel.ViewModels.SyntaxDetailViewModel.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.ViewModels.SyntaxDetailViewModel.html",
    "title": "Class SyntaxDetailViewModel\r\n   | DocFX website ",
    "keywords": "Class SyntaxDetailViewModel Inheritance Object SyntaxDetailViewModel Namespace :Microsoft.DocAsCode.EntityModel.ViewModels Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Serializable] public class SyntaxDetailViewModel Properties Content Declaration [YamlMember(Alias = \"content\")] [JsonProperty(\"content\")] public string Content { get; set; } Proverty Value Type Description String ContentForCSharp Declaration [YamlMember(Alias = \"content.csharp\")] [JsonProperty(\"content.csharp\")] public string ContentForCSharp { get; set; } Proverty Value Type Description String ContentForVB Declaration [YamlMember(Alias = \"content.vb\")] [JsonProperty(\"content.vb\")] public string ContentForVB { get; set; } Proverty Value Type Description String Parameters Declaration [YamlMember(Alias = \"parameters\")] [JsonProperty(\"parameters\")] public List<ApiParameter> Parameters { get; set; } Proverty Value Type Description System.Collections.Generic.List < ApiParameter > Return Declaration [YamlMember(Alias = \"return\")] [JsonProperty(\"return\")] public ApiParameter Return { get; set; } Proverty Value Type Description ApiParameter TypeParameters Declaration [YamlMember(Alias = \"typeParameters\")] [JsonProperty(\"typeParameters\")] public List<ApiParameter> TypeParameters { get; set; } Proverty Value Type Description System.Collections.Generic.List < ApiParameter > Methods FromModel(SyntaxDetail) Declaration public static SyntaxDetailViewModel FromModel(SyntaxDetail model) Parameters Type Name Description SyntaxDetail model Returns Type Description SyntaxDetailViewModel"
  },
  "api/Microsoft.DocAsCode.EntityModel.ViewModels.SpecViewModel.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.ViewModels.SpecViewModel.html",
    "title": "Class SpecViewModel\r\n   | DocFX website ",
    "keywords": "Class SpecViewModel Inheritance Object SpecViewModel Namespace :Microsoft.DocAsCode.EntityModel.ViewModels Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Serializable] public class SpecViewModel Properties FullName Declaration [YamlMember(Alias = \"fullName\")] [JsonProperty(\"fullName\")] public string FullName { get; set; } Proverty Value Type Description String Href Declaration [YamlMember(Alias = \"href\")] [JsonProperty(\"href\")] public string Href { get; set; } Proverty Value Type Description String IsExternal Declaration [YamlMember(Alias = \"isExternal\")] [JsonProperty(\"isExternal\")] public bool IsExternal { get; set; } Proverty Value Type Description Boolean Name Declaration [YamlMember(Alias = \"name\")] [JsonProperty(\"name\")] public string Name { get; set; } Proverty Value Type Description String Uid Declaration [YamlMember(Alias = \"uid\")] [JsonProperty(\"uid\")] public string Uid { get; set; } Proverty Value Type Description String Methods FromModel(LinkItem) Declaration public static SpecViewModel FromModel(LinkItem model) Parameters Type Name Description LinkItem model Returns Type Description SpecViewModel"
  },
  "api/Microsoft.DocAsCode.EntityModel.ViewModels.RestApiResponseViewModel.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.ViewModels.RestApiResponseViewModel.html",
    "title": "Class RestApiResponseViewModel\r\n   | DocFX website ",
    "keywords": "Class RestApiResponseViewModel Inheritance Object RestApiResponseViewModel Namespace :Microsoft.DocAsCode.EntityModel.ViewModels Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Serializable] public class RestApiResponseViewModel Properties Description Declaration [YamlMember(Alias = \"description\")] [JsonProperty(\"description\")] public string Description { get; set; } Proverty Value Type Description String Examples Declaration [YamlMember(Alias = \"examples\")] [JsonProperty(\"examples\")] public List<RestApiResponseExampleViewModel> Examples { get; set; } Proverty Value Type Description System.Collections.Generic.List < RestApiResponseExampleViewModel > HttpStatusCode Declaration [YamlMember(Alias = \"statusCode\")] [JsonProperty(\"statusCode\")] public string HttpStatusCode { get; set; } Proverty Value Type Description String Metadata Declaration [ExtensibleMember] [JsonExtensionData] public Dictionary<string, object> Metadata { get; set; } Proverty Value Type Description System.Collections.Generic.Dictionary < String , Object > Summary Declaration [YamlMember(Alias = \"summary\")] [JsonProperty(\"summary\")] public string Summary { get; set; } Proverty Value Type Description String"
  },
  "api/Microsoft.DocAsCode.EntityModel.ViewModels.RestApiResponseExampleViewModel.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.ViewModels.RestApiResponseExampleViewModel.html",
    "title": "Class RestApiResponseExampleViewModel\r\n   | DocFX website ",
    "keywords": "Class RestApiResponseExampleViewModel Inheritance Object RestApiResponseExampleViewModel Namespace :Microsoft.DocAsCode.EntityModel.ViewModels Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Serializable] public class RestApiResponseExampleViewModel Properties Content Declaration [YamlMember(Alias = \"content\")] [JsonProperty(\"content\")] public string Content { get; set; } Proverty Value Type Description String MimeType Declaration [YamlMember(Alias = \"mimeType\")] [JsonProperty(\"mimeType\")] public string MimeType { get; set; } Proverty Value Type Description String"
  },
  "api/Microsoft.DocAsCode.EntityModel.ViewModels.RestApiParameterViewModel.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.ViewModels.RestApiParameterViewModel.html",
    "title": "Class RestApiParameterViewModel\r\n   | DocFX website ",
    "keywords": "Class RestApiParameterViewModel Inheritance Object RestApiParameterViewModel Namespace :Microsoft.DocAsCode.EntityModel.ViewModels Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Serializable] public class RestApiParameterViewModel Properties Description Declaration [YamlMember(Alias = \"description\")] [JsonProperty(\"description\")] public string Description { get; set; } Proverty Value Type Description String Metadata Declaration [ExtensibleMember] [JsonExtensionData] public Dictionary<string, object> Metadata { get; set; } Proverty Value Type Description System.Collections.Generic.Dictionary < String , Object >"
  },
  "api/Microsoft.DocAsCode.EntityModel.ViewModels.RestApiItemViewModel.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.ViewModels.RestApiItemViewModel.html",
    "title": "Class RestApiItemViewModel\r\n   | DocFX website ",
    "keywords": "Class RestApiItemViewModel Inheritance Object RestApiItemViewModel Namespace :Microsoft.DocAsCode.EntityModel.ViewModels Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Serializable] public class RestApiItemViewModel : IOverwriteDocumentViewModel Properties Children Declaration [YamlMember(Alias = \"children\")] [JsonProperty(\"children\")] public List<RestApiItemViewModel> Children { get; set; } Proverty Value Type Description System.Collections.Generic.List < RestApiItemViewModel > Conceptual Declaration [YamlMember(Alias = \"conceptual\")] [JsonProperty(\"conceptual\")] public string Conceptual { get; set; } Proverty Value Type Description String Description Declaration [YamlMember(Alias = \"description\")] [JsonProperty(\"description\")] public string Description { get; set; } Proverty Value Type Description String Documentation Declaration [YamlMember(Alias = \"documentation\")] [JsonProperty(\"documentation\")] public SourceDetail Documentation { get; set; } Proverty Value Type Description SourceDetail HtmlId Declaration [YamlMember(Alias = \"htmlId\")] [JsonProperty(\"htmlId\")] [MergeOption(MergeOption.Ignore)] public string HtmlId { get; set; } Proverty Value Type Description String Metadata Declaration [ExtensibleMember] [JsonExtensionData] public Dictionary<string, object> Metadata { get; set; } Proverty Value Type Description System.Collections.Generic.Dictionary < String , Object > Name Declaration [YamlMember(Alias = \"name\")] [JsonProperty(\"name\")] public string Name { get; set; } Proverty Value Type Description String OperationId Declaration [YamlMember(Alias = \"operationId\")] [JsonProperty(\"operationId\")] public string OperationId { get; set; } Proverty Value Type Description String OperationName Declaration [YamlMember(Alias = \"operation\")] [JsonProperty(\"operation\")] public string OperationName { get; set; } Proverty Value Type Description String Parameters Declaration [YamlMember(Alias = \"parameters\")] [JsonProperty(\"parameters\")] public List<RestApiParameterViewModel> Parameters { get; set; } Proverty Value Type Description System.Collections.Generic.List < RestApiParameterViewModel > Path Declaration [YamlMember(Alias = \"path\")] [JsonProperty(\"path\")] public string Path { get; set; } Proverty Value Type Description String Raw The original swagger.json cpntent _ prefix indicates that this metadata is generated Declaration [YamlMember(Alias = \"_raw\")] [JsonProperty(\"_raw\")] [MergeOption(MergeOption.Ignore)] public string Raw { get; set; } Proverty Value Type Description String Responses Declaration [YamlMember(Alias = \"responses\")] [JsonProperty(\"responses\")] public List<RestApiResponseViewModel> Responses { get; set; } Proverty Value Type Description System.Collections.Generic.List < RestApiResponseViewModel > Summary Declaration [YamlMember(Alias = \"summary\")] [JsonProperty(\"summary\")] public string Summary { get; set; } Proverty Value Type Description String Uid Declaration [YamlMember(Alias = \"uid\")] [JsonProperty(\"uid\")] [MergeOption(MergeOption.MergeKey)] public string Uid { get; set; } Proverty Value Type Description String Methods FromSwaggerModel(SwaggerModel) Declaration public static RestApiItemViewModel FromSwaggerModel(SwaggerModel swagger) Parameters Type Name Description SwaggerModel swagger Returns Type Description RestApiItemViewModel"
  },
  "api/Microsoft.DocAsCode.EntityModel.ViewModels.ReferenceViewModel.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.ViewModels.ReferenceViewModel.html",
    "title": "Class ReferenceViewModel\r\n   | DocFX website ",
    "keywords": "Class ReferenceViewModel Inheritance Object ReferenceViewModel Namespace :Microsoft.DocAsCode.EntityModel.ViewModels Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Serializable] public class ReferenceViewModel Properties Additional Declaration [ExtensibleMember] [JsonIgnore] public Dictionary<string, object> Additional { get; } Proverty Value Type Description System.Collections.Generic.Dictionary < String , Object > AdditionalJson Declaration [EditorBrowsable(EditorBrowsableState.Never)] [YamlIgnore] [JsonExtensionData(ReadData = false, WriteData = true)] public Dictionary<string, object> AdditionalJson { get; set; } Proverty Value Type Description System.Collections.Generic.Dictionary < String , Object > Definition Declaration [YamlMember(Alias = \"definition\")] [JsonProperty(\"definition\")] public string Definition { get; set; } Proverty Value Type Description String FullName Declaration [YamlMember(Alias = \"fullName\")] [JsonProperty(\"fullName\")] public string FullName { get; set; } Proverty Value Type Description String FullNameForCSharp Declaration [YamlIgnore] [JsonIgnore] public string FullNameForCSharp { get; set; } Proverty Value Type Description String FullNameForVB Declaration [YamlIgnore] [JsonIgnore] public string FullNameForVB { get; set; } Proverty Value Type Description String FullNameInDevLangs Declaration [ExtensibleMember(\"fullname.\")] [JsonIgnore] public SortedList<string, string> FullNameInDevLangs { get; } Proverty Value Type Description System.Collections.Generic.SortedList < String , String > Href Declaration [YamlMember(Alias = \"href\")] [JsonProperty(\"href\")] public string Href { get; set; } Proverty Value Type Description String IsExternal Declaration [JsonProperty(\"isExternal\")] [YamlMember(Alias = \"isExternal\")] public bool ? IsExternal { get; set; } Proverty Value Type Description System.Nullable < Boolean > Name Declaration [YamlMember(Alias = \"name\")] [JsonProperty(\"name\")] public string Name { get; set; } Proverty Value Type Description String NameForCSharp Declaration [YamlIgnore] [JsonIgnore] public string NameForCSharp { get; set; } Proverty Value Type Description String NameForVB Declaration [YamlIgnore] [JsonIgnore] public string NameForVB { get; set; } Proverty Value Type Description String NameInDevLangs Declaration [ExtensibleMember(\"name.\")] [JsonIgnore] public SortedList<string, string> NameInDevLangs { get; } Proverty Value Type Description System.Collections.Generic.SortedList < String , String > Parent Declaration [YamlMember(Alias = \"parent\")] [JsonProperty(\"parent\")] public string Parent { get; set; } Proverty Value Type Description String Platform Declaration [YamlMember(Alias = \"platform\")] [JsonProperty(\"platform\")] public List<string> Platform { get; set; } Proverty Value Type Description System.Collections.Generic.List < String > SpecForCSharp Declaration [YamlIgnore] [JsonIgnore] public List<SpecViewModel> SpecForCSharp { get; set; } Proverty Value Type Description System.Collections.Generic.List < SpecViewModel > SpecForVB Declaration [YamlIgnore] [JsonIgnore] public List<SpecViewModel> SpecForVB { get; set; } Proverty Value Type Description System.Collections.Generic.List < SpecViewModel > Specs Declaration [ExtensibleMember(\"spec.\")] [JsonIgnore] public SortedList<string, List<SpecViewModel>> Specs { get; } Proverty Value Type Description System.Collections.Generic.SortedList < String , System.Collections.Generic.List < SpecViewModel >> Summary Declaration [YamlMember(Alias = \"summary\")] [JsonProperty(\"summary\")] public string Summary { get; set; } Proverty Value Type Description String Syntax Declaration [YamlMember(Alias = \"syntax\")] [JsonProperty(\"syntax\")] public SyntaxDetailViewModel Syntax { get; set; } Proverty Value Type Description SyntaxDetailViewModel Type Declaration [YamlMember(Alias = \"type\")] [JsonProperty(\"type\")] public MemberType? Type { get; set; } Proverty Value Type Description System.Nullable < MemberType > Uid Declaration [YamlMember(Alias = \"uid\")] [JsonProperty(\"uid\")] public string Uid { get; set; } Proverty Value Type Description String Methods FromModel(KeyValuePair<String, ReferenceItem>) Declaration public static ReferenceViewModel FromModel(KeyValuePair<string, ReferenceItem> model) Parameters Type Name Description System.Collections.Generic.KeyValuePair < String , ReferenceItem > model Returns Type Description ReferenceViewModel"
  },
  "api/Microsoft.DocAsCode.EntityModel.ViewModels.PageViewModel.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.ViewModels.PageViewModel.html",
    "title": "Class PageViewModel\r\n   | DocFX website ",
    "keywords": "Class PageViewModel Inheritance Object PageViewModel Namespace :Microsoft.DocAsCode.EntityModel.ViewModels Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Serializable] public class PageViewModel Properties Items Declaration [YamlMember(Alias = \"items\")] [JsonProperty(\"items\")] public List<ItemViewModel> Items { get; set; } Proverty Value Type Description System.Collections.Generic.List < ItemViewModel > Metadata Declaration [ExtensibleMember] [JsonExtensionData] public Dictionary<string, object> Metadata { get; set; } Proverty Value Type Description System.Collections.Generic.Dictionary < String , Object > References Declaration [YamlMember(Alias = \"references\")] [JsonProperty(\"references\")] public List<ReferenceViewModel> References { get; set; } Proverty Value Type Description System.Collections.Generic.List < ReferenceViewModel > Methods FromModel(MetadataItem) Declaration public static PageViewModel FromModel(MetadataItem model) Parameters Type Name Description MetadataItem model Returns Type Description PageViewModel"
  },
  "api/Microsoft.DocAsCode.EntityModel.ViewModels.ItemViewModel.html": {
    "href": "api/Microsoft.DocAsCode.EntityModel.ViewModels.ItemViewModel.html",
    "title": "Class ItemViewModel\r\n   | DocFX website ",
    "keywords": "Class ItemViewModel Inheritance Object ItemViewModel Namespace :Microsoft.DocAsCode.EntityModel.ViewModels Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Serializable] public class ItemViewModel : IOverwriteDocumentViewModel Properties AssemblyNameList Declaration [YamlMember(Alias = \"assemblies\")] [MergeOption(MergeOption.Ignore)] [JsonProperty(\"assemblies\")] public List<string> AssemblyNameList { get; set; } Proverty Value Type Description System.Collections.Generic.List < String > Children Declaration [YamlMember(Alias = \"children\")] [MergeOption(MergeOption.Ignore)] [JsonProperty(\"children\")] public List<string> Children { get; set; } Proverty Value Type Description System.Collections.Generic.List < String > Conceptual Declaration [YamlMember(Alias = \"conceptual\")] [JsonProperty(\"conceptual\")] public string Conceptual { get; set; } Proverty Value Type Description String Documentation Declaration [YamlMember(Alias = \"documentation\")] [JsonProperty(\"documentation\")] public SourceDetail Documentation { get; set; } Proverty Value Type Description SourceDetail Examples Declaration [YamlMember(Alias = \"example\")] [JsonProperty(\"example\")] public List<string> Examples { get; set; } Proverty Value Type Description System.Collections.Generic.List < String > Exceptions Declaration [YamlMember(Alias = \"exceptions\")] [JsonProperty(\"exceptions\")] public List<CrefInfo> Exceptions { get; set; } Proverty Value Type Description System.Collections.Generic.List < CrefInfo > ExtensionData Declaration [EditorBrowsable(EditorBrowsableState.Never)] [YamlIgnore] [JsonExtensionData(WriteData = true, ReadData = false)] public Dictionary<string, object> ExtensionData { get; } Proverty Value Type Description System.Collections.Generic.Dictionary < String , Object > FullName Declaration [YamlMember(Alias = \"fullName\")] [JsonProperty(\"fullName\")] public string FullName { get; set; } Proverty Value Type Description String FullNameForCSharp Declaration [YamlIgnore] [JsonIgnore] public string FullNameForCSharp { get; set; } Proverty Value Type Description String FullNameForVB Declaration [YamlIgnore] [JsonIgnore] public string FullNameForVB { get; set; } Proverty Value Type Description String FullNames Declaration [ExtensibleMember(\"fullName.\")] [JsonIgnore] public SortedList<string, string> FullNames { get; set; } Proverty Value Type Description System.Collections.Generic.SortedList < String , String > Href Declaration [YamlMember(Alias = \"href\")] [JsonProperty(\"href\")] public string Href { get; set; } Proverty Value Type Description String Id Declaration [YamlMember(Alias = \"id\")] [JsonProperty(\"id\")] public string Id { get; set; } Proverty Value Type Description String Implements Declaration [YamlMember(Alias = \"implements\")] [MergeOption(MergeOption.Ignore)] [JsonProperty(\"implements\")] public List<string> Implements { get; set; } Proverty Value Type Description System.Collections.Generic.List < String > Inheritance Declaration [YamlMember(Alias = \"inheritance\")] [MergeOption(MergeOption.Ignore)] [JsonProperty(\"inheritance\")] public List<string> Inheritance { get; set; } Proverty Value Type Description System.Collections.Generic.List < String > InheritedMembers Declaration [YamlMember(Alias = \"inheritedMembers\")] [MergeOption(MergeOption.Ignore)] [JsonProperty(\"inheritedMembers\")] public List<string> InheritedMembers { get; set; } Proverty Value Type Description System.Collections.Generic.List < String > Metadata Declaration [ExtensibleMember] [JsonIgnore] public Dictionary<string, object> Metadata { get; set; } Proverty Value Type Description System.Collections.Generic.Dictionary < String , Object > Modifiers Declaration [ExtensibleMember(\"modifiers.\")] [MergeOption(MergeOption.Ignore)] [JsonIgnore] public SortedList<string, List<string>> Modifiers { get; set; } Proverty Value Type Description System.Collections.Generic.SortedList < String , System.Collections.Generic.List < String >> Name Declaration [YamlMember(Alias = \"name\")] [JsonProperty(\"name\")] public string Name { get; set; } Proverty Value Type Description String NameForCSharp Declaration [YamlIgnore] [JsonIgnore] public string NameForCSharp { get; set; } Proverty Value Type Description String NameForVB Declaration [YamlIgnore] [JsonIgnore] public string NameForVB { get; set; } Proverty Value Type Description String Names Declaration [ExtensibleMember(\"name.\")] [JsonIgnore] public SortedList<string, string> Names { get; set; } Proverty Value Type Description System.Collections.Generic.SortedList < String , String > NamespaceName Declaration [YamlMember(Alias = \"namespace\")] [JsonProperty(\"namespace\")] public string NamespaceName { get; set; } Proverty Value Type Description String Overridden Declaration [YamlMember(Alias = \"overridden\")] [JsonProperty(\"overridden\")] public string Overridden { get; set; } Proverty Value Type Description String Parent Declaration [YamlMember(Alias = \"parent\")] [JsonProperty(\"parent\")] public string Parent { get; set; } Proverty Value Type Description String Platform Declaration [YamlMember(Alias = \"platform\")] [JsonProperty(\"platform\")] public List<string> Platform { get; set; } Proverty Value Type Description System.Collections.Generic.List < String > Remarks Declaration [YamlMember(Alias = \"remarks\")] [JsonProperty(\"remarks\")] public string Remarks { get; set; } Proverty Value Type Description String SeeAlsos Declaration [YamlMember(Alias = \"seealso\")] [JsonProperty(\"seealso\")] public List<CrefInfo> SeeAlsos { get; set; } Proverty Value Type Description System.Collections.Generic.List < CrefInfo > Sees Declaration [YamlMember(Alias = \"see\")] [JsonProperty(\"see\")] public List<CrefInfo> Sees { get; set; } Proverty Value Type Description System.Collections.Generic.List < CrefInfo > Source Declaration [YamlMember(Alias = \"source\")] [JsonProperty(\"source\")] public SourceDetail Source { get; set; } Proverty Value Type Description SourceDetail Summary Declaration [YamlMember(Alias = \"summary\")] [JsonProperty(\"summary\")] public string Summary { get; set; } Proverty Value Type Description String SupportedLanguages Declaration [YamlMember(Alias = \"langs\")] [JsonProperty(\"langs\")] public string[] SupportedLanguages { get; set; } Proverty Value Type Description String [] Syntax Declaration [YamlMember(Alias = \"syntax\")] [JsonProperty(\"syntax\")] public SyntaxDetailViewModel Syntax { get; set; } Proverty Value Type Description SyntaxDetailViewModel Type Declaration [YamlMember(Alias = \"type\")] [JsonProperty(\"type\")] public MemberType? Type { get; set; } Proverty Value Type Description System.Nullable < MemberType > Uid Declaration [YamlMember(Alias = \"uid\")] [JsonProperty(\"uid\")] [MergeOption(MergeOption.MergeKey)] public string Uid { get; set; } Proverty Value Type Description String Methods FromModel(MetadataItem) Declaration public static ItemViewModel FromModel(MetadataItem model) Parameters Type Name Description MetadataItem model Returns Type Description ItemViewModel"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownBrInlineToken.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownBrInlineToken.html",
    "title": "Class MarkdownBrInlineToken\r\n   | DocFX website ",
    "keywords": "Class MarkdownBrInlineToken Inheritance Object MarkdownBrInlineToken Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownBrInlineToken : IMarkdownToken Constructors MarkdownBrInlineToken(IMarkdownRule, IMarkdownContext, String) Declaration public MarkdownBrInlineToken(IMarkdownRule rule, IMarkdownContext context, string rawMarkdown) Parameters Type Name Description IMarkdownRule rule IMarkdownContext context String rawMarkdown Properties Context Declaration public IMarkdownContext Context { get; } Proverty Value Type Description IMarkdownContext RawMarkdown Declaration public string RawMarkdown { get; set; } Proverty Value Type Description String Rule Declaration public IMarkdownRule Rule { get; } Proverty Value Type Description IMarkdownRule"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownBrInlineRule.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownBrInlineRule.html",
    "title": "Class MarkdownBrInlineRule\r\n   | DocFX website ",
    "keywords": "Class MarkdownBrInlineRule Inheritance Object MarkdownBrInlineRule Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownBrInlineRule : IMarkdownRule Properties Br Declaration public virtual Regex Br { get; } Proverty Value Type Description Regex Name Declaration public string Name { get; } Proverty Value Type Description String Methods TryMatch(IMarkdownParser, ref String) Declaration public virtual IMarkdownToken TryMatch(IMarkdownParser engine, ref string source) Parameters Type Name Description IMarkdownParser engine String source Returns Type Description IMarkdownToken"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownBlockquoteBlockToken.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownBlockquoteBlockToken.html",
    "title": "Class MarkdownBlockquoteBlockToken\r\n   | DocFX website ",
    "keywords": "Class MarkdownBlockquoteBlockToken Inheritance Object MarkdownBlockquoteBlockToken Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownBlockquoteBlockToken : IMarkdownToken, IMarkdownRewritable<MarkdownBlockquoteBlockToken> Constructors MarkdownBlockquoteBlockToken(IMarkdownRule, IMarkdownContext, ImmutableArray<IMarkdownToken>, String) Declaration public MarkdownBlockquoteBlockToken(IMarkdownRule rule, IMarkdownContext context, ImmutableArray<IMarkdownToken> tokens, string rawMarkdown) Parameters Type Name Description IMarkdownRule rule IMarkdownContext context System.Collections.Immutable.ImmutableArray < IMarkdownToken > tokens String rawMarkdown Properties Context Declaration public IMarkdownContext Context { get; } Proverty Value Type Description IMarkdownContext RawMarkdown Declaration public string RawMarkdown { get; set; } Proverty Value Type Description String Rule Declaration public IMarkdownRule Rule { get; } Proverty Value Type Description IMarkdownRule Tokens Declaration public ImmutableArray<IMarkdownToken> Tokens { get; } Proverty Value Type Description System.Collections.Immutable.ImmutableArray < IMarkdownToken > Methods Rewrite(IMarkdownRewriteEngine) Declaration public MarkdownBlockquoteBlockToken Rewrite(IMarkdownRewriteEngine rewriterEngine) Parameters Type Name Description IMarkdownRewriteEngine rewriterEngine Returns Type Description MarkdownBlockquoteBlockToken"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownBlockquoteBlockRule.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownBlockquoteBlockRule.html",
    "title": "Class MarkdownBlockquoteBlockRule\r\n   | DocFX website ",
    "keywords": "Class MarkdownBlockquoteBlockRule Inheritance Object MarkdownBlockquoteBlockRule Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownBlockquoteBlockRule : IMarkdownRule Properties Blockquote Declaration public virtual Regex Blockquote { get; } Proverty Value Type Description Regex LeadingBlockquote Declaration public virtual Regex LeadingBlockquote { get; } Proverty Value Type Description Regex Name Declaration public virtual string Name { get; } Proverty Value Type Description String Methods TryMatch(IMarkdownParser, ref String) Declaration public virtual IMarkdownToken TryMatch(IMarkdownParser engine, ref string source) Parameters Type Name Description IMarkdownParser engine String source Returns Type Description IMarkdownToken"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownBlockContext.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownBlockContext.html",
    "title": "Class MarkdownBlockContext\r\n   | DocFX website ",
    "keywords": "Class MarkdownBlockContext Inheritance Object MarkdownBlockContext Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownBlockContext : IMarkdownContext Constructors MarkdownBlockContext(ImmutableList<IMarkdownRule>, IMarkdownContext) Declaration public MarkdownBlockContext(ImmutableList<IMarkdownRule> rules, IMarkdownContext inlineContext) Parameters Type Name Description System.Collections.Immutable.ImmutableList < IMarkdownRule > rules IMarkdownContext inlineContext MarkdownBlockContext(ImmutableList<IMarkdownRule>, IMarkdownContext, ImmutableDictionary<String, Object>) Declaration protected MarkdownBlockContext(ImmutableList<IMarkdownRule> rules, IMarkdownContext inlineContext, ImmutableDictionary<string, object> variables) Parameters Type Name Description System.Collections.Immutable.ImmutableList < IMarkdownRule > rules IMarkdownContext inlineContext System.Collections.Immutable.ImmutableDictionary < String , Object > variables Fields IsBlockQuote Declaration public const string IsBlockQuote IsTop Declaration public const string IsTop Properties Rules Declaration public ImmutableList<IMarkdownRule> Rules { get; } Proverty Value Type Description System.Collections.Immutable.ImmutableList < IMarkdownRule > Variables Declaration public ImmutableDictionary<string, object> Variables { get; } Proverty Value Type Description System.Collections.Immutable.ImmutableDictionary < String , Object > Methods CreateContext(ImmutableDictionary<String, Object>) Declaration public virtual IMarkdownContext CreateContext(ImmutableDictionary<string, object> variables) Parameters Type Name Description System.Collections.Immutable.ImmutableDictionary < String , Object > variables Returns Type Description IMarkdownContext GetInlineContext() Declaration public IMarkdownContext GetInlineContext() Returns Type Description IMarkdownContext"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.MarkdownAutoLinkInlineRule.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.MarkdownAutoLinkInlineRule.html",
    "title": "Class MarkdownAutoLinkInlineRule\r\n   | DocFX website ",
    "keywords": "Class MarkdownAutoLinkInlineRule Inheritance Object MarkdownAutoLinkInlineRule Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class MarkdownAutoLinkInlineRule : IMarkdownRule Properties AutoLink Declaration public virtual Regex AutoLink { get; } Proverty Value Type Description Regex Name Declaration public string Name { get; } Proverty Value Type Description String Methods Mangle(String) Declaration protected virtual StringBuffer Mangle(string text) Parameters Type Name Description String text Returns Type Description StringBuffer TryMatch(IMarkdownParser, ref String) Declaration public virtual IMarkdownToken TryMatch(IMarkdownParser engine, ref string source) Parameters Type Name Description IMarkdownParser engine String source Returns Type Description IMarkdownToken"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.LinkObj.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.LinkObj.html",
    "title": "Class LinkObj\r\n   | DocFX website ",
    "keywords": "Class LinkObj Inheritance Object LinkObj Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class LinkObj Properties Href Declaration public string Href { get; set; } Proverty Value Type Description String Title Declaration public string Title { get; set; } Proverty Value Type Description String"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.InlineContent.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.InlineContent.html",
    "title": "Class InlineContent\r\n   | DocFX website ",
    "keywords": "Class InlineContent Inheritance Object InlineContent Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class InlineContent : IMarkdownRewritable<InlineContent> Constructors InlineContent(ImmutableArray<IMarkdownToken>) Declaration public InlineContent(ImmutableArray<IMarkdownToken> tokens) Parameters Type Name Description System.Collections.Immutable.ImmutableArray < IMarkdownToken > tokens Properties Tokens Declaration public ImmutableArray<IMarkdownToken> Tokens { get; } Proverty Value Type Description System.Collections.Immutable.ImmutableArray < IMarkdownToken > Methods Rewrite(IMarkdownRewriteEngine) Declaration public InlineContent Rewrite(IMarkdownRewriteEngine rewriterEngine) Parameters Type Name Description IMarkdownRewriteEngine rewriterEngine Returns Type Description InlineContent"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.IMarkdownTokenValidatorProvider.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.IMarkdownTokenValidatorProvider.html",
    "title": "Interface IMarkdownTokenValidatorProvider\r\n   | DocFX website ",
    "keywords": "Interface IMarkdownTokenValidatorProvider Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public interface IMarkdownTokenValidatorProvider Methods GetValidators() Declaration ImmutableArray<IMarkdownTokenValidator> GetValidators() Returns Type Description System.Collections.Immutable.ImmutableArray < IMarkdownTokenValidator >"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.IMarkdownTokenValidator.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.IMarkdownTokenValidator.html",
    "title": "Interface IMarkdownTokenValidator\r\n   | DocFX website ",
    "keywords": "Interface IMarkdownTokenValidator Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public interface IMarkdownTokenValidator Methods Validate(IMarkdownToken) Declaration void Validate(IMarkdownToken token) Parameters Type Name Description IMarkdownToken token"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.IMarkdownTokenRewriter.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.IMarkdownTokenRewriter.html",
    "title": "Interface IMarkdownTokenRewriter\r\n   | DocFX website ",
    "keywords": "Interface IMarkdownTokenRewriter rewrite the markdown when rendering Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public interface IMarkdownTokenRewriter Methods Rewrite(IMarkdownRewriteEngine, IMarkdownToken) rewrite Declaration IMarkdownToken Rewrite(IMarkdownRewriteEngine engine, IMarkdownToken token) Parameters Type Name Description IMarkdownRewriteEngine engine the engine IMarkdownToken token the token Returns Type Description IMarkdownToken If need rewrite, return the new token, otherwise, null"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.IMarkdownToken.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.IMarkdownToken.html",
    "title": "Interface IMarkdownToken\r\n   | DocFX website ",
    "keywords": "Interface IMarkdownToken The token for markdown. It should be immutable. Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public interface IMarkdownToken Properties Context The context when created this token. Declaration IMarkdownContext Context { get; } Proverty Value Type Description IMarkdownContext RawMarkdown The raw markdown. Declaration string RawMarkdown { get; set; } Proverty Value Type Description String Rule The rule created this token. Declaration IMarkdownRule Rule { get; } Proverty Value Type Description IMarkdownRule"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.IMarkdownRule.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.IMarkdownRule.html",
    "title": "Interface IMarkdownRule\r\n   | DocFX website ",
    "keywords": "Interface IMarkdownRule Markdown rule. Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public interface IMarkdownRule Properties Name Get the name of rule. Declaration string Name { get; } Proverty Value Type Description String Methods TryMatch(IMarkdownParser, ref String) Try match this rule. Declaration IMarkdownToken TryMatch(IMarkdownParser parser, ref string source) Parameters Type Name Description IMarkdownParser parser The markdown parser. String source The source of markdown text. Returns Type Description IMarkdownToken If matched, an instance of IMarkdownToken should be return, otherwise null."
  },
  "api/Microsoft.DocAsCode.MarkdownLite.IMarkdownRewriteEngine.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.IMarkdownRewriteEngine.html",
    "title": "Interface IMarkdownRewriteEngine\r\n   | DocFX website ",
    "keywords": "Interface IMarkdownRewriteEngine Markdown rewrite engine. Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public interface IMarkdownRewriteEngine Properties Engine Get markdown engine. Declaration IMarkdownEngine Engine { get; } Proverty Value Type Description IMarkdownEngine Methods Rewrite(ImmutableArray<IMarkdownToken>) Rewrite markdown tokens. Declaration ImmutableArray<IMarkdownToken> Rewrite(ImmutableArray<IMarkdownToken> tokens) Parameters Type Name Description System.Collections.Immutable.ImmutableArray < IMarkdownToken > tokens Source markdown tokens. Returns Type Description System.Collections.Immutable.ImmutableArray < IMarkdownToken > Rewritten markdown tokens."
  },
  "api/Microsoft.DocAsCode.MarkdownLite.IMarkdownRewritable`1.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.IMarkdownRewritable`1.html",
    "title": "Interface IMarkdownRewritable&lt;T&gt;\r\n   | DocFX website ",
    "keywords": "Interface IMarkdownRewritable<T> Markdown rewritable (for object contains IMarkdownToken ). Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public interface IMarkdownRewritable<out T> Methods Rewrite(IMarkdownRewriteEngine) Rewrite object with IMarkdownRewriteEngine Declaration T Rewrite(IMarkdownRewriteEngine rewriteEngine) Parameters Type Name Description IMarkdownRewriteEngine rewriteEngine The rewrite engine Returns Type Description T The rewritten object."
  },
  "api/Microsoft.DocAsCode.MarkdownLite.IMarkdownRenderer.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.IMarkdownRenderer.html",
    "title": "Interface IMarkdownRenderer\r\n   | DocFX website ",
    "keywords": "Interface IMarkdownRenderer Markdown renderer. Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public interface IMarkdownRenderer Properties Engine Get the markdown engine. Declaration IMarkdownEngine Engine { get; } Proverty Value Type Description IMarkdownEngine Links Get the No. links. Declaration Dictionary<string, LinkObj> Links { get; } Proverty Value Type Description System.Collections.Generic.Dictionary < String , LinkObj > Options Get the Options . Declaration Options Options { get; } Proverty Value Type Description Options Methods Render(IMarkdownToken) Render a token. Declaration StringBuffer Render(IMarkdownToken token) Parameters Type Name Description IMarkdownToken token The token to render. Returns Type Description StringBuffer The text."
  },
  "api/Microsoft.DocAsCode.MarkdownLite.IMarkdownParser.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.IMarkdownParser.html",
    "title": "Interface IMarkdownParser\r\n   | DocFX website ",
    "keywords": "Interface IMarkdownParser Markdown parser. Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public interface IMarkdownParser Properties Context Get the current markdown context. Declaration IMarkdownContext Context { get; } Proverty Value Type Description IMarkdownContext Links Get the No. links. Declaration Dictionary<string, LinkObj> Links { get; } Proverty Value Type Description System.Collections.Generic.Dictionary < String , LinkObj > Options Get the Options . Declaration Options Options { get; } Proverty Value Type Description Options Methods SwitchContext(IMarkdownContext) Switch the markdown context. Declaration IMarkdownContext SwitchContext(IMarkdownContext context) Parameters Type Name Description IMarkdownContext context New context. Returns Type Description IMarkdownContext The old context. Tokenize(String) Tokenize the markdown text. Declaration ImmutableArray<IMarkdownToken> Tokenize(string markdown) Parameters Type Name Description String markdown The markdown text. Returns Type Description System.Collections.Immutable.ImmutableArray < IMarkdownToken > A list of IMarkdownToken ."
  },
  "api/Microsoft.DocAsCode.MarkdownLite.IMarkdownEngine.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.IMarkdownEngine.html",
    "title": "Interface IMarkdownEngine\r\n   | DocFX website ",
    "keywords": "Interface IMarkdownEngine Markdown engine Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public interface IMarkdownEngine Properties Parser Get the parser (it can read markdown text, then return markdown tokens). Declaration IMarkdownParser Parser { get; } Proverty Value Type Description IMarkdownParser Renderer Get the renderer (it can read markdown token, then return text e.g. html). Declaration IMarkdownRenderer Renderer { get; } Proverty Value Type Description IMarkdownRenderer RewriteEngine Get the rewriter (it can read markdown tokens, then rewrite them and return). Declaration IMarkdownRewriteEngine RewriteEngine { get; } Proverty Value Type Description IMarkdownRewriteEngine Methods Mark(String, IMarkdownContext) Mark markdown text. Declaration StringBuffer Mark(string markdown, IMarkdownContext context = null) Parameters Type Name Description String markdown The markdown text. IMarkdownContext context The markdown context contains rules. Returns Type Description StringBuffer Rendered text. Markup(String) Mark markdown text. Declaration string Markup(string markdown) Parameters Type Name Description String markdown The markdown text. Returns Type Description String Rendered text."
  },
  "api/Microsoft.DocAsCode.MarkdownLite.IMarkdownContext.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.IMarkdownContext.html",
    "title": "Interface IMarkdownContext\r\n   | DocFX website ",
    "keywords": "Interface IMarkdownContext The context for markdown parser. It should be immutable. Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public interface IMarkdownContext Properties Rules Get the rule set for current context. Declaration ImmutableList<IMarkdownRule> Rules { get; } Proverty Value Type Description System.Collections.Immutable.ImmutableList < IMarkdownRule > Variables Get the variables. Declaration ImmutableDictionary<string, object> Variables { get; } Proverty Value Type Description System.Collections.Immutable.ImmutableDictionary < String , Object > Methods CreateContext(ImmutableDictionary<String, Object>) Create a new context with different variables. Declaration IMarkdownContext CreateContext(ImmutableDictionary<string, object> variables) Parameters Type Name Description System.Collections.Immutable.ImmutableDictionary < String , Object > variables The new variables. Returns Type Description IMarkdownContext a new instance of IMarkdownContext"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.HtmlRenderer.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.HtmlRenderer.html",
    "title": "Class HtmlRenderer\r\n   | DocFX website ",
    "keywords": "Class HtmlRenderer The html renderer for gfm. Inheritance Object HtmlRenderer Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class HtmlRenderer Methods Render(IMarkdownRenderer, GfmDelInlineToken, MarkdownInlineContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer engine, GfmDelInlineToken token, MarkdownInlineContext context) Parameters Type Name Description IMarkdownRenderer engine GfmDelInlineToken token MarkdownInlineContext context Returns Type Description StringBuffer Render(IMarkdownRenderer, MarkdownBlockquoteBlockToken, MarkdownBlockContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer renderer, MarkdownBlockquoteBlockToken token, MarkdownBlockContext context) Parameters Type Name Description IMarkdownRenderer renderer MarkdownBlockquoteBlockToken token MarkdownBlockContext context Returns Type Description StringBuffer Render(IMarkdownRenderer, MarkdownBrInlineToken, MarkdownInlineContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer engine, MarkdownBrInlineToken token, MarkdownInlineContext context) Parameters Type Name Description IMarkdownRenderer engine MarkdownBrInlineToken token MarkdownInlineContext context Returns Type Description StringBuffer Render(IMarkdownRenderer, MarkdownCodeBlockToken, MarkdownBlockContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer engine, MarkdownCodeBlockToken token, MarkdownBlockContext context) Parameters Type Name Description IMarkdownRenderer engine MarkdownCodeBlockToken token MarkdownBlockContext context Returns Type Description StringBuffer Render(IMarkdownRenderer, MarkdownCodeInlineToken, MarkdownInlineContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer engine, MarkdownCodeInlineToken token, MarkdownInlineContext context) Parameters Type Name Description IMarkdownRenderer engine MarkdownCodeInlineToken token MarkdownInlineContext context Returns Type Description StringBuffer Render(IMarkdownRenderer, MarkdownEmInlineToken, MarkdownInlineContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer engine, MarkdownEmInlineToken token, MarkdownInlineContext context) Parameters Type Name Description IMarkdownRenderer engine MarkdownEmInlineToken token MarkdownInlineContext context Returns Type Description StringBuffer Render(IMarkdownRenderer, MarkdownEscapeInlineToken, MarkdownInlineContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer engine, MarkdownEscapeInlineToken token, MarkdownInlineContext context) Parameters Type Name Description IMarkdownRenderer engine MarkdownEscapeInlineToken token MarkdownInlineContext context Returns Type Description StringBuffer Render(IMarkdownRenderer, MarkdownHeadingBlockToken, MarkdownBlockContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer engine, MarkdownHeadingBlockToken token, MarkdownBlockContext context) Parameters Type Name Description IMarkdownRenderer engine MarkdownHeadingBlockToken token MarkdownBlockContext context Returns Type Description StringBuffer Render(IMarkdownRenderer, MarkdownHrBlockToken, MarkdownBlockContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer engine, MarkdownHrBlockToken token, MarkdownBlockContext context) Parameters Type Name Description IMarkdownRenderer engine MarkdownHrBlockToken token MarkdownBlockContext context Returns Type Description StringBuffer Render(IMarkdownRenderer, MarkdownHtmlBlockToken, MarkdownBlockContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer engine, MarkdownHtmlBlockToken token, MarkdownBlockContext context) Parameters Type Name Description IMarkdownRenderer engine MarkdownHtmlBlockToken token MarkdownBlockContext context Returns Type Description StringBuffer Render(IMarkdownRenderer, MarkdownIgnoreToken, IMarkdownContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer engine, MarkdownIgnoreToken token, IMarkdownContext context) Parameters Type Name Description IMarkdownRenderer engine MarkdownIgnoreToken token IMarkdownContext context Returns Type Description StringBuffer Render(IMarkdownRenderer, MarkdownImageInlineToken, MarkdownInlineContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer engine, MarkdownImageInlineToken token, MarkdownInlineContext context) Parameters Type Name Description IMarkdownRenderer engine MarkdownImageInlineToken token MarkdownInlineContext context Returns Type Description StringBuffer Render(IMarkdownRenderer, MarkdownLinkInlineToken, MarkdownInlineContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer engine, MarkdownLinkInlineToken token, MarkdownInlineContext context) Parameters Type Name Description IMarkdownRenderer engine MarkdownLinkInlineToken token MarkdownInlineContext context Returns Type Description StringBuffer Render(IMarkdownRenderer, MarkdownListBlockToken, MarkdownBlockContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer engine, MarkdownListBlockToken token, MarkdownBlockContext context) Parameters Type Name Description IMarkdownRenderer engine MarkdownListBlockToken token MarkdownBlockContext context Returns Type Description StringBuffer Render(IMarkdownRenderer, MarkdownListItemBlockToken) Declaration protected virtual StringBuffer Render(IMarkdownRenderer renderer, MarkdownListItemBlockToken token) Parameters Type Name Description IMarkdownRenderer renderer MarkdownListItemBlockToken token Returns Type Description StringBuffer Render(IMarkdownRenderer, MarkdownNewLineBlockToken, MarkdownBlockContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer engine, MarkdownNewLineBlockToken token, MarkdownBlockContext context) Parameters Type Name Description IMarkdownRenderer engine MarkdownNewLineBlockToken token MarkdownBlockContext context Returns Type Description StringBuffer Render(IMarkdownRenderer, MarkdownNonParagraphBlockToken, MarkdownBlockContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer renderer, MarkdownNonParagraphBlockToken token, MarkdownBlockContext context) Parameters Type Name Description IMarkdownRenderer renderer MarkdownNonParagraphBlockToken token MarkdownBlockContext context Returns Type Description StringBuffer Render(IMarkdownRenderer, MarkdownParagraphBlockToken, MarkdownBlockContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer engine, MarkdownParagraphBlockToken token, MarkdownBlockContext context) Parameters Type Name Description IMarkdownRenderer engine MarkdownParagraphBlockToken token MarkdownBlockContext context Returns Type Description StringBuffer Render(IMarkdownRenderer, MarkdownRawToken, IMarkdownContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer engine, MarkdownRawToken token, IMarkdownContext context) Parameters Type Name Description IMarkdownRenderer engine MarkdownRawToken token IMarkdownContext context Returns Type Description StringBuffer Render(IMarkdownRenderer, MarkdownStrongInlineToken, MarkdownInlineContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer engine, MarkdownStrongInlineToken token, MarkdownInlineContext context) Parameters Type Name Description IMarkdownRenderer engine MarkdownStrongInlineToken token MarkdownInlineContext context Returns Type Description StringBuffer Render(IMarkdownRenderer, MarkdownTableBlockToken, MarkdownBlockContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer engine, MarkdownTableBlockToken token, MarkdownBlockContext context) Parameters Type Name Description IMarkdownRenderer engine MarkdownTableBlockToken token MarkdownBlockContext context Returns Type Description StringBuffer Render(IMarkdownRenderer, MarkdownTagInlineToken, MarkdownInlineContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer engine, MarkdownTagInlineToken token, MarkdownInlineContext context) Parameters Type Name Description IMarkdownRenderer engine MarkdownTagInlineToken token MarkdownInlineContext context Returns Type Description StringBuffer Render(IMarkdownRenderer, MarkdownTextToken, MarkdownBlockContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer engine, MarkdownTextToken token, MarkdownBlockContext context) Parameters Type Name Description IMarkdownRenderer engine MarkdownTextToken token MarkdownBlockContext context Returns Type Description StringBuffer Render(IMarkdownRenderer, MarkdownTextToken, MarkdownInlineContext) Declaration public virtual StringBuffer Render(IMarkdownRenderer engine, MarkdownTextToken token, MarkdownInlineContext context) Parameters Type Name Description IMarkdownRenderer engine MarkdownTextToken token MarkdownInlineContext context Returns Type Description StringBuffer"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.GfmUrlInlineRule.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.GfmUrlInlineRule.html",
    "title": "Class GfmUrlInlineRule\r\n   | DocFX website ",
    "keywords": "Class GfmUrlInlineRule Inheritance Object GfmUrlInlineRule Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class GfmUrlInlineRule : IMarkdownRule Properties Name Declaration public string Name { get; } Proverty Value Type Description String Url Declaration public virtual Regex Url { get; } Proverty Value Type Description Regex Methods TryMatch(IMarkdownParser, ref String) Declaration public virtual IMarkdownToken TryMatch(IMarkdownParser engine, ref string source) Parameters Type Name Description IMarkdownParser engine String source Returns Type Description IMarkdownToken"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.GfmTextInlineRule.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.GfmTextInlineRule.html",
    "title": "Class GfmTextInlineRule\r\n   | DocFX website ",
    "keywords": "Class GfmTextInlineRule Inheritance Object MarkdownTextInlineRule GfmTextInlineRule Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class GfmTextInlineRule : MarkdownTextInlineRule, IMarkdownRule Properties Text Declaration public override Regex Text { get; } Proverty Value Type Description Regex"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.GfmParagraphBlockRule.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.GfmParagraphBlockRule.html",
    "title": "Class GfmParagraphBlockRule\r\n   | DocFX website ",
    "keywords": "Class GfmParagraphBlockRule Inheritance Object MarkdownParagraphBlockRule GfmParagraphBlockRule Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class GfmParagraphBlockRule : MarkdownParagraphBlockRule, IMarkdownRule Properties Paragraph Declaration public override Regex Paragraph { get; } Proverty Value Type Description Regex"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.GfmHeadingBlockRule.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.GfmHeadingBlockRule.html",
    "title": "Class GfmHeadingBlockRule\r\n   | DocFX website ",
    "keywords": "Class GfmHeadingBlockRule Inheritance Object MarkdownHeadingBlockRule GfmHeadingBlockRule Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class GfmHeadingBlockRule : MarkdownHeadingBlockRule, IMarkdownRule Properties Heading Declaration public override Regex Heading { get; } Proverty Value Type Description Regex"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.GfmFencesBlockRule.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.GfmFencesBlockRule.html",
    "title": "Class GfmFencesBlockRule\r\n   | DocFX website ",
    "keywords": "Class GfmFencesBlockRule Inheritance Object GfmFencesBlockRule Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class GfmFencesBlockRule : IMarkdownRule Properties Fences Declaration public virtual Regex Fences { get; } Proverty Value Type Description Regex Name Declaration public string Name { get; } Proverty Value Type Description String Methods TryMatch(IMarkdownParser, ref String) Declaration public IMarkdownToken TryMatch(IMarkdownParser engine, ref string source) Parameters Type Name Description IMarkdownParser engine String source Returns Type Description IMarkdownToken"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.GfmEscapeInlineRule.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.GfmEscapeInlineRule.html",
    "title": "Class GfmEscapeInlineRule\r\n   | DocFX website ",
    "keywords": "Class GfmEscapeInlineRule Inheritance Object MarkdownEscapeInlineRule GfmEscapeInlineRule Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class GfmEscapeInlineRule : MarkdownEscapeInlineRule, IMarkdownRule Properties Escape Declaration public override Regex Escape { get; } Proverty Value Type Description Regex"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.GfmEngineBuilder.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.GfmEngineBuilder.html",
    "title": "Class GfmEngineBuilder\r\n   | DocFX website ",
    "keywords": "Class GfmEngineBuilder Inheritance Object MarkdownEngineBuilder GfmEngineBuilder Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class GfmEngineBuilder : MarkdownEngineBuilder Constructors GfmEngineBuilder(Options) Declaration public GfmEngineBuilder(Options options) Parameters Type Name Description Options options Methods BuildBlockRules() Declaration protected virtual void BuildBlockRules() BuildInlineRules() Declaration protected virtual void BuildInlineRules() BuildRules() Declaration protected virtual void BuildRules()"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.GfmDelInlineToken.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.GfmDelInlineToken.html",
    "title": "Class GfmDelInlineToken\r\n   | DocFX website ",
    "keywords": "Class GfmDelInlineToken Inheritance Object GfmDelInlineToken Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class GfmDelInlineToken : IMarkdownToken, IMarkdownRewritable<GfmDelInlineToken> Constructors GfmDelInlineToken(IMarkdownRule, IMarkdownContext, ImmutableArray<IMarkdownToken>, String) Declaration public GfmDelInlineToken(IMarkdownRule rule, IMarkdownContext context, ImmutableArray<IMarkdownToken> content, string rawMarkdown) Parameters Type Name Description IMarkdownRule rule IMarkdownContext context System.Collections.Immutable.ImmutableArray < IMarkdownToken > content String rawMarkdown Properties Content Declaration public ImmutableArray<IMarkdownToken> Content { get; } Proverty Value Type Description System.Collections.Immutable.ImmutableArray < IMarkdownToken > Context Declaration public IMarkdownContext Context { get; } Proverty Value Type Description IMarkdownContext RawMarkdown Declaration public string RawMarkdown { get; set; } Proverty Value Type Description String Rule Declaration public IMarkdownRule Rule { get; } Proverty Value Type Description IMarkdownRule Methods Rewrite(IMarkdownRewriteEngine) Declaration public GfmDelInlineToken Rewrite(IMarkdownRewriteEngine rewriterEngine) Parameters Type Name Description IMarkdownRewriteEngine rewriterEngine Returns Type Description GfmDelInlineToken"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.GfmDelInlineRule.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.GfmDelInlineRule.html",
    "title": "Class GfmDelInlineRule\r\n   | DocFX website ",
    "keywords": "Class GfmDelInlineRule Inheritance Object GfmDelInlineRule Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public class GfmDelInlineRule : IMarkdownRule Properties Del Declaration public virtual Regex Del { get; } Proverty Value Type Description Regex Name Declaration public string Name { get; } Proverty Value Type Description String Methods TryMatch(IMarkdownParser, ref String) Declaration public virtual IMarkdownToken TryMatch(IMarkdownParser engine, ref string source) Parameters Type Name Description IMarkdownParser engine String source Returns Type Description IMarkdownToken"
  },
  "api/Microsoft.DocAsCode.MarkdownLite.Align.html": {
    "href": "api/Microsoft.DocAsCode.MarkdownLite.Align.html",
    "title": "Enum Align\r\n   | DocFX website ",
    "keywords": "Enum Align Namespace :Microsoft.DocAsCode.MarkdownLite Assembly :Microsoft.DocAsCode.MarkdownLite.dll Syntax public enum Align Fields Center Declaration Center = 2 Left Declaration Left = 1 NotSpec Declaration NotSpec = 0 Right Declaration Right = 3"
  },
  "api/Microsoft.DocAsCode.ListWithStringFallbackConverter.html": {
    "href": "api/Microsoft.DocAsCode.ListWithStringFallbackConverter.html",
    "title": "Class ListWithStringFallbackConverter\r\n   | DocFX website ",
    "keywords": "Class ListWithStringFallbackConverter Inheritance Object Newtonsoft.Json.JsonConverter ListWithStringFallbackConverter Namespace :Microsoft.DocAsCode Assembly :docfx.dll Syntax public class ListWithStringFallbackConverter : JsonConverter Methods CanConvert(Type) Declaration public override bool CanConvert(Type objectType) Parameters Type Name Description Type objectType Returns Type Description Boolean ReadJson(JsonReader, Type, Object, JsonSerializer) Declaration public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonReader reader Type objectType Object existingValue Newtonsoft.Json.JsonSerializer serializer Returns Type Description Object WriteJson(JsonWriter, Object, JsonSerializer) Declaration public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonWriter writer Object value Newtonsoft.Json.JsonSerializer serializer"
  },
  "api/Microsoft.DocAsCode.ListWithStringFallback.html": {
    "href": "api/Microsoft.DocAsCode.ListWithStringFallback.html",
    "title": "Class ListWithStringFallback\r\n   | DocFX website ",
    "keywords": "Class ListWithStringFallback Inheritance Object System.Collections.Generic.List < String > ListWithStringFallback Namespace :Microsoft.DocAsCode Assembly :docfx.dll Syntax [JsonConverter(typeof (ListWithStringFallbackConverter))] [Serializable] public class ListWithStringFallback : List<string>, IList<string>, ICollection<string>, IList, ICollection, IReadOnlyList<string>, IReadOnlyCollection<string>, IEnumerable<string>, IEnumerable Constructors ListWithStringFallback() Declaration public ListWithStringFallback() ListWithStringFallback(IEnumerable<String>) Declaration public ListWithStringFallback(IEnumerable<string> list) Parameters Type Name Description System.Collections.Generic.IEnumerable < String > list"
  },
  "api/Microsoft.DocAsCode.Glob.html": {
    "href": "api/Microsoft.DocAsCode.Glob.html",
    "title": "Namespace Microsoft.DocAsCode.Glob\r\n   | DocFX website ",
    "keywords": "Namespace Microsoft.DocAsCode.Glob Classes FileGlob GlobMatcher Enums GlobMatcherOptions"
  },
  "api/Microsoft.DocAsCode.Glob.GlobMatcherOptions.html": {
    "href": "api/Microsoft.DocAsCode.Glob.GlobMatcherOptions.html",
    "title": "Enum GlobMatcherOptions\r\n   | DocFX website ",
    "keywords": "Enum GlobMatcherOptions Namespace :Microsoft.DocAsCode.Glob Assembly :Microsoft.DocAsCode.Glob.dll Syntax [Flags] public enum GlobMatcherOptions Fields AllowDotMatch Allow patterns to match filenames starting with a period even if the pattern does not explicitly have a period. By default disabled: a/ /b will not** match a/.c/d, unless AllowDotMatch is set Declaration AllowDotMatch = 32 AllowEscape Declaration AllowEscape = 8 AllowExpand Declaration AllowExpand = 4 AllowGlobStar Declaration AllowGlobStar = 16 AllowNegate Declaration AllowNegate = 2 IgnoreCase Declaration IgnoreCase = 1 None Declaration None = 0"
  },
  "api/Microsoft.DocAsCode.Glob.GlobMatcher.html": {
    "href": "api/Microsoft.DocAsCode.Glob.GlobMatcher.html",
    "title": "Class GlobMatcher\r\n   | DocFX website ",
    "keywords": "Class GlobMatcher Inheritance Object GlobMatcher Namespace :Microsoft.DocAsCode.Glob Assembly :Microsoft.DocAsCode.Glob.dll Syntax [Serializable] public class GlobMatcher Constructors GlobMatcher(String, GlobMatcherOptions) Declaration public GlobMatcher(string pattern, GlobMatcherOptions options = GlobMatcherOptions.IgnoreCase | GlobMatcherOptions.AllowNegate | GlobMatcherOptions.AllowExpand | GlobMatcherOptions.AllowEscape | GlobMatcherOptions.AllowGlobStar) Parameters Type Name Description String pattern GlobMatcherOptions options Fields DefaultOptions Declaration public const GlobMatcherOptions DefaultOptions Properties Options Declaration public GlobMatcherOptions Options { get; } Proverty Value Type Description GlobMatcherOptions Raw Declaration public string Raw { get; } Proverty Value Type Description String Methods GetRegex() Currently not used TODO: add test case Declaration public Regex GetRegex() Returns Type Description Regex Match(String, Boolean) Declaration public bool Match(string file, bool partial = false) Parameters Type Name Description String file Boolean partial Returns Type Description Boolean"
  },
  "api/Microsoft.DocAsCode.Glob.FileGlob.html": {
    "href": "api/Microsoft.DocAsCode.Glob.FileGlob.html",
    "title": "Class FileGlob\r\n   | DocFX website ",
    "keywords": "Class FileGlob Inheritance Object FileGlob Namespace :Microsoft.DocAsCode.Glob Assembly :Microsoft.DocAsCode.Glob.dll Syntax public class FileGlob Methods GetFiles(String, IEnumerable<String>, IEnumerable<String>, GlobMatcherOptions) Declaration public static IEnumerable<string> GetFiles(string cwd, IEnumerable<string> patterns, IEnumerable<string> excludePatterns, GlobMatcherOptions options = GlobMatcherOptions.IgnoreCase | GlobMatcherOptions.AllowNegate | GlobMatcherOptions.AllowExpand | GlobMatcherOptions.AllowEscape | GlobMatcherOptions.AllowGlobStar) Parameters Type Name Description String cwd System.Collections.Generic.IEnumerable < String > patterns System.Collections.Generic.IEnumerable < String > excludePatterns GlobMatcherOptions options Returns Type Description System.Collections.Generic.IEnumerable < String >"
  },
  "api/Microsoft.DocAsCode.FileMetadataPairsItem.html": {
    "href": "api/Microsoft.DocAsCode.FileMetadataPairsItem.html",
    "title": "Class FileMetadataPairsItem\r\n   | DocFX website ",
    "keywords": "Class FileMetadataPairsItem Inheritance Object FileMetadataPairsItem Namespace :Microsoft.DocAsCode Assembly :docfx.dll Syntax [Serializable] public class FileMetadataPairsItem Constructors FileMetadataPairsItem(String, Object) Declaration public FileMetadataPairsItem(string pattern, object value) Parameters Type Name Description String pattern Object value Properties Glob Declaration public GlobMatcher Glob { get; } Proverty Value Type Description GlobMatcher Value JObject, no need to transform it to object as the metadata value will not be used but only to be serialized Declaration public object Value { get; } Proverty Value Type Description Object"
  },
  "api/Microsoft.DocAsCode.FileMetadataPairsConverter.html": {
    "href": "api/Microsoft.DocAsCode.FileMetadataPairsConverter.html",
    "title": "Class FileMetadataPairsConverter\r\n   | DocFX website ",
    "keywords": "Class FileMetadataPairsConverter Inheritance Object Newtonsoft.Json.JsonConverter FileMetadataPairsConverter Namespace :Microsoft.DocAsCode Assembly :docfx.dll Syntax public class FileMetadataPairsConverter : JsonConverter Methods CanConvert(Type) Declaration public override bool CanConvert(Type objectType) Parameters Type Name Description Type objectType Returns Type Description Boolean ReadJson(JsonReader, Type, Object, JsonSerializer) Declaration public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonReader reader Type objectType Object existingValue Newtonsoft.Json.JsonSerializer serializer Returns Type Description Object WriteJson(JsonWriter, Object, JsonSerializer) Declaration public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonWriter writer Object value Newtonsoft.Json.JsonSerializer serializer"
  },
  "api/Microsoft.DocAsCode.FileMetadataPairs.html": {
    "href": "api/Microsoft.DocAsCode.FileMetadataPairs.html",
    "title": "Class FileMetadataPairs\r\n   | DocFX website ",
    "keywords": "Class FileMetadataPairs Inheritance Object FileMetadataPairs Namespace :Microsoft.DocAsCode Assembly :docfx.dll Syntax [Serializable] [JsonConverter(typeof (FileMetadataPairsConverter))] public class FileMetadataPairs Constructors FileMetadataPairs(FileMetadataPairsItem) Declaration public FileMetadataPairs(FileMetadataPairsItem item) Parameters Type Name Description FileMetadataPairsItem item FileMetadataPairs(List<FileMetadataPairsItem>) Declaration public FileMetadataPairs(List<FileMetadataPairsItem> items) Parameters Type Name Description System.Collections.Generic.List < FileMetadataPairsItem > items Properties Count Declaration public int Count { get; } Proverty Value Type Description Int32 Item[Int32] Declaration public FileMetadataPairsItem this[int index] { get; } Parameters Type Name Description Int32 index Proverty Value Type Description FileMetadataPairsItem Items Declaration public IReadOnlyList<FileMetadataPairsItem> Items { get; } Proverty Value Type Description System.Collections.Generic.IReadOnlyList < FileMetadataPairsItem >"
  },
  "api/Microsoft.DocAsCode.FileMappingItem.html": {
    "href": "api/Microsoft.DocAsCode.FileMappingItem.html",
    "title": "Class FileMappingItem\r\n   | DocFX website ",
    "keywords": "Class FileMappingItem Data model for a file-mapping item Inheritance Object FileMappingItem Namespace :Microsoft.DocAsCode Assembly :docfx.dll Syntax [Serializable] public class FileMappingItem Constructors FileMappingItem() Declaration public FileMappingItem() FileMappingItem(String[]) Declaration public FileMappingItem(params string[] files) Parameters Type Name Description String [] files Properties AllowDotMatch Allow files start with . to be matched even if . is not explicitly specified in the pattern. By default files start with . will not be matched by * unless the pattern starts with . . Declaration [JsonProperty(\"dot\")] public bool ? AllowDotMatch { get; set; } Proverty Value Type Description System.Nullable < Boolean > CaseSensitive Pattern match will be case sensitive. By default the pattern is case insensitive Declaration [JsonProperty(\"case\")] public bool ? CaseSensitive { get; set; } Proverty Value Type Description System.Nullable < Boolean > CurrentWorkingDirectory cwd defines the root folder for the source files, it has the same meaning as src As discussed, cwd may lead to confusing and misunderstanding, so in version 1.3, src is introduced and cwd is kept for backward compatibility Declaration [JsonProperty(\"cwd\")] [Obsolete] public string CurrentWorkingDirectory { get; set; } Proverty Value Type Description String DestinationFolder The destination folder for the files if copy/transform is used Declaration [JsonProperty(\"dest\")] public string DestinationFolder { get; set; } Proverty Value Type Description String DisableEscape Disable the usage of \\ to escape values. By default the usage is enabled. Declaration [JsonProperty(\"noEscape\")] public bool ? DisableEscape { get; set; } Proverty Value Type Description System.Nullable < Boolean > DisableExpand Disable {a,b}c => [\"ac\", \"bc\"] . By default the usage is enabled. Declaration [JsonProperty(\"noExpand\")] public bool ? DisableExpand { get; set; } Proverty Value Type Description System.Nullable < Boolean > DisableGlobStar Disable the usage of ** to match everything including / when it is the beginning of the pattern or is after / . By default the usage is enable. Declaration [JsonProperty(\"noGlobStar\")] public bool ? DisableGlobStar { get; set; } Proverty Value Type Description System.Nullable < Boolean > DisableNegate Disable pattern begin with ! to mean negate By default the usage is enabled. Declaration [JsonProperty(\"noNegate\")] public bool ? DisableNegate { get; set; } Proverty Value Type Description System.Nullable < Boolean > Exclude The file glob pattern collection for files that should be excluded, with path relative to property src / cwd is value is set Declaration [JsonProperty(\"exclude\")] public FileItems Exclude { get; set; } Proverty Value Type Description FileItems Files The file glob pattern collection, with path relative to property src / cwd is value is set Declaration [JsonProperty(\"files\")] public FileItems Files { get; set; } Proverty Value Type Description FileItems Name The name of current item, the value is not used for now Declaration [JsonProperty(\"name\")] public string Name { get; set; } Proverty Value Type Description String SourceFolder src defines the root folder for the source files, it has the same meaning as cwd Declaration [JsonProperty(\"src\")] public string SourceFolder { get; set; } Proverty Value Type Description String"
  },
  "api/Microsoft.DocAsCode.FileMappingConverter.html": {
    "href": "api/Microsoft.DocAsCode.FileMappingConverter.html",
    "title": "Class FileMappingConverter\r\n   | DocFX website ",
    "keywords": "Class FileMappingConverter Inheritance Object Newtonsoft.Json.JsonConverter FileMappingConverter Namespace :Microsoft.DocAsCode Assembly :docfx.dll Syntax public class FileMappingConverter : JsonConverter Methods CanConvert(Type) Declaration public override bool CanConvert(Type objectType) Parameters Type Name Description Type objectType Returns Type Description Boolean ReadJson(JsonReader, Type, Object, JsonSerializer) Declaration public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonReader reader Type objectType Object existingValue Newtonsoft.Json.JsonSerializer serializer Returns Type Description Object WriteJson(JsonWriter, Object, JsonSerializer) Declaration public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonWriter writer Object value Newtonsoft.Json.JsonSerializer serializer"
  },
  "api/Microsoft.DocAsCode.FileMapping.html": {
    "href": "api/Microsoft.DocAsCode.FileMapping.html",
    "title": "Class FileMapping\r\n   | DocFX website ",
    "keywords": "Class FileMapping FileMapping supports three forms: Object form This form supports multiple name-files file mappings, with the property name as the name, and the value as the files. e.g. projects: { \"name1\": [\"file1\", \"file2\"], \"name2\": \"file3\" } Array form This form supports multiple name-files file mappings, and also allows additional properties per mapping. e.g. projects: [ {name: \"name1\", files: [\"file1\", \"file2\"]}, {name: \"name2\", files: \"file3\"}, {files: [\"file4\", \"file5\"], exclude: [\"file5\"]} ] Compact form This form supports multiple file patterns in an array e.g. projects: [\"file1\", \"file2\"] Inheritance Object FileMapping Namespace :Microsoft.DocAsCode Assembly :docfx.dll Syntax [JsonConverter(typeof (FileMappingConverter))] [Serializable] public class FileMapping Constructors FileMapping() Declaration public FileMapping() FileMapping(FileMappingItem) Declaration public FileMapping(FileMappingItem item) Parameters Type Name Description FileMappingItem item FileMapping(IEnumerable<FileMappingItem>) Declaration public FileMapping(IEnumerable<FileMappingItem> items) Parameters Type Name Description System.Collections.Generic.IEnumerable < FileMappingItem > items Properties Expanded Declaration public bool Expanded { get; set; } Proverty Value Type Description Boolean Items Declaration public IReadOnlyList<FileMappingItem> Items { get; } Proverty Value Type Description System.Collections.Generic.IReadOnlyList < FileMappingItem > Methods Add(FileMappingItem) Should not merge FileMappingItems even if they are using the same name, because other propertes also matters, e.g. cwd, exclude. Declaration public void Add(FileMappingItem item) Parameters Type Name Description FileMappingItem item"
  },
  "api/Microsoft.DocAsCode.FileItems.html": {
    "href": "api/Microsoft.DocAsCode.FileItems.html",
    "title": "Class FileItems\r\n   | DocFX website ",
    "keywords": "Class FileItems Inheritance Object System.Collections.Generic.List < String > FileItems Namespace :Microsoft.DocAsCode Assembly :docfx.dll Syntax [Serializable] public class FileItems : List<string>, IList<string>, ICollection<string>, IList, ICollection, IReadOnlyList<string>, IReadOnlyCollection<string>, IEnumerable<string>, IEnumerable Constructors FileItems(IEnumerable<String>) Declaration public FileItems(IEnumerable<string> files) Parameters Type Name Description System.Collections.Generic.IEnumerable < String > files FileItems(String) Declaration public FileItems(string file) Parameters Type Name Description String file Operators Explicit(String to FileItems) Declaration public static explicit operator FileItems(string input) Parameters Type Name Description String input Returns Type Description FileItems"
  },
  "api/Microsoft.DocAsCode.Exceptions.html": {
    "href": "api/Microsoft.DocAsCode.Exceptions.html",
    "title": "Namespace Microsoft.DocAsCode.Exceptions\r\n   | DocFX website ",
    "keywords": "Namespace Microsoft.DocAsCode.Exceptions Classes CrossReferenceNotResolvedException DocfxException DocfxInitException DocfxMetadataException ExtractMetadataException InvalidOptionException PluginDirectoryAlreadyExistsException PluginException ResourceFileExceedsMaxDepthException"
  },
  "api/Microsoft.DocAsCode.Exceptions.ResourceFileExceedsMaxDepthException.html": {
    "href": "api/Microsoft.DocAsCode.Exceptions.ResourceFileExceedsMaxDepthException.html",
    "title": "Class ResourceFileExceedsMaxDepthException\r\n   | DocFX website ",
    "keywords": "Class ResourceFileExceedsMaxDepthException Inheritance Object Exception DocfxException ResourceFileExceedsMaxDepthException Namespace :Microsoft.DocAsCode.Exceptions Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Serializable] public class ResourceFileExceedsMaxDepthException : DocfxException, ISerializable, _Exception Constructors ResourceFileExceedsMaxDepthException(Int32, String, String) Declaration public ResourceFileExceedsMaxDepthException(int maxDepth, string fileName, string resourceName) Parameters Type Name Description Int32 maxDepth String fileName String resourceName ResourceFileExceedsMaxDepthException(SerializationInfo, StreamingContext) Declaration protected ResourceFileExceedsMaxDepthException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context Properties DirectoryName Declaration public string DirectoryName { get; } Proverty Value Type Description String MaxDepth Declaration public int MaxDepth { get; } Proverty Value Type Description Int32 ResourceName Declaration public string ResourceName { get; } Proverty Value Type Description String Methods GetObjectData(SerializationInfo, StreamingContext) Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context"
  },
  "api/Microsoft.DocAsCode.Exceptions.PluginException.html": {
    "href": "api/Microsoft.DocAsCode.Exceptions.PluginException.html",
    "title": "Class PluginException\r\n   | DocFX website ",
    "keywords": "Class PluginException Inheritance Object Exception DocfxException PluginException Namespace :Microsoft.DocAsCode.Exceptions Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Serializable] public class PluginException : DocfxException, ISerializable, _Exception Constructors PluginException() Declaration public PluginException() PluginException(SerializationInfo, StreamingContext) Declaration protected PluginException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context PluginException(String) Declaration public PluginException(string message) Parameters Type Name Description String message"
  },
  "api/Microsoft.DocAsCode.Exceptions.PluginDirectoryAlreadyExistsException.html": {
    "href": "api/Microsoft.DocAsCode.Exceptions.PluginDirectoryAlreadyExistsException.html",
    "title": "Class PluginDirectoryAlreadyExistsException\r\n   | DocFX website ",
    "keywords": "Class PluginDirectoryAlreadyExistsException Inheritance Object Exception DocfxException PluginException PluginDirectoryAlreadyExistsException Namespace :Microsoft.DocAsCode.Exceptions Assembly :Microsoft.DocAsCode.EntityModel.dll Syntax [Serializable] public class PluginDirectoryAlreadyExistsException : PluginException, ISerializable, _Exception Constructors PluginDirectoryAlreadyExistsException(SerializationInfo, StreamingContext) Declaration protected PluginDirectoryAlreadyExistsException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context PluginDirectoryAlreadyExistsException(String) Declaration public PluginDirectoryAlreadyExistsException(string directoryName) Parameters Type Name Description String directoryName"
  },
  "api/Microsoft.DocAsCode.Exceptions.InvalidOptionException.html": {
    "href": "api/Microsoft.DocAsCode.Exceptions.InvalidOptionException.html",
    "title": "Class InvalidOptionException\r\n   | DocFX website ",
    "keywords": "Class InvalidOptionException Inheritance Object Exception SystemException ArgumentException InvalidOptionException Namespace :Microsoft.DocAsCode.Exceptions Assembly :docfx.dll Syntax public class InvalidOptionException : ArgumentException, _Exception, ISerializable Constructors InvalidOptionException() Declaration public InvalidOptionException() InvalidOptionException(SerializationInfo, StreamingContext) Declaration protected InvalidOptionException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context InvalidOptionException(String) Declaration public InvalidOptionException(string message) Parameters Type Name Description String message InvalidOptionException(String, Exception) Declaration public InvalidOptionException(string message, Exception innerException) Parameters Type Name Description String message Exception innerException InvalidOptionException(String, String) Declaration public InvalidOptionException(string message, string paramName) Parameters Type Name Description String message String paramName InvalidOptionException(String, String, Exception) Declaration public InvalidOptionException(string message, string paramName, Exception innerException) Parameters Type Name Description String message String paramName Exception innerException"
  }
}